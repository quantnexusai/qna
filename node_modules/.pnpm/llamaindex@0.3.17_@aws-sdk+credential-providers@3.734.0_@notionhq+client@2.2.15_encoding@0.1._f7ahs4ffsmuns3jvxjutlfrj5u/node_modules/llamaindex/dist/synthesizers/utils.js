import { MetadataMode, ModalityType, splitNodesByType } from "../Node.js";
import { imageToDataUrl } from "../embeddings/utils.js";
export async function createMessageContent(prompt, nodes, extraParams = {}, metadataMode = MetadataMode.NONE) {
    const content = [];
    const nodeMap = splitNodesByType(nodes);
    for(const type in nodeMap){
        // for each retrieved modality type, create message content
        const nodes = nodeMap[type];
        if (nodes) {
            content.push(...await createContentPerModality(prompt, type, nodes, extraParams, metadataMode));
        }
    }
    return content;
}
// eslint-disable-next-line max-params
async function createContentPerModality(prompt, type, nodes, extraParams, metadataMode) {
    switch(type){
        case ModalityType.TEXT:
            return [
                {
                    type: "text",
                    text: prompt({
                        ...extraParams,
                        context: nodes.map((r)=>r.getContent(metadataMode)).join("\n\n")
                    })
                }
            ];
        case ModalityType.IMAGE:
            const images = await Promise.all(nodes.map(async (node)=>{
                return {
                    type: "image_url",
                    image_url: {
                        url: await imageToDataUrl(node.image)
                    }
                };
            }));
            return images;
        default:
            return [];
    }
}
