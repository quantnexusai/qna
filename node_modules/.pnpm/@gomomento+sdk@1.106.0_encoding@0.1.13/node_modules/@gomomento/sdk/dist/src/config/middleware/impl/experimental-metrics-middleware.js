"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExperimentalMetricsMiddleware = exports.ExperimentalMetricsMiddlewareRequestHandler = void 0;
const cache_data_client_1 = require("../../../internal/cache-data-client");
const FIELD_NAMES = [
    'numActiveRequestsAtStart',
    'numActiveRequestsAtFinish',
    'requestType',
    'status',
    'startTime',
    'requestBodyTime',
    'endTime',
    'duration',
    'requestSize',
    'responseSize',
    'connectionID',
];
class ExperimentalMetricsMiddlewareRequestHandler {
    constructor(parent, logger, context) {
        this.parent = parent;
        this.logger = logger;
        this.connectionID = context[cache_data_client_1.CONNECTION_ID_KEY];
        this.numActiveRequestsAtStart = parent.incrementActiveRequestCount();
        this.startTime = new Date().getTime();
        this.receivedResponseBody = false;
        this.receivedResponseStatus = false;
    }
    onRequestBody(request) {
        this.requestSize = request.messageLength();
        this.requestType = request._grpcMessage.constructor.name;
        this.requestBodyTime = new Date().getTime();
        return Promise.resolve(request);
    }
    onRequestMetadata(metadata) {
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        if (response !== null) {
            this.responseSize = response.messageLength();
        }
        else {
            this.responseSize = 0;
        }
        this.receivedResponseBody = true;
        if (this.done())
            this.recordMetrics();
        return Promise.resolve(response);
    }
    onResponseMetadata(metadata) {
        return Promise.resolve(metadata);
    }
    onResponseStatus(status) {
        this.receivedResponseStatus = true;
        this.responseStatusCode = status.code();
        if (this.done())
            this.recordMetrics();
        return Promise.resolve(status);
    }
    done() {
        return this.receivedResponseBody && this.receivedResponseStatus;
    }
    recordMetrics() {
        const endTime = new Date().getTime();
        const metrics = {
            momento: {
                numActiveRequestsAtStart: this.numActiveRequestsAtStart,
                numActiveRequestsAtFinish: this.parent.activeRequestCount(),
                requestType: this.requestType,
                status: this.responseStatusCode,
                startTime: this.startTime,
                requestBodyTime: this.requestBodyTime,
                endTime: endTime,
                duration: endTime - this.startTime,
                requestSize: this.requestSize,
                responseSize: this.responseSize,
                connectionID: this.connectionID,
            },
        };
        this.emitMetrics(metrics).catch(e => 
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        this.logger.error(`An error occurred when trying to emit metrics: ${e}`));
        this.parent.decrementActiveRequestCount();
    }
}
exports.ExperimentalMetricsMiddlewareRequestHandler = ExperimentalMetricsMiddlewareRequestHandler;
/**
 * This middleware enables per-request client-side metrics.  This is an abstract
 * class that does not route the metrics to a specific destination; concrete subclasses
 * may store the metrics as they see fit.
 *
 * The metrics format is currently considered experimental; in a future release,
 * once the format is considered stable, this class will be renamed to remove
 * the Experimental prefix.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * See `advanced.ts` in the examples directory for an example of how to set up
 * your {Configuration} to enable this middleware.
 */
class ExperimentalMetricsMiddleware {
    constructor(loggerFactory, requestHandlerFactoryFn) {
        this.numActiveRequests = 0;
        this.logger = loggerFactory.getLogger(this);
        this.requestHandlerFactoryFn = requestHandlerFactoryFn;
    }
    fieldNames() {
        return FIELD_NAMES;
    }
    incrementActiveRequestCount() {
        return ++this.numActiveRequests;
    }
    activeRequestCount() {
        return this.numActiveRequests;
    }
    decrementActiveRequestCount() {
        --this.numActiveRequests;
    }
    onNewRequest(context) {
        return this.requestHandlerFactoryFn(this, this.logger, context);
    }
}
exports.ExperimentalMetricsMiddleware = ExperimentalMetricsMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwZXJpbWVudGFsLW1ldHJpY3MtbWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb25maWcvbWlkZGxld2FyZS9pbXBsL2V4cGVyaW1lbnRhbC1tZXRyaWNzLW1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU0EsMkVBQXNFO0FBRXRFLE1BQU0sV0FBVyxHQUFrQjtJQUNqQywwQkFBMEI7SUFDMUIsMkJBQTJCO0lBQzNCLGFBQWE7SUFDYixRQUFRO0lBQ1IsV0FBVztJQUNYLGlCQUFpQjtJQUNqQixTQUFTO0lBQ1QsVUFBVTtJQUNWLGFBQWE7SUFDYixjQUFjO0lBQ2QsY0FBYztDQUNmLENBQUM7QUFtREYsTUFBc0IsMkNBQTJDO0lBa0IvRCxZQUNFLE1BQXFDLEVBQ3JDLE1BQXFCLEVBQ3JCLE9BQXdDO1FBRXhDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLHFDQUFpQixDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLHdCQUF3QixHQUFHLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV0QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7SUFDdEMsQ0FBQztJQUlELGFBQWEsQ0FBQyxPQUEwQjtRQUN0QyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztRQUN6RCxJQUFJLENBQUMsZUFB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QUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELDJCQUEyQjtRQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2xDLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDaEMsQ0FBQztJQUVELDJCQUEyQjtRQUN6QixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRUQsWUFBWSxDQUNWLE9BQXdDO1FBRXhDLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDRjtBQTNDRCxzRUEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBNaWRkbGV3YXJlLFxuICBNaWRkbGV3YXJlTWVzc2FnZSxcbiAgTWlkZGxld2FyZU1ldGFkYXRhLFxuICBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIsXG4gIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlckNvbnRleHQsXG4gIE1pZGRsZXdhcmVTdGF0dXMsXG59IGZyb20gJy4uL21pZGRsZXdhcmUnO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5pbXBvcnQge0NPTk5FQ1RJT05fSURfS0VZfSBmcm9tICcuLi8uLi8uLi9pbnRlcm5hbC9jYWNoZS1kYXRhLWNsaWVudCc7XG5cbmNvbnN0IEZJRUxEX05BTUVTOiBBcnJheTxzdHJpbmc+ID0gW1xuICAnbnVtQWN0aXZlUmVxdWVzdHNBdFN0YXJ0JyxcbiAgJ251bUFjdGl2ZVJlcXVlc3RzQXRGaW5pc2gnLFxuICAncmVxdWVzdFR5cGUnLFxuICAnc3RhdHVzJyxcbiAgJ3N0YXJ0VGltZScsXG4gICdyZXF1ZXN0Qm9keVRpbWUnLFxuICAnZW5kVGltZScsXG4gICdkdXJhdGlvbicsXG4gICdyZXF1ZXN0U2l6ZScsXG4gICdyZXNwb25zZVNpemUnLFxuICAnY29ubmVjdGlvbklEJyxcbl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwZXJpbWVudGFsUmVxdWVzdE1ldHJpY3Mge1xuICBtb21lbnRvOiB7XG4gICAgLyoqXG4gICAgICogbnVtYmVyIG9mIHJlcXVlc3RzIGFjdGl2ZSBhdCB0aGUgc3RhcnQgb2YgdGhlIHJlcXVlc3RcbiAgICAgKi9cbiAgICBudW1BY3RpdmVSZXF1ZXN0c0F0U3RhcnQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBudW1iZXIgb2YgcmVxdWVzdHMgYWN0aXZlIGF0IHRoZSBmaW5pc2ggb2YgdGhlIHJlcXVlc3QgKGluY2x1ZGluZyB0aGUgcmVxdWVzdCBpdHNlbGYpXG4gICAgICovXG4gICAgbnVtQWN0aXZlUmVxdWVzdHNBdEZpbmlzaDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBnZW5lcmF0ZWQgZ3JwYyBvYmplY3QgdHlwZSBvZiB0aGUgcmVxdWVzdFxuICAgICAqL1xuICAgIHJlcXVlc3RUeXBlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGdycGMgc3RhdHVzIGNvZGUgb2YgdGhlIHJlc3BvbnNlXG4gICAgICovXG4gICAgc3RhdHVzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgdGhlIHJlcXVlc3Qgc3RhcnRlZCAobWlsbGlzIHNpbmNlIGVwb2NoKVxuICAgICAqL1xuICAgIHN0YXJ0VGltZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0IHdhcyBhdmFpbGFibGUgdG8gdGhlIGdycGMgbGlicmFyeSAobWlsbGlzIHNpbmNlIGVwb2NoKVxuICAgICAqL1xuICAgIHJlcXVlc3RCb2R5VGltZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIHRoZSByZXF1ZXN0IGNvbXBsZXRlZCAobWlsbGlzIHNpbmNlIGVwb2NoKVxuICAgICAqL1xuICAgIGVuZFRpbWU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHJlcXVlc3QgKGluIG1pbGxpcylcbiAgICAgKi9cbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoZSByZXF1ZXN0IGJvZHkgaW4gYnl0ZXNcbiAgICAgKi9cbiAgICByZXF1ZXN0U2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoZSByZXNwb25zZSBib2R5IGluIGJ5dGVzXG4gICAgICovXG4gICAgcmVzcG9uc2VTaXplOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBzcGVjaWZpYyBjb25uZWN0aW9uIHRoYXQgbWFkZSB0aGUgcmVxdWVzdFxuICAgICAqL1xuICAgIGNvbm5lY3Rpb25JRDogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXhwZXJpbWVudGFsTWV0cmljc01pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxuICBpbXBsZW1lbnRzIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlclxue1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgcGFyZW50OiBFeHBlcmltZW50YWxNZXRyaWNzTWlkZGxld2FyZTtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBjb25uZWN0aW9uSUQ6IHN0cmluZztcblxuICBwcml2YXRlIHJlYWRvbmx5IG51bUFjdGl2ZVJlcXVlc3RzQXRTdGFydDogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0VGltZTogbnVtYmVyO1xuICBwcml2YXRlIHJlcXVlc3RCb2R5VGltZTogbnVtYmVyO1xuICBwcml2YXRlIHJlcXVlc3RUeXBlOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVxdWVzdFNpemU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZXNwb25zZVN0YXR1c0NvZGU6IG51bWJlcjtcbiAgcHJpdmF0ZSByZXNwb25zZVNpemU6IG51bWJlcjtcblxuICBwcml2YXRlIHJlY2VpdmVkUmVzcG9uc2VCb2R5OiBib29sZWFuO1xuICBwcml2YXRlIHJlY2VpdmVkUmVzcG9uc2VTdGF0dXM6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcGFyZW50OiBFeHBlcmltZW50YWxNZXRyaWNzTWlkZGxld2FyZSxcbiAgICBsb2dnZXI6IE1vbWVudG9Mb2dnZXIsXG4gICAgY29udGV4dDogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyQ29udGV4dFxuICApIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlcjtcbiAgICB0aGlzLmNvbm5lY3Rpb25JRCA9IGNvbnRleHRbQ09OTkVDVElPTl9JRF9LRVldO1xuXG4gICAgdGhpcy5udW1BY3RpdmVSZXF1ZXN0c0F0U3RhcnQgPSBwYXJlbnQuaW5jcmVtZW50QWN0aXZlUmVxdWVzdENvdW50KCk7XG4gICAgdGhpcy5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHRoaXMucmVjZWl2ZWRSZXNwb25zZUJvZHkgPSBmYWxzZTtcbiAgICB0aGlzLnJlY2VpdmVkUmVzcG9uc2VTdGF0dXMgPSBmYWxzZTtcbiAgfVxuXG4gIGFic3RyYWN0IGVtaXRNZXRyaWNzKG1ldHJpY3M6IEV4cGVyaW1lbnRhbFJlcXVlc3RNZXRyaWNzKTogUHJvbWlzZTx2b2lkPjtcblxuICBvblJlcXVlc3RCb2R5KHJlcXVlc3Q6IE1pZGRsZXdhcmVNZXNzYWdlKTogUHJvbWlzZTxNaWRkbGV3YXJlTWVzc2FnZT4ge1xuICAgIHRoaXMucmVxdWVzdFNpemUgPSByZXF1ZXN0Lm1lc3NhZ2VMZW5ndGgoKTtcbiAgICB0aGlzLnJlcXVlc3RUeXBlID0gcmVxdWVzdC5fZ3JwY01lc3NhZ2UuY29uc3RydWN0b3IubmFtZTtcbiAgICB0aGlzLnJlcXVlc3RCb2R5VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVxdWVzdCk7XG4gIH1cblxuICBvblJlcXVlc3RNZXRhZGF0YShtZXRhZGF0YTogTWlkZGxld2FyZU1ldGFkYXRhKTogUHJvbWlzZTxNaWRkbGV3YXJlTWV0YWRhdGE+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ldGFkYXRhKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VCb2R5KFxuICAgIHJlc3BvbnNlOiBNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGxcbiAgKTogUHJvbWlzZTxNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGw+IHtcbiAgICBpZiAocmVzcG9uc2UgIT09IG51bGwpIHtcbiAgICAgIHRoaXMucmVzcG9uc2VTaXplID0gcmVzcG9uc2UubWVzc2FnZUxlbmd0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc3BvbnNlU2l6ZSA9IDA7XG4gICAgfVxuICAgIHRoaXMucmVjZWl2ZWRSZXNwb25zZUJvZHkgPSB0cnVlO1xuICAgIGlmICh0aGlzLmRvbmUoKSkgdGhpcy5yZWNvcmRNZXRyaWNzKCk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSk7XG4gIH1cblxuICBvblJlc3BvbnNlTWV0YWRhdGEoXG4gICAgbWV0YWRhdGE6IE1pZGRsZXdhcmVNZXRhZGF0YVxuICApOiBQcm9taXNlPE1pZGRsZXdhcmVNZXRhZGF0YT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWV0YWRhdGEpO1xuICB9XG5cbiAgb25SZXNwb25zZVN0YXR1cyhzdGF0dXM6IE1pZGRsZXdhcmVTdGF0dXMpOiBQcm9taXNlPE1pZGRsZXdhcmVTdGF0dXM+IHtcbiAgICB0aGlzLnJlY2VpdmVkUmVzcG9uc2VTdGF0dXMgPSB0cnVlO1xuICAgIHRoaXMucmVzcG9uc2VTdGF0dXNDb2RlID0gc3RhdHVzLmNvZGUoKTtcbiAgICBpZiAodGhpcy5kb25lKCkpIHRoaXMucmVjb3JkTWV0cmljcygpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhdHVzKTtcbiAgfVxuXG4gIHByaXZhdGUgZG9uZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3BvbnNlQm9keSAmJiB0aGlzLnJlY2VpdmVkUmVzcG9uc2VTdGF0dXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgcmVjb3JkTWV0cmljcygpOiB2b2lkIHtcbiAgICBjb25zdCBlbmRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgY29uc3QgbWV0cmljczogRXhwZXJpbWVudGFsUmVxdWVzdE1ldHJpY3MgPSB7XG4gICAgICBtb21lbnRvOiB7XG4gICAgICAgIG51bUFjdGl2ZVJlcXVlc3RzQXRTdGFydDogdGhpcy5udW1BY3RpdmVSZXF1ZXN0c0F0U3RhcnQsXG4gICAgICAgIG51bUFjdGl2ZVJlcXVlc3RzQXRGaW5pc2g6IHRoaXMucGFyZW50LmFjdGl2ZVJlcXVlc3RDb3VudCgpLFxuICAgICAgICByZXF1ZXN0VHlwZTogdGhpcy5yZXF1ZXN0VHlwZSxcbiAgICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlU3RhdHVzQ29kZSxcbiAgICAgICAgc3RhcnRUaW1lOiB0aGlzLnN0YXJ0VGltZSxcbiAgICAgICAgcmVxdWVzdEJvZHlUaW1lOiB0aGlzLnJlcXVlc3RCb2R5VGltZSxcbiAgICAgICAgZW5kVGltZTogZW5kVGltZSxcbiAgICAgICAgZHVyYXRpb246IGVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZSxcbiAgICAgICAgcmVxdWVzdFNpemU6IHRoaXMucmVxdWVzdFNpemUsXG4gICAgICAgIHJlc3BvbnNlU2l6ZTogdGhpcy5yZXNwb25zZVNpemUsXG4gICAgICAgIGNvbm5lY3Rpb25JRDogdGhpcy5jb25uZWN0aW9uSUQsXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5lbWl0TWV0cmljcyhtZXRyaWNzKS5jYXRjaChlID0+XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zXG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiB0cnlpbmcgdG8gZW1pdCBtZXRyaWNzOiAke2V9YClcbiAgICApO1xuICAgIHRoaXMucGFyZW50LmRlY3JlbWVudEFjdGl2ZVJlcXVlc3RDb3VudCgpO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBtaWRkbGV3YXJlIGVuYWJsZXMgcGVyLXJlcXVlc3QgY2xpZW50LXNpZGUgbWV0cmljcy4gIFRoaXMgaXMgYW4gYWJzdHJhY3RcbiAqIGNsYXNzIHRoYXQgZG9lcyBub3Qgcm91dGUgdGhlIG1ldHJpY3MgdG8gYSBzcGVjaWZpYyBkZXN0aW5hdGlvbjsgY29uY3JldGUgc3ViY2xhc3Nlc1xuICogbWF5IHN0b3JlIHRoZSBtZXRyaWNzIGFzIHRoZXkgc2VlIGZpdC5cbiAqXG4gKiBUaGUgbWV0cmljcyBmb3JtYXQgaXMgY3VycmVudGx5IGNvbnNpZGVyZWQgZXhwZXJpbWVudGFsOyBpbiBhIGZ1dHVyZSByZWxlYXNlLFxuICogb25jZSB0aGUgZm9ybWF0IGlzIGNvbnNpZGVyZWQgc3RhYmxlLCB0aGlzIGNsYXNzIHdpbGwgYmUgcmVuYW1lZCB0byByZW1vdmVcbiAqIHRoZSBFeHBlcmltZW50YWwgcHJlZml4LlxuICpcbiAqIFdBUk5JTkc6IGVuYWJsaW5nIHRoaXMgbWlkZGxld2FyZSBtYXkgaGF2ZSBtaW5vciBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsXG4gKiBzbyBlbmFibGUgd2l0aCBjYXV0aW9uLlxuICpcbiAqIFNlZSBgYWR2YW5jZWQudHNgIGluIHRoZSBleGFtcGxlcyBkaXJlY3RvcnkgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRvIHNldCB1cFxuICogeW91ciB7Q29uZmlndXJhdGlvbn0gdG8gZW5hYmxlIHRoaXMgbWlkZGxld2FyZS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlIGltcGxlbWVudHMgTWlkZGxld2FyZSB7XG4gIHByaXZhdGUgbnVtQWN0aXZlUmVxdWVzdHMgPSAwO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcmVxdWVzdEhhbmRsZXJGYWN0b3J5Rm46IChcbiAgICBwYXJlbnQ6IEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlLFxuICAgIGxvZ2dlcjogTW9tZW50b0xvZ2dlcixcbiAgICBjb250ZXh0OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0XG4gICkgPT4gTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxuICAgIHJlcXVlc3RIYW5kbGVyRmFjdG9yeUZuOiAoXG4gICAgICBwYXJlbnQ6IEV4cGVyaW1lbnRhbE1ldHJpY3NNaWRkbGV3YXJlLFxuICAgICAgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyLFxuICAgICAgY29udGV4dDogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyQ29udGV4dFxuICAgICkgPT4gTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyXG4gICkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gICAgdGhpcy5yZXF1ZXN0SGFuZGxlckZhY3RvcnlGbiA9IHJlcXVlc3RIYW5kbGVyRmFjdG9yeUZuO1xuICB9XG5cbiAgZmllbGROYW1lcygpOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gRklFTERfTkFNRVM7XG4gIH1cblxuICBpbmNyZW1lbnRBY3RpdmVSZXF1ZXN0Q291bnQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKyt0aGlzLm51bUFjdGl2ZVJlcXVlc3RzO1xuICB9XG5cbiAgYWN0aXZlUmVxdWVzdENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubnVtQWN0aXZlUmVxdWVzdHM7XG4gIH1cblxuICBkZWNyZW1lbnRBY3RpdmVSZXF1ZXN0Q291bnQoKTogdm9pZCB7XG4gICAgLS10aGlzLm51bUFjdGl2ZVJlcXVlc3RzO1xuICB9XG5cbiAgb25OZXdSZXF1ZXN0KFxuICAgIGNvbnRleHQ6IE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlckNvbnRleHRcbiAgKTogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0SGFuZGxlckZhY3RvcnlGbih0aGlzLCB0aGlzLmxvZ2dlciwgY29udGV4dCk7XG4gIH1cbn1cbiJdfQ==