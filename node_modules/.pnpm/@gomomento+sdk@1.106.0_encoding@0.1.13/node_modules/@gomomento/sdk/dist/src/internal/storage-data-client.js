"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageDataClient = void 0;
const sdk_core_1 = require("@gomomento/sdk-core");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const store_1 = require("@gomomento/generated-types/dist/store");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const grpc_channel_options_1 = require("./grpc/grpc-channel-options");
const cache_1 = require("../config/transport/cache");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
class StorageDataClient {
    /**
     * @param {StorageClientAllProps} props
     */
    constructor(props) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(false);
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.requestTimeoutMs = this.configuration
            .getTransportStrategy()
            .getGrpcConfig()
            .getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating storage client using endpoint: '${this.credentialProvider.getStorageEndpoint()}'`);
        // NOTE: This is hard-coded for now but we may want to expose it via StorageConfiguration in the
        // future, as we do with some of the other clients.
        const grpcConfig = new cache_1.StaticGrpcConfiguration({
            deadlineMillis: this.configuration
                .getTransportStrategy()
                .getGrpcConfig()
                .getDeadlineMillis(),
            maxSessionMemoryMb: StorageDataClient.DEFAULT_MAX_SESSION_MEMORY_MB,
        });
        const channelOptions = (0, grpc_channel_options_1.grpcChannelOptionsFromGrpcConfig)(grpcConfig);
        this.client = new store_1.store.StoreClient(this.credentialProvider.getStorageEndpoint(), this.credentialProvider.isStorageEndpointSecure()
            ? grpc_js_1.ChannelCredentials.createSsl()
            : grpc_js_1.ChannelCredentials.createInsecure(), channelOptions);
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory());
    }
    close() {
        this.logger.debug('Closing storage data clients');
        this.client.close();
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    validateStoreNameOrThrowError(storeName) {
        try {
            (0, utils_1.validateStoreName)(storeName);
            return;
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.StoragePut.Error(err));
        }
    }
    initializeInterceptors(_loggerFactory) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:store:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        return [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'StorageDataClient',
                loggerFactory: this.configuration.getLoggerFactory(),
                retryStrategy: this.configuration.getRetryStrategy(),
                overallRequestTimeoutMs: this.requestTimeoutMs,
            }),
        ];
    }
    createMetadata(storeName) {
        const metadata = new grpc_js_1.Metadata();
        metadata.set('store', storeName);
        return metadata;
    }
    async get(storeName, key) {
        try {
            (0, utils_1.validateStoreName)(storeName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.StorageGet.Error(err));
        }
        this.logger.trace(`Issuing 'get' request; store: ${storeName}, key: ${key}`);
        return await this.sendGet(storeName, key);
    }
    async sendGet(storeName, key) {
        const request = new store_1.store._StoreGetRequest({
            key: key,
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject) => {
            this.client.Get(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                var _a;
                const value = (_a = resp === null || resp === void 0 ? void 0 : resp.value) === null || _a === void 0 ? void 0 : _a.value;
                if (value) {
                    switch (value) {
                        case 'double_value': {
                            return resolve(sdk_core_1.StorageGet.Found.ofDouble(resp.value.double_value));
                        }
                        case 'string_value': {
                            return resolve(sdk_core_1.StorageGet.Found.ofString(resp.value.string_value));
                        }
                        case 'bytes_value': {
                            return resolve(sdk_core_1.StorageGet.Found.ofBytes(resp.value.bytes_value));
                        }
                        case 'integer_value': {
                            return resolve(sdk_core_1.StorageGet.Found.ofInt(resp.value.integer_value));
                        }
                        case 'none': {
                            return resolve(new sdk_core_1.StorageGet.Error(new sdk_core_1.UnknownError('StorageGet responded with an unknown result')));
                        }
                    }
                }
                else {
                    const sdkError = this.cacheServiceErrorMapper.convertError(err);
                    if (sdkError.errorCode() ===
                        sdk_core_1.MomentoErrorCode.STORE_ITEM_NOT_FOUND_ERROR) {
                        return resolve(new sdk_core_1.StorageGet.NotFound());
                    }
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.StorageGet.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async putInt(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({ integer_value: value });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putDouble(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({ double_value: value });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putString(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({ string_value: value });
        return await this.sendPut(storeName, key, storeValue);
    }
    async putBytes(storeName, key, value) {
        this.validateStoreNameOrThrowError(storeName);
        this.logger.trace(`Issuing 'put' request; store: ${storeName}, key: ${key}`);
        const storeValue = new store_1.store._StoreValue({ bytes_value: value });
        return await this.sendPut(storeName, key, storeValue);
    }
    async sendPut(storeName, key, storeValue) {
        const request = new store_1.store._StorePutRequest({
            key: key,
            value: storeValue,
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject) => {
            this.client.Put(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.StoragePut.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.StoragePut.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async delete(storeName, key) {
        try {
            (0, utils_1.validateStoreName)(storeName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.StorageDelete.Error(err));
        }
        this.logger.trace(`Issuing 'delete' request; store: ${storeName}, key: ${key}`);
        return await this.sendDelete(storeName, key);
    }
    async sendDelete(storeName, key) {
        const request = new store_1.store._StoreDeleteRequest({
            key: key,
        });
        const metadata = this.createMetadata(storeName);
        return await new Promise((resolve, reject) => {
            this.client.Delete(request, metadata, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.StorageDelete.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.StorageDelete.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
}
exports.StorageDataClient = StorageDataClient;
StorageDataClient.DEFAULT_MAX_SESSION_MEMORY_MB = 256;
//# sourceMappingURL=data:application/json;base64,