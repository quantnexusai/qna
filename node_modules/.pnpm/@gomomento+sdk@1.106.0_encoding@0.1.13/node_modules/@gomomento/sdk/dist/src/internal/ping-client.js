"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalNodeGrpcPingClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcPing = generated_types_1.ping.cache_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const grpc_js_1 = require("@grpc/grpc-js");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const utils_1 = require("@gomomento/sdk-core/dist/src/utils");
class InternalNodeGrpcPingClient {
    /**
     * @param {PingClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        const headers = [
            new headers_interceptor_1.Header('agent', `nodejs:ping:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'PingClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS,
            }),
        ];
        this.logger.debug(`Creating ping client using endpoint: '${props.endpoint}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcPing.PingClient(props.endpoint, props.credentialProvider.isCacheEndpointSecure()
                ? grpc_js_1.ChannelCredentials.createSsl()
                : grpc_js_1.ChannelCredentials.createInsecure()),
            loggerFactory: props.configuration.getLoggerFactory(),
            maxIdleMillis: props.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
    }
    async ping() {
        this.logger.info('pinging...');
        const request = new grpcPing._PingRequest();
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                .Ping(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err) {
                    this.logger.error('failed to ping');
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
}
exports.InternalNodeGrpcPingClient = InternalNodeGrpcPingClient;
InternalNodeGrpcPingClient.REQUEST_TIMEOUT_MS = (0, utils_1.secondsToMilliseconds)(60);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGluZy1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaW50ZXJuYWwvcGluZy1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0VBQWdEO0FBQ2hELElBQU8sUUFBUSxHQUFHLHNCQUFJLENBQUMsWUFBWSxDQUFDO0FBQ3BDLG9FQUFxRTtBQUNyRSwyQ0FBOEQ7QUFDOUQscURBQTJDO0FBQzNDLDhFQUFzRTtBQUl0RSxnRUFBMEQ7QUFDMUQsOERBQXlFO0FBUXpFLE1BQWEsMEJBQTBCO0lBT3JDOztPQUVHO0lBQ0gsWUFBWSxLQUFzQjtRQUNoQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsTUFBTSxPQUFPLEdBQUc7WUFDZCxJQUFJLDRCQUFNLENBQUMsT0FBTyxFQUFFLGVBQWUsc0JBQU8sRUFBRSxDQUFDO1lBQzdDLElBQUksNEJBQU0sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDakUsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLEdBQUc7WUFDbEIsdUNBQWlCLENBQUMsd0JBQXdCLENBQUMsT0FBTyxDQUFDO1lBQ25ELG9DQUFnQixDQUFDLHNCQUFzQixDQUFDO2dCQUN0QyxVQUFVLEVBQUUsWUFBWTtnQkFDeEIsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQ3JELHVCQUF1QixFQUFFLDBCQUEwQixDQUFDLGtCQUFrQjthQUN2RSxDQUFDO1NBQ0gsQ0FBQztRQUNGLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHlDQUF5QyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQzFELENBQUM7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksZ0RBQXFCLENBQUM7WUFDN0MsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUNwQixJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQ3JCLEtBQUssQ0FBQyxRQUFRLEVBQ2QsS0FBSyxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixFQUFFO2dCQUM5QyxDQUFDLENBQUMsNEJBQWtCLENBQUMsU0FBUyxFQUFFO2dCQUNoQyxDQUFDLENBQUMsNEJBQWtCLENBQUMsY0FBYyxFQUFFLENBQ3hDO1lBQ0gsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUU7WUFDckQsYUFBYSxFQUFFLEtBQUssQ0FBQyxhQUFhO2lCQUMvQixvQkFBb0IsRUFBRTtpQkFDdEIsZ0JBQWdCLEVBQUU7U0FDdEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxhQUFhO2lCQUNmLFNBQVMsRUFBRTtnQkFDWiw2REFBNkQ7aUJBQzVELElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO2dCQUM5RCxJQUFJLEdBQUcsRUFBRTtvQkFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO29CQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsT0FBTyxFQUFFLENBQUM7aUJBQ1g7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUExREgsZ0VBMkRDO0FBeER5Qiw2Q0FBa0IsR0FDeEMsSUFBQSw2QkFBcUIsRUFBQyxFQUFFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cGluZ30gZnJvbSAnQGdvbW9tZW50by9nZW5lcmF0ZWQtdHlwZXMnO1xuaW1wb3J0IGdycGNQaW5nID0gcGluZy5jYWNoZV9jbGllbnQ7XG5pbXBvcnQge0hlYWRlciwgSGVhZGVySW50ZXJjZXB0b3J9IGZyb20gJy4vZ3JwYy9oZWFkZXJzLWludGVyY2VwdG9yJztcbmltcG9ydCB7Q2hhbm5lbENyZWRlbnRpYWxzLCBJbnRlcmNlcHRvcn0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4uLy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQge0lkbGVHcnBjQ2xpZW50V3JhcHBlcn0gZnJvbSAnLi9ncnBjL2lkbGUtZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0dycGNDbGllbnRXcmFwcGVyfSBmcm9tICcuL2dycGMvZ3JwYy1jbGllbnQtd3JhcHBlcic7XG5pbXBvcnQge0NvbmZpZ3VyYXRpb259IGZyb20gJy4uL2NvbmZpZy9jb25maWd1cmF0aW9uJztcbmltcG9ydCB7Q3JlZGVudGlhbFByb3ZpZGVyLCBNb21lbnRvTG9nZ2VyfSBmcm9tICcuLi8nO1xuaW1wb3J0IHtSZXRyeUludGVyY2VwdG9yfSBmcm9tICcuL2dycGMvcmV0cnktaW50ZXJjZXB0b3InO1xuaW1wb3J0IHtzZWNvbmRzVG9NaWxsaXNlY29uZHN9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUvZGlzdC9zcmMvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBpbmdDbGllbnRQcm9wcyB7XG4gIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb247XG4gIGVuZHBvaW50OiBzdHJpbmc7XG4gIGNyZWRlbnRpYWxQcm92aWRlcjogQ3JlZGVudGlhbFByb3ZpZGVyO1xufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxOb2RlR3JwY1BpbmdDbGllbnQge1xuICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudFdyYXBwZXI6IEdycGNDbGllbnRXcmFwcGVyPGdycGNQaW5nLlBpbmdDbGllbnQ+O1xuICBwcml2YXRlIHJlYWRvbmx5IGludGVyY2VwdG9yczogSW50ZXJjZXB0b3JbXTtcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgUkVRVUVTVF9USU1FT1VUX01TOiBudW1iZXIgPVxuICAgIHNlY29uZHNUb01pbGxpc2Vjb25kcyg2MCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1BpbmdDbGllbnRQcm9wc30gcHJvcHNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQaW5nQ2xpZW50UHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlciA9IHByb3BzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICBjb25zdCBoZWFkZXJzID0gW1xuICAgICAgbmV3IEhlYWRlcignYWdlbnQnLCBgbm9kZWpzOnBpbmc6JHt2ZXJzaW9ufWApLFxuICAgICAgbmV3IEhlYWRlcigncnVudGltZS12ZXJzaW9uJywgYG5vZGVqczoke3Byb2Nlc3MudmVyc2lvbnMubm9kZX1gKSxcbiAgICBdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gW1xuICAgICAgSGVhZGVySW50ZXJjZXB0b3IuY3JlYXRlSGVhZGVyc0ludGVyY2VwdG9yKGhlYWRlcnMpLFxuICAgICAgUmV0cnlJbnRlcmNlcHRvci5jcmVhdGVSZXRyeUludGVyY2VwdG9yKHtcbiAgICAgICAgY2xpZW50TmFtZTogJ1BpbmdDbGllbnQnLFxuICAgICAgICBsb2dnZXJGYWN0b3J5OiBwcm9wcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgICAgb3ZlcmFsbFJlcXVlc3RUaW1lb3V0TXM6IEludGVybmFsTm9kZUdycGNQaW5nQ2xpZW50LlJFUVVFU1RfVElNRU9VVF9NUyxcbiAgICAgIH0pLFxuICAgIF07XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICBgQ3JlYXRpbmcgcGluZyBjbGllbnQgdXNpbmcgZW5kcG9pbnQ6ICcke3Byb3BzLmVuZHBvaW50fWBcbiAgICApO1xuICAgIHRoaXMuY2xpZW50V3JhcHBlciA9IG5ldyBJZGxlR3JwY0NsaWVudFdyYXBwZXIoe1xuICAgICAgY2xpZW50RmFjdG9yeUZuOiAoKSA9PlxuICAgICAgICBuZXcgZ3JwY1BpbmcuUGluZ0NsaWVudChcbiAgICAgICAgICBwcm9wcy5lbmRwb2ludCxcbiAgICAgICAgICBwcm9wcy5jcmVkZW50aWFsUHJvdmlkZXIuaXNDYWNoZUVuZHBvaW50U2VjdXJlKClcbiAgICAgICAgICAgID8gQ2hhbm5lbENyZWRlbnRpYWxzLmNyZWF0ZVNzbCgpXG4gICAgICAgICAgICA6IENoYW5uZWxDcmVkZW50aWFscy5jcmVhdGVJbnNlY3VyZSgpXG4gICAgICAgICksXG4gICAgICBsb2dnZXJGYWN0b3J5OiBwcm9wcy5jb25maWd1cmF0aW9uLmdldExvZ2dlckZhY3RvcnkoKSxcbiAgICAgIG1heElkbGVNaWxsaXM6IHByb3BzLmNvbmZpZ3VyYXRpb25cbiAgICAgICAgLmdldFRyYW5zcG9ydFN0cmF0ZWd5KClcbiAgICAgICAgLmdldE1heElkbGVNaWxsaXMoKSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwaW5nKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMubG9nZ2VyLmluZm8oJ3BpbmdpbmcuLi4nKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IGdycGNQaW5nLl9QaW5nUmVxdWVzdCgpO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudFdyYXBwZXJcbiAgICAgICAgLmdldENsaWVudCgpXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICAgICAgLlBpbmcocmVxdWVzdCwge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LCAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ2ZhaWxlZCB0byBwaW5nJyk7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==