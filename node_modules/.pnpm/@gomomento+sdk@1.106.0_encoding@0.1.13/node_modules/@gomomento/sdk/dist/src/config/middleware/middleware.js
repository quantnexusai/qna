"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiddlewareMessage = exports.MiddlewareStatus = exports.MiddlewareMetadata = void 0;
const cache_request_logging_1 = require("./cache-request-logging");
class MiddlewareMetadata {
    constructor(metadata) {
        this._grpcMetadata = metadata;
    }
    toJsonObject() {
        return this._grpcMetadata.toJSON();
    }
    toJsonString() {
        return JSON.stringify(this._grpcMetadata.toJSON());
    }
}
exports.MiddlewareMetadata = MiddlewareMetadata;
class MiddlewareStatus {
    constructor(status) {
        this._grpcStatus = status;
    }
    code() {
        return this._grpcStatus.code;
    }
}
exports.MiddlewareStatus = MiddlewareStatus;
class MiddlewareMessage {
    constructor(message) {
        this._grpcMessage = message;
    }
    messageLength() {
        if (this._grpcMessage !== null && this._grpcMessage !== undefined) {
            return this._grpcMessage.serializeBinary().length;
        }
        return 0;
    }
    constructorName() {
        return this._grpcMessage.constructor.name;
    }
    // Note: APIs that use streaming interceptors (e.g. GetBatch and SetBatch)
    // will not see these debug messages
    toLogFormat() {
        const requestToLogConverter = cache_request_logging_1.CacheRequestToLogInterfaceConverter.get(this.constructorName());
        if (requestToLogConverter === undefined) {
            console.warn('Unable to find requestToLogConverter for', this.constructorName());
            return { requestType: this.constructorName() };
        }
        return requestToLogConverter(this._grpcMessage);
    }
}
exports.MiddlewareMessage = MiddlewareMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25maWcvbWlkZGxld2FyZS9taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLG1FQUdpQztBQUVqQyxNQUFhLGtCQUFrQjtJQUU3QixZQUFZLFFBQWtCO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0Y7QUFiRCxnREFhQztBQUNELE1BQWEsZ0JBQWdCO0lBRTNCLFlBQVksTUFBb0I7UUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQVRELDRDQVNDO0FBRUQsTUFBYSxpQkFBaUI7SUFFNUIsWUFBWSxPQUFnQjtRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQsYUFBYTtRQUNYLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxTQUFTLEVBQUU7WUFDakUsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sQ0FBQztTQUNuRDtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztJQUM1QyxDQUFDO0lBRUQsMEVBQTBFO0lBQzFFLG9DQUFvQztJQUNwQyxXQUFXO1FBQ1QsTUFBTSxxQkFBcUIsR0FBRywyREFBbUMsQ0FBQyxHQUFHLENBQ25FLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FDdkIsQ0FBQztRQUNGLElBQUkscUJBQXFCLEtBQUssU0FBUyxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQ1YsMENBQTBDLEVBQzFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FDdkIsQ0FBQztZQUNGLE9BQU8sRUFBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLENBQUM7U0FDOUM7UUFDRCxPQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUFoQ0QsOENBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNZXRhZGF0YSwgU3RhdHVzT2JqZWN0fSBmcm9tICdAZ3JwYy9ncnBjLWpzJztcbmltcG9ydCB7TWVzc2FnZX0gZnJvbSAnZ29vZ2xlLXByb3RvYnVmJztcbmltcG9ydCB7XG4gIFJlcXVlc3RMb2csXG4gIENhY2hlUmVxdWVzdFRvTG9nSW50ZXJmYWNlQ29udmVydGVyLFxufSBmcm9tICcuL2NhY2hlLXJlcXVlc3QtbG9nZ2luZyc7XG5cbmV4cG9ydCBjbGFzcyBNaWRkbGV3YXJlTWV0YWRhdGEge1xuICByZWFkb25seSBfZ3JwY01ldGFkYXRhOiBNZXRhZGF0YTtcbiAgY29uc3RydWN0b3IobWV0YWRhdGE6IE1ldGFkYXRhKSB7XG4gICAgdGhpcy5fZ3JwY01ldGFkYXRhID0gbWV0YWRhdGE7XG4gIH1cblxuICB0b0pzb25PYmplY3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dycGNNZXRhZGF0YS50b0pTT04oKTtcbiAgfVxuXG4gIHRvSnNvblN0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLl9ncnBjTWV0YWRhdGEudG9KU09OKCkpO1xuICB9XG59XG5leHBvcnQgY2xhc3MgTWlkZGxld2FyZVN0YXR1cyB7XG4gIHJlYWRvbmx5IF9ncnBjU3RhdHVzOiBTdGF0dXNPYmplY3Q7XG4gIGNvbnN0cnVjdG9yKHN0YXR1czogU3RhdHVzT2JqZWN0KSB7XG4gICAgdGhpcy5fZ3JwY1N0YXR1cyA9IHN0YXR1cztcbiAgfVxuXG4gIGNvZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dycGNTdGF0dXMuY29kZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWlkZGxld2FyZU1lc3NhZ2Uge1xuICByZWFkb25seSBfZ3JwY01lc3NhZ2U6IE1lc3NhZ2U7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IE1lc3NhZ2UpIHtcbiAgICB0aGlzLl9ncnBjTWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cblxuICBtZXNzYWdlTGVuZ3RoKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuX2dycGNNZXNzYWdlICE9PSBudWxsICYmIHRoaXMuX2dycGNNZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9ncnBjTWVzc2FnZS5zZXJpYWxpemVCaW5hcnkoKS5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG5cbiAgY29uc3RydWN0b3JOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2dycGNNZXNzYWdlLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cblxuICAvLyBOb3RlOiBBUElzIHRoYXQgdXNlIHN0cmVhbWluZyBpbnRlcmNlcHRvcnMgKGUuZy4gR2V0QmF0Y2ggYW5kIFNldEJhdGNoKVxuICAvLyB3aWxsIG5vdCBzZWUgdGhlc2UgZGVidWcgbWVzc2FnZXNcbiAgdG9Mb2dGb3JtYXQoKTogUmVxdWVzdExvZyB7XG4gICAgY29uc3QgcmVxdWVzdFRvTG9nQ29udmVydGVyID0gQ2FjaGVSZXF1ZXN0VG9Mb2dJbnRlcmZhY2VDb252ZXJ0ZXIuZ2V0KFxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvck5hbWUoKVxuICAgICk7XG4gICAgaWYgKHJlcXVlc3RUb0xvZ0NvbnZlcnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdVbmFibGUgdG8gZmluZCByZXF1ZXN0VG9Mb2dDb252ZXJ0ZXIgZm9yJyxcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvck5hbWUoKVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7cmVxdWVzdFR5cGU6IHRoaXMuY29uc3RydWN0b3JOYW1lKCl9O1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdFRvTG9nQ29udmVydGVyKHRoaXMuX2dycGNNZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlciB7XG4gIG9uUmVxdWVzdE1ldGFkYXRhKG1ldGFkYXRhOiBNaWRkbGV3YXJlTWV0YWRhdGEpOiBQcm9taXNlPE1pZGRsZXdhcmVNZXRhZGF0YT47XG4gIG9uUmVxdWVzdEJvZHkocmVxdWVzdDogTWlkZGxld2FyZU1lc3NhZ2UpOiBQcm9taXNlPE1pZGRsZXdhcmVNZXNzYWdlPjtcblxuICBvblJlc3BvbnNlTWV0YWRhdGEobWV0YWRhdGE6IE1pZGRsZXdhcmVNZXRhZGF0YSk6IFByb21pc2U8TWlkZGxld2FyZU1ldGFkYXRhPjtcbiAgb25SZXNwb25zZUJvZHkoXG4gICAgcmVzcG9uc2U6IE1pZGRsZXdhcmVNZXNzYWdlIHwgbnVsbFxuICApOiBQcm9taXNlPE1pZGRsZXdhcmVNZXNzYWdlIHwgbnVsbD47XG4gIG9uUmVzcG9uc2VTdGF0dXMoc3RhdHVzOiBNaWRkbGV3YXJlU3RhdHVzKTogUHJvbWlzZTxNaWRkbGV3YXJlU3RhdHVzPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0IHtcbiAgW2tleTogc3ltYm9sXTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBNaWRkbGV3YXJlIGludGVyZmFjZSBhbGxvd3MgdGhlIENvbmZpZ3VyYXRpb24gdG8gcHJvdmlkZSBhIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IHdyYXBzIGFsbCByZXF1ZXN0cy5cbiAqIFRoaXMgYWxsb3dzIGZ1dHVyZSBzdXBwb3J0IGZvciB0aGluZ3MgbGlrZSBjbGllbnQtc2lkZSBtZXRyaWNzIG9yIG90aGVyIGRpYWdub3N0aWNzIGhlbHBlcnMuXG4gKlxuICogQW4gb3B0aW9uYWwgY29udGV4dCBjYW4gYmUgcHJvdmlkZWQgdGhhdCBpcyBlc3NlbnRpYWxseSBhIDxrZXksIHZhbHVlPiBtYXAge0BsaW5rIE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlckNvbnRleHR9LlxuICogVGhlIGNvbnRleHQgb2JqZWN0IGlzIGF2YWlsYWJsZSB0byBlYWNoIGluZGl2aWR1YWwgaW52b2NhdGlvbiBvZiB0aGUgcmVxdWVzdCBoYW5kbGVyIGZvciB0aGUgbWlkZGxld2FyZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNaWRkbGV3YXJlIHtcbiAgb25OZXdSZXF1ZXN0KFxuICAgIGNvbnRleHQ/OiBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXJDb250ZXh0XG4gICk6IE1pZGRsZXdhcmVSZXF1ZXN0SGFuZGxlcjtcbiAgaW5pdD8oKTogdm9pZDtcbiAgY2xvc2U/KCk6IHZvaWQ7XG4gIHNob3VsZExvYWRMYXRlPzogYm9vbGVhbjtcbn1cbiJdfQ==