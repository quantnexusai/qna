"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticTransportStrategy = exports.StaticGrpcConfiguration = void 0;
class StaticGrpcConfiguration {
    constructor(props) {
        this.deadlineMillis = props.deadlineMillis;
        this.maxSessionMemoryMb = props.maxSessionMemoryMb;
        if (props.numClients !== undefined && props.numClients !== null) {
            this.numClients = props.numClients;
        }
        else {
            // This is the previously hardcoded value and a safe default for most environments.
            this.numClients = 6;
        }
        this.maxConcurrentRequests = props.maxConcurrentRequests;
        this.keepAliveTimeMs = props.keepAliveTimeMs;
        this.keepAliveTimeoutMs = props.keepAliveTimeoutMs;
        this.keepAlivePermitWithoutCalls = props.keepAlivePermitWithoutCalls;
        this.maxSendMessageLength = props.maxSendMessageLength;
        this.maxReceiveMessageLength = props.maxReceiveMessageLength;
    }
    getDeadlineMillis() {
        return this.deadlineMillis;
    }
    getMaxSessionMemoryMb() {
        return this.maxSessionMemoryMb;
    }
    getKeepAliveTimeoutMS() {
        return this.keepAliveTimeoutMs;
    }
    getKeepAliveTimeMS() {
        return this.keepAliveTimeMs;
    }
    getKeepAlivePermitWithoutCalls() {
        return this.keepAlivePermitWithoutCalls;
    }
    withDeadlineMillis(deadlineMillis) {
        return new StaticGrpcConfiguration({
            ...this,
            deadlineMillis,
        });
    }
    withMaxSessionMemoryMb(maxSessionMemoryMb) {
        return new StaticGrpcConfiguration({
            ...this,
            maxSessionMemoryMb,
        });
    }
    getMaxSendMessageLength() {
        return this.maxSendMessageLength;
    }
    withMaxSendMessageLength(maxSendMessageLength) {
        return new StaticGrpcConfiguration({
            ...this,
            maxSendMessageLength,
        });
    }
    getMaxReceiveMessageLength() {
        return this.maxReceiveMessageLength;
    }
    withMaxReceiveMessageLength(maxReceiveMessageLength) {
        return new StaticGrpcConfiguration({
            ...this,
            maxReceiveMessageLength,
        });
    }
    getNumClients() {
        return this.numClients;
    }
    withNumClients(numClients) {
        return new StaticGrpcConfiguration({
            ...this,
            numClients,
        });
    }
    getMaxConcurrentRequests() {
        return this.maxConcurrentRequests;
    }
    withMaxConcurrentRequests(maxConcurrentRequests) {
        return new StaticGrpcConfiguration({
            ...this,
            maxConcurrentRequests,
        });
    }
}
exports.StaticGrpcConfiguration = StaticGrpcConfiguration;
class StaticTransportStrategy {
    constructor(props) {
        this.grpcConfiguration = props.grpcConfiguration;
        this.maxIdleMillis = props.maxIdleMillis;
        this.maxClientAgeMillis = props.maxClientAgeMillis;
    }
    getGrpcConfig() {
        return this.grpcConfiguration;
    }
    getMaxClientAgeMillis() {
        return this.maxClientAgeMillis;
    }
    withGrpcConfig(grpcConfiguration) {
        return new StaticTransportStrategy({
            ...this,
            grpcConfiguration,
        });
    }
    getMaxIdleMillis() {
        return this.maxIdleMillis;
    }
    withMaxIdleMillis(maxIdleMillis) {
        return new StaticTransportStrategy({
            ...this,
            maxIdleMillis,
        });
    }
    withMaxClientAgeMillis(maxClientAgeMillis) {
        return new StaticTransportStrategy({
            ...this,
            maxClientAgeMillis,
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new StaticTransportStrategy({
            ...this,
            grpcConfiguration: this.grpcConfiguration.withDeadlineMillis(clientTimeout),
        });
    }
    getMaxConcurrentRequests() {
        return this.grpcConfiguration.getMaxConcurrentRequests();
    }
    withMaxConcurrentRequests(maxConcurrentRequests) {
        return new StaticTransportStrategy({
            ...this,
            grpcConfiguration: this.grpcConfiguration.withMaxConcurrentRequests(maxConcurrentRequests),
        });
    }
}
exports.StaticTransportStrategy = StaticTransportStrategy;
//# sourceMappingURL=data:application/json;base64,