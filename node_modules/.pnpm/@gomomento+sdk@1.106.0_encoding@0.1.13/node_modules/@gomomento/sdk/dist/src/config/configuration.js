"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheConfiguration = void 0;
class CacheConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.retryStrategy = props.retryStrategy;
        this.transportStrategy = props.transportStrategy;
        this.middlewares = props.middlewares;
        this.throwOnErrors = props.throwOnErrors;
        this.readConcern = props.readConcern;
        this.compression = props.compression;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getRetryStrategy() {
        return this.retryStrategy;
    }
    withRetryStrategy(retryStrategy) {
        return new CacheConfiguration({
            ...this,
            retryStrategy,
        });
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withTransportStrategy(transportStrategy) {
        return new CacheConfiguration({
            ...this,
            transportStrategy,
        });
    }
    withNumConnections(numConnections) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withNumClients(numConnections)));
    }
    withMaxMessageLength(maxMessageLength) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withMaxReceiveMessageLength(maxMessageLength)
            .withMaxSendMessageLength(maxMessageLength)));
    }
    getMiddlewares() {
        return this.middlewares;
    }
    withMiddlewares(middlewares) {
        return new CacheConfiguration({
            ...this,
            middlewares,
        });
    }
    addMiddleware(middleware) {
        return new CacheConfiguration({
            ...this,
            middlewares: [middleware, ...this.middlewares],
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new CacheConfiguration({
            ...this,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeout),
        });
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new CacheConfiguration({
            ...this,
            throwOnErrors,
        });
    }
    getReadConcern() {
        return this.readConcern;
    }
    withReadConcern(readConcern) {
        return new CacheConfiguration({
            ...this,
            readConcern,
        });
    }
    getCompressionStrategy() {
        return this.compression;
    }
    withCompressionStrategy(compressionStrategy) {
        return new CacheConfiguration({
            ...this,
            compression: compressionStrategy,
        });
    }
    hasCompressionStrategy() {
        return this.compression !== undefined;
    }
}
exports.CacheConfiguration = CacheConfiguration;
//# sourceMappingURL=data:application/json;base64,