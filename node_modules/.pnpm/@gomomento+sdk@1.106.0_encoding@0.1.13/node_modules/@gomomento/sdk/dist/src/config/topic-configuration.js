"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicClientConfiguration = void 0;
class TopicClientConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.transportStrategy = props.transportStrategy;
        this.throwOnErrors = props.throwOnErrors;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withTransportStrategy(transportStrategy) {
        return new TopicClientConfiguration({
            ...this,
            transportStrategy,
        });
    }
    withNumConnections(numConnections) {
        return this.withTransportStrategy(this.getTransportStrategy().withGrpcConfig(this.getTransportStrategy()
            .getGrpcConfig()
            .withNumClients(numConnections)));
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new TopicClientConfiguration({
            ...this,
            throwOnErrors,
        });
    }
}
exports.TopicClientConfiguration = TopicClientConfiguration;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMtY29uZmlndXJhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb25maWcvdG9waWMtY29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFpRUEsTUFBYSx3QkFBd0I7SUFLbkMsWUFBWSxLQUE4QjtRQUN4QyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQztRQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7SUFDM0MsQ0FBQztJQUVELGdCQUFnQjtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7SUFFRCxxQkFBcUIsQ0FDbkIsaUJBQXlDO1FBRXpDLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQztZQUNsQyxHQUFHLElBQUk7WUFDUCxpQkFBaUI7U0FDbEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtCQUFrQixDQUFDLGNBQXNCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUMvQixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxjQUFjLENBQ3hDLElBQUksQ0FBQyxvQkFBb0IsRUFBRTthQUN4QixhQUFhLEVBQUU7YUFDZixjQUFjLENBQUMsY0FBYyxDQUFDLENBQ2xDLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVELGlCQUFpQixDQUFDLGFBQXNCO1FBQ3RDLE9BQU8sSUFBSSx3QkFBd0IsQ0FBQztZQUNsQyxHQUFHLElBQUk7WUFDUCxhQUFhO1NBQ2QsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBaERELDREQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9tZW50b0xvZ2dlckZhY3Rvcnl9IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUnO1xuaW1wb3J0IHtUb3BpY1RyYW5zcG9ydFN0cmF0ZWd5fSBmcm9tICcuL3RyYW5zcG9ydC90b3BpY3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljQ29uZmlndXJhdGlvblByb3BzIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgbG9nZ2luZyB2ZXJib3NpdHkgYW5kIGZvcm1hdFxuICAgKi9cbiAgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3Rvcnk7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgbG93LWxldmVsIG9wdGlvbnMgZm9yIG5ldHdvcmsgaW50ZXJhY3Rpb25zIHdpdGggdGhlIE1vbWVudG8gc2VydmljZVxuICAgKi9cbiAgdHJhbnNwb3J0U3RyYXRlZ3k6IFRvcGljVHJhbnNwb3J0U3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgd2hldGhlciB0aGUgY2xpZW50IHNob3VsZCByZXR1cm4gYSBNb21lbnRvIEVycm9yIG9iamVjdCBvciB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhbiBlcnJvciBvY2N1cnMuXG4gICAqL1xuICB0aHJvd09uRXJyb3JzOiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgTW9tZW50byBUb3BpY0NsaWVudFxuICpcbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVG9waWNDb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNDb25maWd1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEByZXR1cm5zIHtNb21lbnRvTG9nZ2VyRmFjdG9yeX0gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBsb2dnaW5nIHZlcmJvc2l0eSBhbmQgZm9ybWF0XG4gICAqL1xuICBnZXRMb2dnZXJGYWN0b3J5KCk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7VHJhbnNwb3J0U3RyYXRlZ3l9IHRoZSBjdXJyZW50IGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3Igd2lyZSBpbnRlcmFjdGlvbnMgd2l0aCB0aGUgTW9tZW50byBzZXJ2aWNlXG4gICAqL1xuICBnZXRUcmFuc3BvcnRTdHJhdGVneSgpOiBUb3BpY1RyYW5zcG9ydFN0cmF0ZWd5O1xuXG4gIC8qKlxuICAgKiBTaG9ydGhhbmQgY29weSBjb25zdHJ1Y3RvciBmb3Igb3ZlcnJpZGluZyBUcmFuc3BvcnRTdHJhdGVneS5HcnBjU3RyYXRlZ3kuTnVtQ2xpZW50cy4gVGhpcyB3aWxsXG4gICAqIGFsbG93IHlvdSB0byBjb250cm9sIHRoZSBudW1iZXIgb2YgVENQIGNvbm5lY3Rpb25zIHRoYXQgdGhlIGNsaWVudCB3aWxsIG9wZW4gdG8gdGhlIHNlcnZlci4gVXN1YWxseVxuICAgKiB5b3Ugc2hvdWxkIHN0aWNrIHdpdGggdGhlIGRlZmF1bHQgdmFsdWUgZnJvbSB5b3VyIHByZS1idWlsdCBjb25maWd1cmF0aW9uLCBidXQgaXQgY2FuIGJlIHZhbHVhYmxlXG4gICAqIHRvIGluY3JlYXNlIHRoaXMgdmFsdWUgaW4gb3JkZXIgdG8gZW5zdXJlIG1vcmUgZXZlbmx5IGRpc3RyaWJ1dGVkIGxvYWQgb24gTW9tZW50byBzZXJ2ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtQ29ubmVjdGlvbnNcbiAgICogQHJldHVybnMge0NvbmZpZ3VyYXRpb259IGEgbmV3IENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggdGhlIHVwZGF0ZWQgVHJhbnNwb3J0U3RyYXRlZ3lcbiAgICovXG4gIHdpdGhOdW1Db25uZWN0aW9ucyhudW1Db25uZWN0aW9uczogbnVtYmVyKTogVG9waWNDb25maWd1cmF0aW9uO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gQ29uZmlndXJlcyB3aGV0aGVyIHRoZSBjbGllbnQgc2hvdWxkIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9yIHRocm93IGFuIGV4Y2VwdGlvbiB3aGVuIGFuXG4gICAqIGVycm9yIG9jY3Vycy4gQnkgZGVmYXVsdCwgdGhpcyBpcyBzZXQgdG8gZmFsc2UsIGFuZCB0aGUgY2xpZW50IHdpbGwgcmV0dXJuIGEgTW9tZW50byBFcnJvciBvYmplY3Qgb24gZXJyb3JzLiBTZXQgaXRcbiAgICogdG8gdHJ1ZSBpZiB5b3UgcHJlZmVyIGZvciBleGNlcHRpb25zIHRvIGJlIHRocm93bi5cbiAgICovXG4gIGdldFRocm93T25FcnJvcnMoKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ29weSBjb25zdHJ1Y3RvciBmb3IgY29uZmlndXJpbmcgd2hldGhlciB0aGUgY2xpZW50IHNob3VsZCByZXR1cm4gYSBNb21lbnRvIEVycm9yIG9iamVjdCBvciB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhblxuICAgKiBlcnJvciBvY2N1cnMuIEJ5IGRlZmF1bHQsIHRoaXMgaXMgc2V0IHRvIGZhbHNlLCBhbmQgdGhlIGNsaWVudCB3aWxsIHJldHVybiBhIE1vbWVudG8gRXJyb3Igb2JqZWN0IG9uIGVycm9ycy4gU2V0IGl0XG4gICAqIHRvIHRydWUgaWYgeW91IHByZWZlciBmb3IgZXhjZXB0aW9ucyB0byBiZSB0aHJvd24uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdGhyb3dPbkVycm9yc1xuICAgKiBAcmV0dXJucyB7Q29uZmlndXJhdGlvbn0gYSBuZXcgQ29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCB0aGUgc3BlY2lmaWVkIHRocm93T25FcnJvcnMgc2V0dGluZ1xuICAgKi9cbiAgd2l0aFRocm93T25FcnJvcnModGhyb3dPbkVycm9yczogYm9vbGVhbik6IFRvcGljQ29uZmlndXJhdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIFRvcGljQ2xpZW50Q29uZmlndXJhdGlvbiBpbXBsZW1lbnRzIFRvcGljQ29uZmlndXJhdGlvbiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3Rvcnk7XG4gIHByaXZhdGUgcmVhZG9ubHkgdHJhbnNwb3J0U3RyYXRlZ3k6IFRvcGljVHJhbnNwb3J0U3RyYXRlZ3k7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGhyb3dPbkVycm9yczogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogVG9waWNDb25maWd1cmF0aW9uUHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlckZhY3RvcnkgPSBwcm9wcy5sb2dnZXJGYWN0b3J5O1xuICAgIHRoaXMudHJhbnNwb3J0U3RyYXRlZ3kgPSBwcm9wcy50cmFuc3BvcnRTdHJhdGVneTtcbiAgICB0aGlzLnRocm93T25FcnJvcnMgPSBwcm9wcy50aHJvd09uRXJyb3JzO1xuICB9XG5cbiAgZ2V0TG9nZ2VyRmFjdG9yeSgpOiBNb21lbnRvTG9nZ2VyRmFjdG9yeSB7XG4gICAgcmV0dXJuIHRoaXMubG9nZ2VyRmFjdG9yeTtcbiAgfVxuXG4gIGdldFRyYW5zcG9ydFN0cmF0ZWd5KCk6IFRvcGljVHJhbnNwb3J0U3RyYXRlZ3kge1xuICAgIHJldHVybiB0aGlzLnRyYW5zcG9ydFN0cmF0ZWd5O1xuICB9XG5cbiAgd2l0aFRyYW5zcG9ydFN0cmF0ZWd5KFxuICAgIHRyYW5zcG9ydFN0cmF0ZWd5OiBUb3BpY1RyYW5zcG9ydFN0cmF0ZWd5XG4gICk6IFRvcGljQ29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBUb3BpY0NsaWVudENvbmZpZ3VyYXRpb24oe1xuICAgICAgLi4udGhpcyxcbiAgICAgIHRyYW5zcG9ydFN0cmF0ZWd5LFxuICAgIH0pO1xuICB9XG5cbiAgd2l0aE51bUNvbm5lY3Rpb25zKG51bUNvbm5lY3Rpb25zOiBudW1iZXIpOiBUb3BpY0NvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiB0aGlzLndpdGhUcmFuc3BvcnRTdHJhdGVneShcbiAgICAgIHRoaXMuZ2V0VHJhbnNwb3J0U3RyYXRlZ3koKS53aXRoR3JwY0NvbmZpZyhcbiAgICAgICAgdGhpcy5nZXRUcmFuc3BvcnRTdHJhdGVneSgpXG4gICAgICAgICAgLmdldEdycGNDb25maWcoKVxuICAgICAgICAgIC53aXRoTnVtQ2xpZW50cyhudW1Db25uZWN0aW9ucylcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgZ2V0VGhyb3dPbkVycm9ycygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50aHJvd09uRXJyb3JzO1xuICB9XG5cbiAgd2l0aFRocm93T25FcnJvcnModGhyb3dPbkVycm9yczogYm9vbGVhbik6IFRvcGljQ29uZmlndXJhdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBUb3BpY0NsaWVudENvbmZpZ3VyYXRpb24oe1xuICAgICAgLi4udGhpcyxcbiAgICAgIHRocm93T25FcnJvcnMsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==