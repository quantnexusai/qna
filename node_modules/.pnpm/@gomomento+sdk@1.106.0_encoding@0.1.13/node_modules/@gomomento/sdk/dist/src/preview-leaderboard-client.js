"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreviewLeaderboardClient = void 0;
const sdk_core_1 = require("@gomomento/sdk-core");
const leaderboard_data_client_1 = require("./internal/leaderboard-data-client");
const leaderboard_1 = require("./internal/leaderboard");
const index_1 = require("./index");
/**
 * PREVIEW Momento Leaderboard Client
 * WARNING: the API for this client is not yet stable and may change without notice.
 * Please contact Momento if you would like to try this preview.
 *
 * Leaderboard methods return a response object unique to each request.
 * The response object is resolved to a type-safe object of one of several
 * sub-types. See the documentation for each response type for details.
 */
class PreviewLeaderboardClient {
    constructor(props) {
        var _a, _b;
        const configuration = (_a = props === null || props === void 0 ? void 0 : props.configuration) !== null && _a !== void 0 ? _a : getDefaultLeaderboardConfiguration();
        const allProps = {
            configuration: configuration,
            credentialProvider: (_b = props === null || props === void 0 ? void 0 : props.credentialProvider) !== null && _b !== void 0 ? _b : (0, sdk_core_1.getDefaultCredentialProvider)(),
        };
        this.configuration = configuration;
        this.logger = configuration.getLoggerFactory().getLogger(this);
        this.logger.debug('Creating Momento LeaderboardClient');
        this.dataClient = new leaderboard_data_client_1.LeaderboardDataClient(allProps, '0'); // only creating one leaderboard client
        // Initialize middlewares that have init methods. These currently start
        // background tasks for logging that will execute until they are explicitly
        // stopped. This is usually handled by the client's close method, but if
        // there is ever a chance that this client constructor may fail after these
        // methods are called, it is up to you to catch the exception and call close
        // on each of these manually.
        this.configuration.getMiddlewares().forEach(m => {
            if (m.init) {
                m.init();
            }
        });
    }
    close() {
        this.dataClient.close();
        this.configuration.getMiddlewares().forEach(m => {
            if (m.close) {
                m.close();
            }
        });
    }
    /**
     * Creates an instance of LeaderboardClient with floating point scores up until 53 bits of precision.
     */
    leaderboard(cacheName, leaderboardName) {
        return new leaderboard_1.Leaderboard(this.dataClient, cacheName, leaderboardName);
    }
}
exports.PreviewLeaderboardClient = PreviewLeaderboardClient;
function getDefaultLeaderboardConfiguration() {
    const config = index_1.LeaderboardConfigurations.Laptop.latest();
    const logger = config.getLoggerFactory().getLogger('LeaderboardClient');
    logger.info('No configuration provided to LeaderboardClient. Using default "Laptop" configuration, suitable for development. For production use, consider specifying an explicit configuration.');
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJldmlldy1sZWFkZXJib2FyZC1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBSzZCO0FBQzdCLGdGQUF5RTtBQUV6RSx3REFBbUQ7QUFFbkQsbUNBQTRFO0FBRzVFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSx3QkFBd0I7SUFLbkMsWUFBWSxLQUE4Qjs7UUFDeEMsTUFBTSxhQUFhLEdBQ2pCLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGFBQWEsbUNBQUksa0NBQWtDLEVBQUUsQ0FBQztRQUMvRCxNQUFNLFFBQVEsR0FBOEI7WUFDMUMsYUFBYSxFQUFFLGFBQWE7WUFDNUIsa0JBQWtCLEVBQ2hCLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLGtCQUFrQixtQ0FBSSxJQUFBLHVDQUE0QixHQUFFO1NBQzlELENBQUM7UUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUVuQyxJQUFJLENBQUMsTUFBTSxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwrQ0FBcUIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7UUFFbkcsdUVBQXVFO1FBQ3ZFLDJFQUEyRTtRQUMzRSx3RUFBd0U7UUFDeEUsMkVBQTJFO1FBQzNFLDRFQUE0RTtRQUM1RSw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFO2dCQUNWLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNWO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sS0FBSztRQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFO2dCQUNYLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNYO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxXQUFXLENBQUMsU0FBaUIsRUFBRSxlQUF1QjtRQUMzRCxPQUFPLElBQUkseUJBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0Y7QUEvQ0QsNERBK0NDO0FBRUQsU0FBUyxrQ0FBa0M7SUFDekMsTUFBTSxNQUFNLEdBQUcsaUNBQXlCLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3hFLE1BQU0sQ0FBQyxJQUFJLENBQ1Qsb0xBQW9MLENBQ3JMLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTW9tZW50b0xvZ2dlcixcbiAgSUxlYWRlcmJvYXJkQ2xpZW50LFxuICBJTGVhZGVyYm9hcmQsXG4gIGdldERlZmF1bHRDcmVkZW50aWFsUHJvdmlkZXIsXG59IGZyb20gJ0Bnb21vbWVudG8vc2RrLWNvcmUnO1xuaW1wb3J0IHtMZWFkZXJib2FyZERhdGFDbGllbnR9IGZyb20gJy4vaW50ZXJuYWwvbGVhZGVyYm9hcmQtZGF0YS1jbGllbnQnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENsaWVudFByb3BzfSBmcm9tICcuL2xlYWRlcmJvYXJkLWNsaWVudC1wcm9wcyc7XG5pbXBvcnQge0xlYWRlcmJvYXJkfSBmcm9tICcuL2ludGVybmFsL2xlYWRlcmJvYXJkJztcbmltcG9ydCB7SUxlYWRlcmJvYXJkRGF0YUNsaWVudH0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZS9kaXN0L3NyYy9pbnRlcm5hbC9jbGllbnRzL2xlYWRlcmJvYXJkL0lMZWFkZXJib2FyZERhdGFDbGllbnQnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24sIExlYWRlcmJvYXJkQ29uZmlndXJhdGlvbnN9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0IHtMZWFkZXJib2FyZENsaWVudEFsbFByb3BzfSBmcm9tICcuL2ludGVybmFsL2xlYWRlcmJvYXJkLWNsaWVudC1hbGwtcHJvcHMnO1xuXG4vKipcbiAqIFBSRVZJRVcgTW9tZW50byBMZWFkZXJib2FyZCBDbGllbnRcbiAqIFdBUk5JTkc6IHRoZSBBUEkgZm9yIHRoaXMgY2xpZW50IGlzIG5vdCB5ZXQgc3RhYmxlIGFuZCBtYXkgY2hhbmdlIHdpdGhvdXQgbm90aWNlLlxuICogUGxlYXNlIGNvbnRhY3QgTW9tZW50byBpZiB5b3Ugd291bGQgbGlrZSB0byB0cnkgdGhpcyBwcmV2aWV3LlxuICpcbiAqIExlYWRlcmJvYXJkIG1ldGhvZHMgcmV0dXJuIGEgcmVzcG9uc2Ugb2JqZWN0IHVuaXF1ZSB0byBlYWNoIHJlcXVlc3QuXG4gKiBUaGUgcmVzcG9uc2Ugb2JqZWN0IGlzIHJlc29sdmVkIHRvIGEgdHlwZS1zYWZlIG9iamVjdCBvZiBvbmUgb2Ygc2V2ZXJhbFxuICogc3ViLXR5cGVzLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIGVhY2ggcmVzcG9uc2UgdHlwZSBmb3IgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNsYXNzIFByZXZpZXdMZWFkZXJib2FyZENsaWVudCBpbXBsZW1lbnRzIElMZWFkZXJib2FyZENsaWVudCB7XG4gIHByb3RlY3RlZCByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGF0YUNsaWVudDogSUxlYWRlcmJvYXJkRGF0YUNsaWVudDtcbiAgcHJpdmF0ZSByZWFkb25seSBjb25maWd1cmF0aW9uOiBMZWFkZXJib2FyZENvbmZpZ3VyYXRpb247XG5cbiAgY29uc3RydWN0b3IocHJvcHM/OiBMZWFkZXJib2FyZENsaWVudFByb3BzKSB7XG4gICAgY29uc3QgY29uZmlndXJhdGlvbiA9XG4gICAgICBwcm9wcz8uY29uZmlndXJhdGlvbiA/PyBnZXREZWZhdWx0TGVhZGVyYm9hcmRDb25maWd1cmF0aW9uKCk7XG4gICAgY29uc3QgYWxsUHJvcHM6IExlYWRlcmJvYXJkQ2xpZW50QWxsUHJvcHMgPSB7XG4gICAgICBjb25maWd1cmF0aW9uOiBjb25maWd1cmF0aW9uLFxuICAgICAgY3JlZGVudGlhbFByb3ZpZGVyOlxuICAgICAgICBwcm9wcz8uY3JlZGVudGlhbFByb3ZpZGVyID8/IGdldERlZmF1bHRDcmVkZW50aWFsUHJvdmlkZXIoKSxcbiAgICB9O1xuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247XG5cbiAgICB0aGlzLmxvZ2dlciA9IGNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnQ3JlYXRpbmcgTW9tZW50byBMZWFkZXJib2FyZENsaWVudCcpO1xuICAgIHRoaXMuZGF0YUNsaWVudCA9IG5ldyBMZWFkZXJib2FyZERhdGFDbGllbnQoYWxsUHJvcHMsICcwJyk7IC8vIG9ubHkgY3JlYXRpbmcgb25lIGxlYWRlcmJvYXJkIGNsaWVudFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBtaWRkbGV3YXJlcyB0aGF0IGhhdmUgaW5pdCBtZXRob2RzLiBUaGVzZSBjdXJyZW50bHkgc3RhcnRcbiAgICAvLyBiYWNrZ3JvdW5kIHRhc2tzIGZvciBsb2dnaW5nIHRoYXQgd2lsbCBleGVjdXRlIHVudGlsIHRoZXkgYXJlIGV4cGxpY2l0bHlcbiAgICAvLyBzdG9wcGVkLiBUaGlzIGlzIHVzdWFsbHkgaGFuZGxlZCBieSB0aGUgY2xpZW50J3MgY2xvc2UgbWV0aG9kLCBidXQgaWZcbiAgICAvLyB0aGVyZSBpcyBldmVyIGEgY2hhbmNlIHRoYXQgdGhpcyBjbGllbnQgY29uc3RydWN0b3IgbWF5IGZhaWwgYWZ0ZXIgdGhlc2VcbiAgICAvLyBtZXRob2RzIGFyZSBjYWxsZWQsIGl0IGlzIHVwIHRvIHlvdSB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIGFuZCBjYWxsIGNsb3NlXG4gICAgLy8gb24gZWFjaCBvZiB0aGVzZSBtYW51YWxseS5cbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TWlkZGxld2FyZXMoKS5mb3JFYWNoKG0gPT4ge1xuICAgICAgaWYgKG0uaW5pdCkge1xuICAgICAgICBtLmluaXQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZSgpIHtcbiAgICB0aGlzLmRhdGFDbGllbnQuY2xvc2UoKTtcbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TWlkZGxld2FyZXMoKS5mb3JFYWNoKG0gPT4ge1xuICAgICAgaWYgKG0uY2xvc2UpIHtcbiAgICAgICAgbS5jbG9zZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTGVhZGVyYm9hcmRDbGllbnQgd2l0aCBmbG9hdGluZyBwb2ludCBzY29yZXMgdXAgdW50aWwgNTMgYml0cyBvZiBwcmVjaXNpb24uXG4gICAqL1xuICBwdWJsaWMgbGVhZGVyYm9hcmQoY2FjaGVOYW1lOiBzdHJpbmcsIGxlYWRlcmJvYXJkTmFtZTogc3RyaW5nKTogSUxlYWRlcmJvYXJkIHtcbiAgICByZXR1cm4gbmV3IExlYWRlcmJvYXJkKHRoaXMuZGF0YUNsaWVudCwgY2FjaGVOYW1lLCBsZWFkZXJib2FyZE5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRMZWFkZXJib2FyZENvbmZpZ3VyYXRpb24oKTogTGVhZGVyYm9hcmRDb25maWd1cmF0aW9uIHtcbiAgY29uc3QgY29uZmlnID0gTGVhZGVyYm9hcmRDb25maWd1cmF0aW9ucy5MYXB0b3AubGF0ZXN0KCk7XG4gIGNvbnN0IGxvZ2dlciA9IGNvbmZpZy5nZXRMb2dnZXJGYWN0b3J5KCkuZ2V0TG9nZ2VyKCdMZWFkZXJib2FyZENsaWVudCcpO1xuICBsb2dnZXIuaW5mbyhcbiAgICAnTm8gY29uZmlndXJhdGlvbiBwcm92aWRlZCB0byBMZWFkZXJib2FyZENsaWVudC4gVXNpbmcgZGVmYXVsdCBcIkxhcHRvcFwiIGNvbmZpZ3VyYXRpb24sIHN1aXRhYmxlIGZvciBkZXZlbG9wbWVudC4gRm9yIHByb2R1Y3Rpb24gdXNlLCBjb25zaWRlciBzcGVjaWZ5aW5nIGFuIGV4cGxpY2l0IGNvbmZpZ3VyYXRpb24uJ1xuICApO1xuICByZXR1cm4gY29uZmlnO1xufVxuIl19