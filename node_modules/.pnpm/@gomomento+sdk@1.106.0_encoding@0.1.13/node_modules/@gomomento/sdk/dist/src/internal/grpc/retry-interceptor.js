"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RetryInterceptor = void 0;
// This is temporary work around defining our own interceptor to power re-try's
// Longer term with this proposal re-try's should be added to grpc core, and we
// can leverage by defining a retry policy.
// https://github.com/grpc/proposal/blob/master/A6-client-retries.md#grpc-retry-design
// For now we use re-try interceptor inspired by example here in interceptor proposal for nodejs grpc core
// https://github.com/grpc/proposal/blob/master/L5-node-client-interceptors.md#advanced-examples
// Main difference is that we maintain a allow list of retryable status codes vs trying all.
const grpc_js_1 = require("@grpc/grpc-js");
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const no_retry_strategy_1 = require("../../config/retry/no-retry-strategy");
class RetryInterceptor {
    // TODO: We need to send retry count information to the server so that we
    // will have some visibility into how often this is happening to customers:
    // https://github.com/momentohq/client-sdk-nodejs/issues/80
    static createRetryInterceptor(props) {
        var _a, _b;
        const logger = props.loggerFactory.getLogger(RetryInterceptor.name);
        const retryStrategy = (_a = props.retryStrategy) !== null && _a !== void 0 ? _a : new no_retry_strategy_1.NoRetryStrategy({ loggerFactory: props.loggerFactory });
        const overallRequestTimeoutMs = props.overallRequestTimeoutMs;
        const deadlineOffset = (_b = retryStrategy.responseDataReceivedTimeoutMillis) !== null && _b !== void 0 ? _b : props.overallRequestTimeoutMs;
        logger.trace(`Creating RetryInterceptor (for ${props.clientName}); overall request timeout offset: ${overallRequestTimeoutMs} ms; retry strategy responseDataRecievedTimeoutMillis: ${String(retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.responseDataReceivedTimeoutMillis)}; deadline offset: ${deadlineOffset} ms`);
        return (options, nextCall) => {
            logger.trace(`Entering RetryInterceptor (for ${props.clientName}); overall request timeout offset: ${overallRequestTimeoutMs} ms; deadline offset: ${String(deadlineOffset)}`);
            const overallDeadline = calculateDeadline(overallRequestTimeoutMs);
            logger.trace(`Setting initial deadline (for ${props.clientName}) based on offset: ${deadlineOffset} ms`);
            let nextDeadline = calculateDeadline(deadlineOffset);
            options.deadline = nextDeadline;
            let savedMetadata;
            let savedSendMessage;
            let savedReceiveMessage;
            let savedMessageNext;
            return new grpc_js_1.InterceptingCall(nextCall(options), {
                start: function (metadata, listener, next) {
                    savedMetadata = metadata;
                    const newListener = {
                        onReceiveMessage: function (message, next) {
                            savedReceiveMessage = message;
                            savedMessageNext = next;
                        },
                        onReceiveStatus: function (status, 
                        // NOTE: we have to use `any` here because that is what is used in the grpc-js type definitions
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        next) {
                            let attempts = 0;
                            const retry = function (message, metadata) {
                                var _a;
                                logger.debug(`Retrying request: path: ${options.method_definition.path}; deadline was: ${String((_a = options.deadline) === null || _a === void 0 ? void 0 : _a.toISOString())}, overall deadline is: ${overallDeadline.toISOString()}`);
                                if (new Date(Date.now()) >= overallDeadline) {
                                    logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; overall deadline exceeded: ${overallDeadline.toISOString()}`);
                                    savedMessageNext(savedReceiveMessage);
                                    next(status);
                                    return;
                                }
                                nextDeadline = calculateDeadline(deadlineOffset);
                                logger.debug(`Setting next deadline (via offset of ${deadlineOffset} ms) to: ${nextDeadline.toISOString()}`);
                                options.deadline = nextDeadline;
                                const newCall = nextCall(options);
                                newCall.start(metadata, {
                                    onReceiveMessage: function (message) {
                                        savedReceiveMessage = message;
                                    },
                                    onReceiveStatus: function (status) {
                                        const whenToRetry = retryStrategy.determineWhenToRetryRequest({
                                            grpcStatus: status,
                                            grpcRequest: options.method_definition,
                                            attemptNumber: attempts,
                                            requestMetadata: metadata,
                                        });
                                        if (whenToRetry === null) {
                                            logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; retryable status code: ${status.code}; number of attempts (${attempts}).`);
                                            savedMessageNext(savedReceiveMessage);
                                            next(status);
                                        }
                                        else {
                                            attempts++;
                                            logger.debug(`Request eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}; number of attempts (${attempts}); will retry in ${whenToRetry}ms`);
                                            setTimeout(() => retry(message, metadata), whenToRetry);
                                        }
                                    },
                                });
                                newCall.sendMessage(savedSendMessage);
                                newCall.halfClose();
                            };
                            if (status.code === constants_1.Status.OK) {
                                savedMessageNext(savedReceiveMessage);
                                next(status);
                            }
                            else {
                                const whenToRetry = retryStrategy.determineWhenToRetryRequest({
                                    grpcStatus: status,
                                    grpcRequest: options.method_definition,
                                    attemptNumber: attempts,
                                    requestMetadata: metadata,
                                });
                                if (whenToRetry === null) {
                                    logger.debug(`Request not eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}.`);
                                    savedMessageNext(savedReceiveMessage);
                                    next(status);
                                }
                                else {
                                    attempts++;
                                    logger.debug(`Request eligible for retry: path: ${options.method_definition.path}; response status code: ${status.code}; number of attempts (${attempts}); will retry in ${whenToRetry}ms`);
                                    setTimeout(() => retry(savedSendMessage, savedMetadata), whenToRetry);
                                }
                            }
                        },
                    };
                    next(metadata, newListener);
                },
                sendMessage: function (message, next) {
                    savedSendMessage = message;
                    next(message);
                },
            });
        };
    }
}
exports.RetryInterceptor = RetryInterceptor;
function calculateDeadline(offsetMillis) {
    const deadline = new Date(Date.now());
    deadline.setMilliseconds(deadline.getMilliseconds() + offsetMillis);
    return deadline;
}
//# sourceMappingURL=data:application/json;base64,