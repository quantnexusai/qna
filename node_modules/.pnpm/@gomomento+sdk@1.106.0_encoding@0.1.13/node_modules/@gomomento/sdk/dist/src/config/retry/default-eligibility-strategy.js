"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEligibilityStrategy = void 0;
const constants_1 = require("@grpc/grpc-js/build/src/constants");
const retryableGrpcStatusCodes = [
    // including all the status codes for reference, but
    // commenting out the ones we don't want to retry on for now.
    // Status.OK,
    // Idempotent operations can be safely retried for CANCELLED errors. These may pop us sometimes during
    // client or server side deployments
    constants_1.Status.CANCELLED,
    // Status.UNKNOWN,
    // Status.INVALID_ARGUMENT,
    // Status.DEADLINE_EXCEEDED,
    // Status.NOT_FOUND,
    // Status.ALREADY_EXISTS,
    // Status.PERMISSION_DENIED,
    // Status.RESOURCE_EXHAUSTED,
    // Status.FAILED_PRECONDITION,
    // Status.ABORTED,
    // Status.OUT_OF_RANGE,
    // Status.UNIMPLEMENTED,
    constants_1.Status.INTERNAL,
    constants_1.Status.UNAVAILABLE,
    // Status.DATA_LOSS,
    // Status.UNAUTHENTICATED
];
const retryableRequestTypes = [
    '/cache_client.Scs/Get',
    '/cache_client.Scs/GetBatch',
    '/cache_client.Scs/Set',
    '/cache_client.Scs/SetBatch',
    // Not retryable: '/cache_client.Scs/SetIf',
    // SetIfNotExists is deprecated
    // Not retryable: '/cache_client.Scs/SetIfNotExists',
    '/cache_client.Scs/Delete',
    '/cache_client.Scs/KeysExist',
    // Not retryable: '/cache_client.Scs/Increment',
    // Not retryable: '/cache_client.Scs/UpdateTtl',
    '/cache_client.Scs/ItemGetTtl',
    '/cache_client.Scs/ItemGetType',
    '/cache_client.Scs/DictionaryGet',
    '/cache_client.Scs/DictionaryFetch',
    '/cache_client.Scs/DictionarySet',
    // Not retryable: '/cache_client.Scs/DictionaryIncrement',
    '/cache_client.Scs/DictionaryDelete',
    '/cache_client.Scs/DictionaryLength',
    '/cache_client.Scs/SetFetch',
    '/cache_client.Scs/SetSample',
    '/cache_client.Scs/SetUnion',
    '/cache_client.Scs/SetDifference',
    '/cache_client.Scs/SetContains',
    '/cache_client.Scs/SetLength',
    // Not retryable: '/cache_client.Scs/SetPop',
    // Not retryable: '/cache_client.Scs/ListPushFront',
    // Not retryable: '/cache_client.Scs/ListPushBack',
    // Not retryable: '/cache_client.Scs/ListPopFront',
    // Not retryable: '/cache_client.Scs/ListPopBack',
    // Not used: '/cache_client.Scs/ListErase',
    '/cache_client.Scs/ListRemove',
    '/cache_client.Scs/ListFetch',
    '/cache_client.Scs/ListLength',
    // Not retryable: '/cache_client.Scs/ListConcatenateFront',
    // Not retryable: '/cache_client.Scs/ListConcatenateBack',
    // Not retryable: '/cache_client.Scs/ListRetain',
    '/cache_client.Scs/SortedSetPut',
    '/cache_client.Scs/SortedSetFetch',
    '/cache_client.Scs/SortedSetGetScore',
    '/cache_client.Scs/SortedSetRemove',
    // Not retryable: '/cache_client.Scs/SortedSetIncrement',
    '/cache_client.Scs/SortedSetGetRank',
    '/cache_client.Scs/SortedSetLength',
    '/cache_client.Scs/SortedSetLengthByScore',
    '/cache_client.pubsub.Pubsub/Subscribe',
];
class DefaultEligibilityStrategy {
    constructor(loggerFactory) {
        this.logger = loggerFactory.getLogger(this);
    }
    isEligibleForRetry(props) {
        if (!retryableGrpcStatusCodes.includes(props.grpcStatus.code)) {
            this.logger.debug(`Response with status code ${props.grpcStatus.code} is not retryable.`);
            return false;
        }
        if (!retryableRequestTypes.includes(props.grpcRequest.path)) {
            this.logger.debug(`Request with type ${props.grpcRequest.path} is not retryable.`);
            return false;
        }
        return true;
    }
}
exports.DefaultEligibilityStrategy = DefaultEligibilityStrategy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1lbGlnaWJpbGl0eS1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25maWcvcmV0cnkvZGVmYXVsdC1lbGlnaWJpbGl0eS1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxpRUFBeUQ7QUFNekQsTUFBTSx3QkFBd0IsR0FBa0I7SUFDOUMsb0RBQW9EO0lBQ3BELDZEQUE2RDtJQUU3RCxhQUFhO0lBQ2Isc0dBQXNHO0lBQ3RHLG9DQUFvQztJQUNwQyxrQkFBTSxDQUFDLFNBQVM7SUFDaEIsa0JBQWtCO0lBQ2xCLDJCQUEyQjtJQUMzQiw0QkFBNEI7SUFDNUIsb0JBQW9CO0lBQ3BCLHlCQUF5QjtJQUN6Qiw0QkFBNEI7SUFDNUIsNkJBQTZCO0lBQzdCLDhCQUE4QjtJQUM5QixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLHdCQUF3QjtJQUN4QixrQkFBTSxDQUFDLFFBQVE7SUFDZixrQkFBTSxDQUFDLFdBQVc7SUFDbEIsb0JBQW9CO0lBQ3BCLHlCQUF5QjtDQUMxQixDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBa0I7SUFDM0MsdUJBQXVCO0lBQ3ZCLDRCQUE0QjtJQUM1Qix1QkFBdUI7SUFDdkIsNEJBQTRCO0lBQzVCLDRDQUE0QztJQUM1QywrQkFBK0I7SUFDL0IscURBQXFEO0lBQ3JELDBCQUEwQjtJQUMxQiw2QkFBNkI7SUFDN0IsZ0RBQWdEO0lBQ2hELGdEQUFnRDtJQUNoRCw4QkFBOEI7SUFDOUIsK0JBQStCO0lBRS9CLGlDQUFpQztJQUNqQyxtQ0FBbUM7SUFDbkMsaUNBQWlDO0lBQ2pDLDBEQUEwRDtJQUMxRCxvQ0FBb0M7SUFDcEMsb0NBQW9DO0lBRXBDLDRCQUE0QjtJQUM1Qiw2QkFBNkI7SUFDN0IsNEJBQTRCO0lBQzVCLGlDQUFpQztJQUNqQywrQkFBK0I7SUFDL0IsNkJBQTZCO0lBQzdCLDZDQUE2QztJQUU3QyxvREFBb0Q7SUFDcEQsbURBQW1EO0lBQ25ELG1EQUFtRDtJQUNuRCxrREFBa0Q7SUFDbEQsMkNBQTJDO0lBQzNDLDhCQUE4QjtJQUM5Qiw2QkFBNkI7SUFDN0IsOEJBQThCO0lBQzlCLDJEQUEyRDtJQUMzRCwwREFBMEQ7SUFDMUQsaURBQWlEO0lBRWpELGdDQUFnQztJQUNoQyxrQ0FBa0M7SUFDbEMscUNBQXFDO0lBQ3JDLG1DQUFtQztJQUNuQyx5REFBeUQ7SUFDekQsb0NBQW9DO0lBQ3BDLG1DQUFtQztJQUNuQywwQ0FBMEM7SUFFMUMsdUNBQXVDO0NBQ3hDLENBQUM7QUFFRixNQUFhLDBCQUEwQjtJQUdyQyxZQUFZLGFBQW1DO1FBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBNEI7UUFDN0MsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLDZCQUE2QixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksb0JBQW9CLENBQ3ZFLENBQUM7WUFDRixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHFCQUFxQixLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksb0JBQW9CLENBQ2hFLENBQUM7WUFDRixPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUF4QkQsZ0VBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnLi4vLi4vJztcbmltcG9ydCB7U3RhdHVzfSBmcm9tICdAZ3JwYy9ncnBjLWpzL2J1aWxkL3NyYy9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgRWxpZ2liaWxpdHlTdHJhdGVneSxcbiAgRWxpZ2libGVGb3JSZXRyeVByb3BzLFxufSBmcm9tICcuL2VsaWdpYmlsaXR5LXN0cmF0ZWd5JztcblxuY29uc3QgcmV0cnlhYmxlR3JwY1N0YXR1c0NvZGVzOiBBcnJheTxTdGF0dXM+ID0gW1xuICAvLyBpbmNsdWRpbmcgYWxsIHRoZSBzdGF0dXMgY29kZXMgZm9yIHJlZmVyZW5jZSwgYnV0XG4gIC8vIGNvbW1lbnRpbmcgb3V0IHRoZSBvbmVzIHdlIGRvbid0IHdhbnQgdG8gcmV0cnkgb24gZm9yIG5vdy5cblxuICAvLyBTdGF0dXMuT0ssXG4gIC8vIElkZW1wb3RlbnQgb3BlcmF0aW9ucyBjYW4gYmUgc2FmZWx5IHJldHJpZWQgZm9yIENBTkNFTExFRCBlcnJvcnMuIFRoZXNlIG1heSBwb3AgdXMgc29tZXRpbWVzIGR1cmluZ1xuICAvLyBjbGllbnQgb3Igc2VydmVyIHNpZGUgZGVwbG95bWVudHNcbiAgU3RhdHVzLkNBTkNFTExFRCxcbiAgLy8gU3RhdHVzLlVOS05PV04sXG4gIC8vIFN0YXR1cy5JTlZBTElEX0FSR1VNRU5ULFxuICAvLyBTdGF0dXMuREVBRExJTkVfRVhDRUVERUQsXG4gIC8vIFN0YXR1cy5OT1RfRk9VTkQsXG4gIC8vIFN0YXR1cy5BTFJFQURZX0VYSVNUUyxcbiAgLy8gU3RhdHVzLlBFUk1JU1NJT05fREVOSUVELFxuICAvLyBTdGF0dXMuUkVTT1VSQ0VfRVhIQVVTVEVELFxuICAvLyBTdGF0dXMuRkFJTEVEX1BSRUNPTkRJVElPTixcbiAgLy8gU3RhdHVzLkFCT1JURUQsXG4gIC8vIFN0YXR1cy5PVVRfT0ZfUkFOR0UsXG4gIC8vIFN0YXR1cy5VTklNUExFTUVOVEVELFxuICBTdGF0dXMuSU5URVJOQUwsXG4gIFN0YXR1cy5VTkFWQUlMQUJMRSxcbiAgLy8gU3RhdHVzLkRBVEFfTE9TUyxcbiAgLy8gU3RhdHVzLlVOQVVUSEVOVElDQVRFRFxuXTtcblxuY29uc3QgcmV0cnlhYmxlUmVxdWVzdFR5cGVzOiBBcnJheTxzdHJpbmc+ID0gW1xuICAnL2NhY2hlX2NsaWVudC5TY3MvR2V0JyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0dldEJhdGNoJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NldCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9TZXRCYXRjaCcsXG4gIC8vIE5vdCByZXRyeWFibGU6ICcvY2FjaGVfY2xpZW50LlNjcy9TZXRJZicsXG4gIC8vIFNldElmTm90RXhpc3RzIGlzIGRlcHJlY2F0ZWRcbiAgLy8gTm90IHJldHJ5YWJsZTogJy9jYWNoZV9jbGllbnQuU2NzL1NldElmTm90RXhpc3RzJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0RlbGV0ZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9LZXlzRXhpc3QnLFxuICAvLyBOb3QgcmV0cnlhYmxlOiAnL2NhY2hlX2NsaWVudC5TY3MvSW5jcmVtZW50JyxcbiAgLy8gTm90IHJldHJ5YWJsZTogJy9jYWNoZV9jbGllbnQuU2NzL1VwZGF0ZVR0bCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9JdGVtR2V0VHRsJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0l0ZW1HZXRUeXBlJyxcblxuICAnL2NhY2hlX2NsaWVudC5TY3MvRGljdGlvbmFyeUdldCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9EaWN0aW9uYXJ5RmV0Y2gnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvRGljdGlvbmFyeVNldCcsXG4gIC8vIE5vdCByZXRyeWFibGU6ICcvY2FjaGVfY2xpZW50LlNjcy9EaWN0aW9uYXJ5SW5jcmVtZW50JyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0RpY3Rpb25hcnlEZWxldGUnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvRGljdGlvbmFyeUxlbmd0aCcsXG5cbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NldEZldGNoJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NldFNhbXBsZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9TZXRVbmlvbicsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9TZXREaWZmZXJlbmNlJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NldENvbnRhaW5zJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NldExlbmd0aCcsXG4gIC8vIE5vdCByZXRyeWFibGU6ICcvY2FjaGVfY2xpZW50LlNjcy9TZXRQb3AnLFxuXG4gIC8vIE5vdCByZXRyeWFibGU6ICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0UHVzaEZyb250JyxcbiAgLy8gTm90IHJldHJ5YWJsZTogJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RQdXNoQmFjaycsXG4gIC8vIE5vdCByZXRyeWFibGU6ICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0UG9wRnJvbnQnLFxuICAvLyBOb3QgcmV0cnlhYmxlOiAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdFBvcEJhY2snLFxuICAvLyBOb3QgdXNlZDogJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RFcmFzZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0UmVtb3ZlJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RGZXRjaCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9MaXN0TGVuZ3RoJyxcbiAgLy8gTm90IHJldHJ5YWJsZTogJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RDb25jYXRlbmF0ZUZyb250JyxcbiAgLy8gTm90IHJldHJ5YWJsZTogJy9jYWNoZV9jbGllbnQuU2NzL0xpc3RDb25jYXRlbmF0ZUJhY2snLFxuICAvLyBOb3QgcmV0cnlhYmxlOiAnL2NhY2hlX2NsaWVudC5TY3MvTGlzdFJldGFpbicsXG5cbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NvcnRlZFNldFB1dCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9Tb3J0ZWRTZXRGZXRjaCcsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9Tb3J0ZWRTZXRHZXRTY29yZScsXG4gICcvY2FjaGVfY2xpZW50LlNjcy9Tb3J0ZWRTZXRSZW1vdmUnLFxuICAvLyBOb3QgcmV0cnlhYmxlOiAnL2NhY2hlX2NsaWVudC5TY3MvU29ydGVkU2V0SW5jcmVtZW50JyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NvcnRlZFNldEdldFJhbmsnLFxuICAnL2NhY2hlX2NsaWVudC5TY3MvU29ydGVkU2V0TGVuZ3RoJyxcbiAgJy9jYWNoZV9jbGllbnQuU2NzL1NvcnRlZFNldExlbmd0aEJ5U2NvcmUnLFxuXG4gICcvY2FjaGVfY2xpZW50LnB1YnN1Yi5QdWJzdWIvU3Vic2NyaWJlJyxcbl07XG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0RWxpZ2liaWxpdHlTdHJhdGVneSBpbXBsZW1lbnRzIEVsaWdpYmlsaXR5U3RyYXRlZ3kge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcblxuICBjb25zdHJ1Y3Rvcihsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSkge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gIH1cblxuICBpc0VsaWdpYmxlRm9yUmV0cnkocHJvcHM6IEVsaWdpYmxlRm9yUmV0cnlQcm9wcyk6IGJvb2xlYW4ge1xuICAgIGlmICghcmV0cnlhYmxlR3JwY1N0YXR1c0NvZGVzLmluY2x1ZGVzKHByb3BzLmdycGNTdGF0dXMuY29kZSkpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICBgUmVzcG9uc2Ugd2l0aCBzdGF0dXMgY29kZSAke3Byb3BzLmdycGNTdGF0dXMuY29kZX0gaXMgbm90IHJldHJ5YWJsZS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcmV0cnlhYmxlUmVxdWVzdFR5cGVzLmluY2x1ZGVzKHByb3BzLmdycGNSZXF1ZXN0LnBhdGgpKSB7XG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYFJlcXVlc3Qgd2l0aCB0eXBlICR7cHJvcHMuZ3JwY1JlcXVlc3QucGF0aH0gaXMgbm90IHJldHJ5YWJsZS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iXX0=