"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JwYy1jb25maWd1cmF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbmZpZy90cmFuc3BvcnQvdG9waWNzL2dycGMtY29uZmlndXJhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBUb3BpY0dycGNDb25maWd1cmF0aW9uUHJvcHMge1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBpbnRlcm5hbCBjbGllbnRzIGEgdG9waWMgY2xpZW50IHdpbGwgY3JlYXRlIHRvIGNvbW11bmljYXRlIHdpdGggTW9tZW50by4gTW9yZSBvZiB0aGVtIGFsbG93c1xuICAgKiBtb3JlIGNvbmN1cnJlbnQgcmVxdWVzdHMsIGF0IHRoZSBjb3N0IG9mIG1vcmUgb3BlbiBjb25uZWN0aW9ucyBhbmQgdGhlIGxhdGVuY3kgb2Ygc2V0dGluZyB1cCBlYWNoIGNsaWVudC5cbiAgICovXG4gIG51bUNsaWVudHM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiBpdCBwZXJtaXNzaWJsZSB0byBzZW5kIGtlZXBhbGl2ZSBwaW5ncyBmcm9tIHRoZSBjbGllbnQgd2l0aG91dCBhbnkgb3V0c3RhbmRpbmcgc3RyZWFtcy5cbiAgICpcbiAgICogTk9URToga2VlcC1hbGl2ZXMgYXJlIHZlcnkgaW1wb3J0YW50IGZvciBsb25nLWxpdmVkIHNlcnZlciBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgbWF5IGJlIHBlcmlvZHMgb2YgdGltZVxuICAgKiB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGlkbGUuIEhvd2V2ZXIsIHRoZXkgYXJlIHZlcnkgcHJvYmxlbWF0aWMgZm9yIGxhbWJkYSBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIGxhbWJkYVxuICAgKiBydW50aW1lIGlzIGNvbnRpbnVvdXNseSBmcm96ZW4gYW5kIHVuZnJvemVuLCBiZWNhdXNlIHRoZSBsYW1iZGEgbWF5IGJlIGZyb3plbiBiZWZvcmUgdGhlIFwiQUNLXCIgaXMgcmVjZWl2ZWRcbiAgICogZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbiBjYXVzZSB0aGUga2VlcC1hbGl2ZSB0byB0aW1lb3V0IGV2ZW4gdGhvdWdoIHRoZSBjb25uZWN0aW9uIGlzIGNvbXBsZXRlbHkgaGVhbHRoeS5cbiAgICogVGhlcmVmb3JlLCBrZWVwLWFsaXZlcyBzaG91bGQgYmUgZGlzYWJsZWQgaW4gbGFtYmRhIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cy5cbiAgICovXG4gIGtlZXBBbGl2ZVBlcm1pdFdpdGhvdXRDYWxscz86IG51bWJlcjtcblxuICAvKipcbiAgICogQWZ0ZXIgd2FpdGluZyBmb3IgYSBkdXJhdGlvbiBvZiB0aGlzIHRpbWUsIGlmIHRoZSBrZWVwYWxpdmUgcGluZyBzZW5kZXIgZG9lcyBub3QgcmVjZWl2ZSB0aGUgcGluZyBhY2ssXG4gICAqIGl0IHdpbGwgY2xvc2UgdGhlIHRyYW5zcG9ydC5cbiAgICpcbiAgICogTk9URToga2VlcC1hbGl2ZXMgYXJlIHZlcnkgaW1wb3J0YW50IGZvciBsb25nLWxpdmVkIHNlcnZlciBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgbWF5IGJlIHBlcmlvZHMgb2YgdGltZVxuICAgKiB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGlkbGUuIEhvd2V2ZXIsIHRoZXkgYXJlIHZlcnkgcHJvYmxlbWF0aWMgZm9yIGxhbWJkYSBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIGxhbWJkYVxuICAgKiBydW50aW1lIGlzIGNvbnRpbnVvdXNseSBmcm96ZW4gYW5kIHVuZnJvemVuLCBiZWNhdXNlIHRoZSBsYW1iZGEgbWF5IGJlIGZyb3plbiBiZWZvcmUgdGhlIFwiQUNLXCIgaXMgcmVjZWl2ZWRcbiAgICogZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbiBjYXVzZSB0aGUga2VlcC1hbGl2ZSB0byB0aW1lb3V0IGV2ZW4gdGhvdWdoIHRoZSBjb25uZWN0aW9uIGlzIGNvbXBsZXRlbHkgaGVhbHRoeS5cbiAgICogVGhlcmVmb3JlLCBrZWVwLWFsaXZlcyBzaG91bGQgYmUgZGlzYWJsZWQgaW4gbGFtYmRhIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cy5cbiAgICovXG4gIGtlZXBBbGl2ZVRpbWVvdXRNcz86IG51bWJlcjtcblxuICAvKipcbiAgICogQWZ0ZXIgYSBkdXJhdGlvbiBvZiB0aGlzIHRpbWUgdGhlIGNsaWVudC9zZXJ2ZXIgcGluZ3MgaXRzIHBlZXIgdG8gc2VlIGlmIHRoZSB0cmFuc3BvcnQgaXMgc3RpbGwgYWxpdmUuXG4gICAqXG4gICAqIE5PVEU6IGtlZXAtYWxpdmVzIGFyZSB2ZXJ5IGltcG9ydGFudCBmb3IgbG9uZy1saXZlZCBzZXJ2ZXIgZW52aXJvbm1lbnRzIHdoZXJlIHRoZXJlIG1heSBiZSBwZXJpb2RzIG9mIHRpbWVcbiAgICogd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBpZGxlLiBIb3dldmVyLCB0aGV5IGFyZSB2ZXJ5IHByb2JsZW1hdGljIGZvciBsYW1iZGEgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBsYW1iZGFcbiAgICogcnVudGltZSBpcyBjb250aW51b3VzbHkgZnJvemVuIGFuZCB1bmZyb3plbiwgYmVjYXVzZSB0aGUgbGFtYmRhIG1heSBiZSBmcm96ZW4gYmVmb3JlIHRoZSBcIkFDS1wiIGlzIHJlY2VpdmVkXG4gICAqIGZyb20gdGhlIHNlcnZlci4gVGhpcyBjYW4gY2F1c2UgdGhlIGtlZXAtYWxpdmUgdG8gdGltZW91dCBldmVuIHRob3VnaCB0aGUgY29ubmVjdGlvbiBpcyBjb21wbGV0ZWx5IGhlYWx0aHkuXG4gICAqIFRoZXJlZm9yZSwga2VlcC1hbGl2ZXMgc2hvdWxkIGJlIGRpc2FibGVkIGluIGxhbWJkYSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMuXG4gICAqL1xuICBrZWVwQWxpdmVUaW1lTXM/OiBudW1iZXI7XG59XG5cbi8qKlxuICogRW5jYXBzdWxhdGVzIGdSUEMgY29uZmlndXJhdGlvbiB0dW5hYmxlcy5cbiAqIEBleHBvcnRcbiAqIEBpbnRlcmZhY2UgVG9waWNHcnBjQ29uZmlndXJhdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljR3JwY0NvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn0gdGhlIG51bWJlciBvZiBpbnRlcm5hbCBjbGllbnRzIGEgdG9waWMgY2xpZW50IHdpbGwgY3JlYXRlIHRvIGNvbW11bmljYXRlIHdpdGggTW9tZW50by4gTW9yZSBvZlxuICAgKiB0aGVtIHdpbGwgYWxsb3cgZm9yIG1vcmUgY29uY3VycmVudCByZXF1ZXN0cy5cbiAgICovXG4gIGdldE51bUNsaWVudHMoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDb3B5IGNvbnN0cnVjdG9yIGZvciBvdmVycmlkaW5nIHRoZSBudW1iZXIgb2YgY2xpZW50cyB0byBjcmVhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bUNsaWVudHMgdGhlIG51bWJlciBvZiBpbnRlcm5hbCBjbGllbnRzIHRvIGNyZWF0ZVxuICAgKiBAcmV0dXJucyB7R3JwY0NvbmZpZ3VyYXRpb259IGEgbmV3IEdycGNDb25maWd1cmF0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgY2xpZW50c1xuICAgKi9cbiAgd2l0aE51bUNsaWVudHMobnVtQ2xpZW50czogbnVtYmVyKTogVG9waWNHcnBjQ29uZmlndXJhdGlvbjtcblxuICAvKipcbiAgICogTk9URToga2VlcC1hbGl2ZXMgYXJlIHZlcnkgaW1wb3J0YW50IGZvciBsb25nLWxpdmVkIHNlcnZlciBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgbWF5IGJlIHBlcmlvZHMgb2YgdGltZVxuICAgKiB3aGVuIHRoZSBjb25uZWN0aW9uIGlzIGlkbGUuIEhvd2V2ZXIsIHRoZXkgYXJlIHZlcnkgcHJvYmxlbWF0aWMgZm9yIGxhbWJkYSBlbnZpcm9ubWVudHMgd2hlcmUgdGhlIGxhbWJkYVxuICAgKiBydW50aW1lIGlzIGNvbnRpbnVvdXNseSBmcm96ZW4gYW5kIHVuZnJvemVuLCBiZWNhdXNlIHRoZSBsYW1iZGEgbWF5IGJlIGZyb3plbiBiZWZvcmUgdGhlIFwiQUNLXCIgaXMgcmVjZWl2ZWRcbiAgICogZnJvbSB0aGUgc2VydmVyLiBUaGlzIGNhbiBjYXVzZSB0aGUga2VlcC1hbGl2ZSB0byB0aW1lb3V0IGV2ZW4gdGhvdWdoIHRoZSBjb25uZWN0aW9uIGlzIGNvbXBsZXRlbHkgaGVhbHRoeS5cbiAgICogVGhlcmVmb3JlLCBrZWVwLWFsaXZlcyBzaG91bGQgYmUgZGlzYWJsZWQgaW4gbGFtYmRhIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cy5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn0gMCBvciAxLCBpZiBpdCBpcyBwZXJtaXNzaWJsZSB0byBzZW5kIGEga2VlcGFsaXZlL3Bpbmcgd2l0aG91dCBhbnkgb3V0c3RhbmRpbmcgY2FsbHMuXG4gICAqL1xuICBnZXRLZWVwQWxpdmVQZXJtaXRXaXRob3V0Q2FsbHMoKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBOT1RFOiBrZWVwLWFsaXZlcyBhcmUgdmVyeSBpbXBvcnRhbnQgZm9yIGxvbmctbGl2ZWQgc2VydmVyIGVudmlyb25tZW50cyB3aGVyZSB0aGVyZSBtYXkgYmUgcGVyaW9kcyBvZiB0aW1lXG4gICAqIHdoZW4gdGhlIGNvbm5lY3Rpb24gaXMgaWRsZS4gSG93ZXZlciwgdGhleSBhcmUgdmVyeSBwcm9ibGVtYXRpYyBmb3IgbGFtYmRhIGVudmlyb25tZW50cyB3aGVyZSB0aGUgbGFtYmRhXG4gICAqIHJ1bnRpbWUgaXMgY29udGludW91c2x5IGZyb3plbiBhbmQgdW5mcm96ZW4sIGJlY2F1c2UgdGhlIGxhbWJkYSBtYXkgYmUgZnJvemVuIGJlZm9yZSB0aGUgXCJBQ0tcIiBpcyByZWNlaXZlZFxuICAgKiBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgY2FuIGNhdXNlIHRoZSBrZWVwLWFsaXZlIHRvIHRpbWVvdXQgZXZlbiB0aG91Z2ggdGhlIGNvbm5lY3Rpb24gaXMgY29tcGxldGVseSBoZWFsdGh5LlxuICAgKiBUaGVyZWZvcmUsIGtlZXAtYWxpdmVzIHNob3VsZCBiZSBkaXNhYmxlZCBpbiBsYW1iZGEgYW5kIHNpbWlsYXIgZW52aXJvbm1lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSB0aGUgdGltZSB0byB3YWl0IGZvciBhIHJlc3BvbnNlIGZyb20gYSBrZWVwYWxpdmUgb3IgcGluZy5cbiAgICovXG4gIGdldEtlZXBBbGl2ZVRpbWVvdXRNUygpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIE5PVEU6IGtlZXAtYWxpdmVzIGFyZSB2ZXJ5IGltcG9ydGFudCBmb3IgbG9uZy1saXZlZCBzZXJ2ZXIgZW52aXJvbm1lbnRzIHdoZXJlIHRoZXJlIG1heSBiZSBwZXJpb2RzIG9mIHRpbWVcbiAgICogd2hlbiB0aGUgY29ubmVjdGlvbiBpcyBpZGxlLiBIb3dldmVyLCB0aGV5IGFyZSB2ZXJ5IHByb2JsZW1hdGljIGZvciBsYW1iZGEgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBsYW1iZGFcbiAgICogcnVudGltZSBpcyBjb250aW51b3VzbHkgZnJvemVuIGFuZCB1bmZyb3plbiwgYmVjYXVzZSB0aGUgbGFtYmRhIG1heSBiZSBmcm96ZW4gYmVmb3JlIHRoZSBcIkFDS1wiIGlzIHJlY2VpdmVkXG4gICAqIGZyb20gdGhlIHNlcnZlci4gVGhpcyBjYW4gY2F1c2UgdGhlIGtlZXAtYWxpdmUgdG8gdGltZW91dCBldmVuIHRob3VnaCB0aGUgY29ubmVjdGlvbiBpcyBjb21wbGV0ZWx5IGhlYWx0aHkuXG4gICAqIFRoZXJlZm9yZSwga2VlcC1hbGl2ZXMgc2hvdWxkIGJlIGRpc2FibGVkIGluIGxhbWJkYSBhbmQgc2ltaWxhciBlbnZpcm9ubWVudHMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHRoZSBpbnRlcnZhbCBhdCB3aGljaCB0byBzZW5kIHRoZSBrZWVwYWxpdmUgb3IgcGluZy5cbiAgICovXG4gIGdldEtlZXBBbGl2ZVRpbWVNUygpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG59XG4iXX0=