"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheRequestToLogInterfaceConverter = exports.convertSingleKeyRequest = void 0;
const generated_types_1 = require("@gomomento/generated-types");
const TEXT_DECODER = new TextDecoder();
// TODO: bytes will not always be convertible to string
function convertBytesToString(bytes) {
    return TEXT_DECODER.decode(bytes);
}
function convertSingleKeyRequest(requestType, key) {
    return {
        requestType: requestType,
        key: convertBytesToString(key),
    };
}
exports.convertSingleKeyRequest = convertSingleKeyRequest;
const convertGetRequest = (request) => {
    return convertSingleKeyRequest('get', request.cache_key);
};
const convertGetBatchRequest = (request) => {
    return {
        requestType: 'getBatch',
        keys: request.items.map(item => convertBytesToString(item.cache_key)),
    };
};
const convertDeleteRequest = (request) => {
    return convertSingleKeyRequest('delete', request.cache_key);
};
const convertSetRequest = (request) => {
    return {
        requestType: 'set',
        key: convertBytesToString(request.cache_key),
        value: convertBytesToString(request.cache_body),
        ttlMillis: request.ttl_milliseconds,
    };
};
const convertSetBatchRequest = (request) => {
    return {
        requestType: 'setBatch',
        items: request.items.map(item => {
            return {
                key: convertBytesToString(item.cache_key),
                value: convertBytesToString(item.cache_body),
                ttlMillis: item.ttl_milliseconds,
            };
        }),
    };
};
const convertSetIfRequest = (request) => {
    return {
        requestType: 'setIf',
        key: convertBytesToString(request.cache_key),
        value: convertBytesToString(request.cache_body),
        ttlMillis: request.ttl_milliseconds,
        condition: request.condition,
        present: request.present !== undefined,
        presentAndNotEqual: request.present_and_not_equal
            ? convertBytesToString(request.present_and_not_equal.value_to_check)
            : undefined,
        absent: request.absent !== undefined,
        equal: request.equal
            ? convertBytesToString(request.equal.value_to_check)
            : undefined,
        absentOrEqual: request.absent_or_equal
            ? convertBytesToString(request.absent_or_equal.value_to_check)
            : undefined,
        notEqual: request.not_equal
            ? convertBytesToString(request.not_equal.value_to_check)
            : undefined,
    };
};
const convertSetIfNotExistsRequest = (request) => {
    return {
        requestType: 'setIfNotExists',
        key: convertBytesToString(request.cache_key),
        value: convertBytesToString(request.cache_body),
        ttlMillis: request.ttl_milliseconds,
    };
};
const convertKeysExistRequest = (request) => {
    return {
        requestType: 'keysExist',
        keys: request.cache_keys.map(key => convertBytesToString(key)),
    };
};
const convertIncrementRequest = (request) => {
    return {
        requestType: 'increment',
        key: convertBytesToString(request.cache_key),
        amount: request.amount,
        ttlMillis: request.ttl_milliseconds,
    };
};
const convertUpdateTtlRequest = (request) => {
    return {
        requestType: 'updateTtl',
        key: convertBytesToString(request.cache_key),
        increaseToMillis: request.increase_to_milliseconds,
        decreaseToMillis: request.decrease_to_milliseconds,
        overwriteToMillis: request.overwrite_to_milliseconds,
    };
};
const convertItemGetTtlRequest = (request) => {
    return convertSingleKeyRequest('itemGetTtl', request.cache_key);
};
const convertItemGetTypeRequest = (request) => {
    return convertSingleKeyRequest('itemGetType', request.cache_key);
};
const convertDictionaryGetRequest = (request) => {
    return {
        requestType: 'dictionaryGet',
        dictionaryName: convertBytesToString(request.dictionary_name),
        fields: request.fields.map(field => convertBytesToString(field)),
    };
};
const convertDictionaryFetchRequest = (request) => {
    return {
        requestType: 'dictionaryFetch',
        dictionaryName: convertBytesToString(request.dictionary_name),
    };
};
const convertDictionarySetRequest = (request) => {
    return {
        requestType: 'dictionarySet',
        dictionaryName: convertBytesToString(request.dictionary_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        items: request.items.map(item => {
            return {
                field: convertBytesToString(item.field),
                value: convertBytesToString(item.value),
            };
        }),
    };
};
const convertDictionaryIncrementRequest = (request) => {
    return {
        requestType: 'dictionaryIncrement',
        dictionaryName: convertBytesToString(request.dictionary_name),
        field: convertBytesToString(request.field),
        amount: request.amount,
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
    };
};
const convertDictionaryDeleteRequest = (request) => {
    return {
        requestType: 'dictionaryDelete',
        dictionaryName: convertBytesToString(request.dictionary_name),
        fields: request.some.fields.map(field => convertBytesToString(field)),
    };
};
const convertDictionaryLengthRequest = (request) => {
    return {
        requestType: 'dictionaryLength',
        dictionaryName: convertBytesToString(request.dictionary_name),
    };
};
const convertSetFetchRequest = (request) => {
    return {
        requestType: 'setFetch',
        setName: convertBytesToString(request.set_name),
    };
};
const convertSetSampleRequest = (request) => {
    return {
        requestType: 'setSample',
        setName: convertBytesToString(request.set_name),
        limit: request.limit,
    };
};
const convertSetUnionRequest = (request) => {
    return {
        requestType: 'setUnion',
        setName: convertBytesToString(request.set_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        elements: request.elements.map(element => convertBytesToString(element)),
    };
};
const convertSetDifferenceRequest = (request) => {
    return {
        requestType: 'setDifference',
        setName: convertBytesToString(request.set_name),
        action: request.minuend
            ? 'minuend'
            : request.subtrahend.set
                ? 'subtrahend_set'
                : 'subtrahend_identity',
        elements: request.minuend
            ? request.minuend.elements.map(element => convertBytesToString(element))
            : request.subtrahend.set
                ? request.subtrahend.set.elements.map(element => convertBytesToString(element))
                : undefined,
    };
};
const convertSetContainsRequest = (request) => {
    return {
        requestType: 'setContains',
        setName: convertBytesToString(request.set_name),
        elements: request.elements.map(element => convertBytesToString(element)),
    };
};
const convertSetLengthRequest = (request) => {
    return {
        requestType: 'setLength',
        setName: convertBytesToString(request.set_name),
    };
};
const convertSetPopRequest = (request) => {
    return {
        requestType: 'setPop',
        setName: convertBytesToString(request.set_name),
        count: request.count,
    };
};
const convertListConcatenateFrontRequest = (request) => {
    return {
        requestType: 'listConcatenateFront',
        listName: convertBytesToString(request.list_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        truncateBackToSize: request.truncate_back_to_size,
        values: request.values.map(value => convertBytesToString(value)),
    };
};
const convertListConcatenateBackRequest = (request) => {
    return {
        requestType: 'listConcatenateBack',
        listName: convertBytesToString(request.list_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        truncateFrontToSize: request.truncate_front_to_size,
        values: request.values.map(value => convertBytesToString(value)),
    };
};
const convertListPushFrontRequest = (request) => {
    return {
        requestType: 'listPushFront',
        listName: convertBytesToString(request.list_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        truncateBackToSize: request.truncate_back_to_size,
        value: convertBytesToString(request.value),
    };
};
const convertListPushBackRequest = (request) => {
    return {
        requestType: 'listPushBack',
        listName: convertBytesToString(request.list_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        truncateFrontToSize: request.truncate_front_to_size,
        value: convertBytesToString(request.value),
    };
};
const convertListPopFrontRequest = (request) => {
    return {
        requestType: 'listPopFront',
        listName: convertBytesToString(request.list_name),
    };
};
const convertListPopBackRequest = (request) => {
    return {
        requestType: 'listPopBack',
        listName: convertBytesToString(request.list_name),
    };
};
const convertListRemoveRequest = (request) => {
    return {
        requestType: 'listRemove',
        listName: convertBytesToString(request.list_name),
        value: convertBytesToString(request.all_elements_with_value),
    };
};
const convertListFetchRequest = (request) => {
    return {
        requestType: 'listFetch',
        listName: convertBytesToString(request.list_name),
        inclusiveStart: request.inclusive_start,
        exclusiveEnd: request.exclusive_end,
    };
};
const convertListEraseRequest = (request) => {
    return {
        requestType: 'listErase',
        listName: convertBytesToString(request.list_name),
        all: request.all !== undefined,
        some: request.some.ranges.map(range => {
            return {
                beginIndex: range.begin_index,
                count: range.count,
            };
        }),
    };
};
const convertListRetainRequest = (request) => {
    return {
        requestType: 'listRetain',
        listName: convertBytesToString(request.list_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        inclusiveStart: request.inclusive_start,
        exclusiveEnd: request.exclusive_end,
    };
};
const convertListLengthRequest = (request) => {
    return {
        requestType: 'listLength',
        listName: convertBytesToString(request.list_name),
    };
};
const convertSortedSetPutRequest = (request) => {
    return {
        requestType: 'sortedSetPut',
        sortedSetName: convertBytesToString(request.set_name),
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
        elements: request.elements.map(item => {
            return {
                value: convertBytesToString(item.value),
                score: item.score,
            };
        }),
    };
};
const convertSortedSetFetchRequest = (request) => {
    var _a, _b;
    const byScore = request.by_score
        ? {
            minScore: request.by_score.unbounded_min
                ? 'unbounded'
                : request.by_score.min_score.score,
            minScoreExclusive: (_a = request.by_score.min_score) === null || _a === void 0 ? void 0 : _a.exclusive,
            maxScore: request.by_score.unbounded_max
                ? 'unbounded'
                : request.by_score.max_score.score,
            maxScoreExclusive: (_b = request.by_score.max_score) === null || _b === void 0 ? void 0 : _b.exclusive,
            offset: request.by_score.offset,
            count: request.by_score.count,
        }
        : undefined;
    const byIndex = request.by_index
        ? {
            inclusiveStartIndex: request.by_index.unbounded_start
                ? 'unbounded'
                : request.by_index.inclusive_start_index,
            exclusiveEndIndex: request.by_index.unbounded_end
                ? 'unbounded'
                : request.by_index.exclusive_end_index,
        }
        : undefined;
    return {
        requestType: 'sortedSetFetch',
        sortedSetName: convertBytesToString(request.set_name),
        order: request.order ===
            generated_types_1.cache.cache_client._SortedSetFetchRequest.Order.DESCENDING
            ? 'descending'
            : 'ascending',
        byScore,
        byIndex,
    };
};
const convertSortedSetGetScoreRequest = (request) => {
    return {
        requestType: 'sortedSetGetScore',
        sortedSetName: convertBytesToString(request.set_name),
        values: request.values.map(value => convertBytesToString(value)),
    };
};
const convertSortedSetRemoveRequest = (request) => {
    return {
        requestType: 'sortedSetRemove',
        sortedSetName: convertBytesToString(request.set_name),
        values: request.all
            ? 'all'
            : request.some.values.map(value => convertBytesToString(value)),
    };
};
const convertSortedSetIncrementRequest = (request) => {
    return {
        requestType: 'sortedSetIncrement',
        sortedSetName: convertBytesToString(request.set_name),
        value: convertBytesToString(request.value),
        amount: request.amount,
        ttlMillis: request.ttl_milliseconds,
        refreshTtl: request.refresh_ttl,
    };
};
const convertSortedSetGetRankRequest = (request) => {
    return {
        requestType: 'sortedSetGetRank',
        sortedSetName: convertBytesToString(request.set_name),
        value: convertBytesToString(request.value),
        order: request.order ===
            generated_types_1.cache.cache_client._SortedSetGetRankRequest.Order.DESCENDING
            ? 'descending'
            : 'ascending',
    };
};
const convertSortedSetLengthRequest = (request) => {
    return {
        requestType: 'sortedSetLength',
        sortedSetName: convertBytesToString(request.set_name),
    };
};
const convertSortedSetLengthByScoreRequest = (request) => {
    var _a, _b;
    return {
        requestType: 'sortedSetLengthByScore',
        sortedSetName: convertBytesToString(request.set_name),
        minScore: request.unbounded_min
            ? 'unbounded'
            : (_a = request.inclusive_min) !== null && _a !== void 0 ? _a : request.exclusive_min,
        minScoreExclusive: request.unbounded_min
            ? undefined
            : request.has_exclusive_min,
        maxScore: request.unbounded_max
            ? 'unbounded'
            : (_b = request.inclusive_max) !== null && _b !== void 0 ? _b : request.exclusive_max,
        maxScoreExclusive: request.unbounded_max
            ? undefined
            : request.has_exclusive_max,
    };
};
exports.CacheRequestToLogInterfaceConverter = new Map([
    ['_GetRequest', convertGetRequest],
    ['_GetBatchRequest', convertGetBatchRequest],
    ['_DeleteRequest', convertDeleteRequest],
    ['_SetRequest', convertSetRequest],
    ['_SetBatchRequest', convertSetBatchRequest],
    ['_SetIfRequest', convertSetIfRequest],
    ['_SetIfNotExistsRequest', convertSetIfNotExistsRequest],
    ['_KeysExistRequest', convertKeysExistRequest],
    ['_IncrementRequest', convertIncrementRequest],
    ['_UpdateTtlRequest', convertUpdateTtlRequest],
    ['_ItemGetTtlRequest', convertItemGetTtlRequest],
    ['_ItemGetTypeRequest', convertItemGetTypeRequest],
    ['_DictionaryGetRequest', convertDictionaryGetRequest],
    ['_DictionaryFetchRequest', convertDictionaryFetchRequest],
    ['_DictionarySetRequest', convertDictionarySetRequest],
    ['_DictionaryIncrementRequest', convertDictionaryIncrementRequest],
    ['_DictionaryDeleteRequest', convertDictionaryDeleteRequest],
    ['_DictionaryLengthRequest', convertDictionaryLengthRequest],
    ['_SetFetchRequest', convertSetFetchRequest],
    ['_SetSampleRequest', convertSetSampleRequest],
    ['_SetUnionRequest', convertSetUnionRequest],
    ['_SetDifferenceRequest', convertSetDifferenceRequest],
    ['_SetContainsRequest', convertSetContainsRequest],
    ['_SetLengthRequest', convertSetLengthRequest],
    ['_SetPopRequest', convertSetPopRequest],
    ['_ListConcatenateFrontRequest', convertListConcatenateFrontRequest],
    ['_ListConcatenateBackRequest', convertListConcatenateBackRequest],
    ['_ListPushFrontRequest', convertListPushFrontRequest],
    ['_ListPushBackRequest', convertListPushBackRequest],
    ['_ListPopFrontRequest', convertListPopFrontRequest],
    ['_ListPopBackRequest', convertListPopBackRequest],
    ['_ListRemoveRequest', convertListRemoveRequest],
    ['_ListFetchRequest', convertListFetchRequest],
    ['_ListEraseRequest', convertListEraseRequest],
    ['_ListRetainRequest', convertListRetainRequest],
    ['_ListLengthRequest', convertListLengthRequest],
    ['_SortedSetPutRequest', convertSortedSetPutRequest],
    ['_SortedSetFetchRequest', convertSortedSetFetchRequest],
    ['_SortedSetGetScoreRequest', convertSortedSetGetScoreRequest],
    ['_SortedSetRemoveRequest', convertSortedSetRemoveRequest],
    ['_SortedSetIncrementRequest', convertSortedSetIncrementRequest],
    ['_SortedSetGetRankRequest', convertSortedSetGetRankRequest],
    ['_SortedSetLengthRequest', convertSortedSetLengthRequest],
    ['_SortedSetLengthByScoreRequest', convertSortedSetLengthByScoreRequest],
]);
//# sourceMappingURL=data:application/json;base64,