"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeaderboardClientConfiguration = void 0;
class LeaderboardClientConfiguration {
    constructor(props) {
        this.loggerFactory = props.loggerFactory;
        this.transportStrategy = props.transportStrategy;
        this.throwOnErrors = props.throwOnErrors;
        this.middlewares = props.middlewares;
    }
    getLoggerFactory() {
        return this.loggerFactory;
    }
    getTransportStrategy() {
        return this.transportStrategy;
    }
    withClientTimeoutMillis(clientTimeoutMillis) {
        return new LeaderboardClientConfiguration({
            ...this,
            transportStrategy: this.transportStrategy.withClientTimeoutMillis(clientTimeoutMillis),
        });
    }
    withTransportStrategy(transportStrategy) {
        return new LeaderboardClientConfiguration({
            ...this,
            transportStrategy,
        });
    }
    getThrowOnErrors() {
        return this.throwOnErrors;
    }
    withThrowOnErrors(throwOnErrors) {
        return new LeaderboardClientConfiguration({
            ...this,
            throwOnErrors,
        });
    }
    getMiddlewares() {
        return this.middlewares;
    }
    withMiddlewares(middlewares) {
        return new LeaderboardClientConfiguration({
            ...this,
            middlewares,
        });
    }
    addMiddleware(middleware) {
        return new LeaderboardClientConfiguration({
            ...this,
            middlewares: [middleware, ...this.middlewares],
        });
    }
}
exports.LeaderboardClientConfiguration = LeaderboardClientConfiguration;
//# sourceMappingURL=data:application/json;base64,