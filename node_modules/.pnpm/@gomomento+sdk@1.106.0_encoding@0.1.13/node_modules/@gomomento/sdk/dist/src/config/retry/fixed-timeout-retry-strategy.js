"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FixedTimeoutRetryStrategy = void 0;
const storage_default_eligibility_strategy_1 = require("./storage-default-eligibility-strategy");
class FixedTimeoutRetryStrategy {
    constructor(props) {
        var _a, _b, _c;
        this.logger = props.loggerFactory.getLogger(this);
        this.eligibilityStrategy =
            (_a = props.eligibilityStrategy) !== null && _a !== void 0 ? _a : new storage_default_eligibility_strategy_1.DefaultStorageEligibilityStrategy(props.loggerFactory);
        this.retryDelayIntervalMillis = (_b = props.retryDelayIntervalMillis) !== null && _b !== void 0 ? _b : 100;
        this.responseDataReceivedTimeoutMillis =
            (_c = props.responseDataReceivedTimeoutMillis) !== null && _c !== void 0 ? _c : 1000;
    }
    determineWhenToRetryRequest(props) {
        this.logger.debug(`Determining whether request is eligible for retry; status code: ${props.grpcStatus.code}, request type: ${props.grpcRequest.path}, attemptNumber: ${props.attemptNumber}`);
        if (!this.eligibilityStrategy.isEligibleForRetry(props)) {
            // null means do not retry
            return null;
        }
        this.logger.debug(`Request is eligible for retry (attempt ${props.attemptNumber}), retrying after ${this.retryDelayIntervalMillis} ms +/- jitter.`);
        // retry after a fixed time interval has passed (+/- some jitter)
        return addJitter(this.retryDelayIntervalMillis);
    }
}
exports.FixedTimeoutRetryStrategy = FixedTimeoutRetryStrategy;
function addJitter(whenToRetry) {
    return (0.2 * Math.random() + 0.9) * whenToRetry;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml4ZWQtdGltZW91dC1yZXRyeS1zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb25maWcvcmV0cnkvZml4ZWQtdGltZW91dC1yZXRyeS1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFNQSxpR0FBeUY7QUFhekYsTUFBYSx5QkFBeUI7SUFNcEMsWUFBWSxLQUFxQzs7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsbUJBQW1CO1lBQ3RCLE1BQUEsS0FBSyxDQUFDLG1CQUFtQixtQ0FDekIsSUFBSSx3RUFBaUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLHdCQUF3QixHQUFHLE1BQUEsS0FBSyxDQUFDLHdCQUF3QixtQ0FBSSxHQUFHLENBQUM7UUFDdEUsSUFBSSxDQUFDLGlDQUFpQztZQUNwQyxNQUFBLEtBQUssQ0FBQyxpQ0FBaUMsbUNBQUksSUFBSSxDQUFDO0lBQ3BELENBQUM7SUFFRCwyQkFBMkIsQ0FDekIsS0FBdUM7UUFFdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsbUVBQW1FLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxtQkFBbUIsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLG9CQUFvQixLQUFLLENBQUMsYUFBYSxFQUFFLENBQzNLLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZELDBCQUEwQjtZQUMxQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsMENBQTBDLEtBQUssQ0FBQyxhQUFhLHFCQUFxQixJQUFJLENBQUMsd0JBQXdCLGlCQUFpQixDQUNqSSxDQUFDO1FBQ0YsaUVBQWlFO1FBQ2pFLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDRjtBQWpDRCw4REFpQ0M7QUFFRCxTQUFTLFNBQVMsQ0FBQyxXQUFtQjtJQUNwQyxPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUM7QUFDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERldGVybWluZXdoZW5Ub1JldHJ5UmVxdWVzdFByb3BzLFxuICBSZXRyeVN0cmF0ZWd5LFxufSBmcm9tICcuL3JldHJ5LXN0cmF0ZWd5JztcbmltcG9ydCB7RWxpZ2liaWxpdHlTdHJhdGVneX0gZnJvbSAnLi9lbGlnaWJpbGl0eS1zdHJhdGVneSc7XG5pbXBvcnQge01vbWVudG9Mb2dnZXJGYWN0b3J5LCBNb21lbnRvTG9nZ2VyfSBmcm9tICcuLi8uLic7XG5pbXBvcnQge0RlZmF1bHRTdG9yYWdlRWxpZ2liaWxpdHlTdHJhdGVneX0gZnJvbSAnLi9zdG9yYWdlLWRlZmF1bHQtZWxpZ2liaWxpdHktc3RyYXRlZ3knO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpeGVkVGltZW91dFJldHJ5U3RyYXRlZ3lQcm9wcyB7XG4gIGxvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5O1xuICBlbGlnaWJpbGl0eVN0cmF0ZWd5PzogRWxpZ2liaWxpdHlTdHJhdGVneTtcblxuICAvLyBSZXRyeSByZXF1ZXN0IGFmdGVyIGEgZml4ZWQgdGltZSBpbnRlcnZhbCAoZGVmYXVsdHMgdG8gMTAwbXMpXG4gIHJldHJ5RGVsYXlJbnRlcnZhbE1pbGxpcz86IG51bWJlcjtcblxuICAvLyBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoZSBjbGllbnQgaXMgd2lsbGluZyB0byB3YWl0IGZvciByZXNwb25zZSBkYXRhIHRvIGJlIHJlY2VpdmVkIGJlZm9yZSByZXRyeWluZyAoZGVmYXVsdHMgdG8gMTAwMG1zKS4gQWZ0ZXIgdGhlIG92ZXJhcmNoaW5nIEdSUEMgY29uZmlnIGRlYWRsaW5lTWlsbGlzIGhhcyBiZWVuIHJlYWNoZWQsIHRoZSBjbGllbnQgd2lsbCB0ZXJtaW5hdGUgdGhlIFJQQyB3aXRoIGEgQ2FuY2VsbGVkIGVycm9yLlxuICByZXNwb25zZURhdGFSZWNlaXZlZFRpbWVvdXRNaWxsaXM/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBGaXhlZFRpbWVvdXRSZXRyeVN0cmF0ZWd5IGltcGxlbWVudHMgUmV0cnlTdHJhdGVneSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuICBwcml2YXRlIHJlYWRvbmx5IGVsaWdpYmlsaXR5U3RyYXRlZ3k6IEVsaWdpYmlsaXR5U3RyYXRlZ3k7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmV0cnlEZWxheUludGVydmFsTWlsbGlzOiBudW1iZXI7XG4gIHJlYWRvbmx5IHJlc3BvbnNlRGF0YVJlY2VpdmVkVGltZW91dE1pbGxpczogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBGaXhlZFRpbWVvdXRSZXRyeVN0cmF0ZWd5UHJvcHMpIHtcbiAgICB0aGlzLmxvZ2dlciA9IHByb3BzLmxvZ2dlckZhY3RvcnkuZ2V0TG9nZ2VyKHRoaXMpO1xuICAgIHRoaXMuZWxpZ2liaWxpdHlTdHJhdGVneSA9XG4gICAgICBwcm9wcy5lbGlnaWJpbGl0eVN0cmF0ZWd5ID8/XG4gICAgICBuZXcgRGVmYXVsdFN0b3JhZ2VFbGlnaWJpbGl0eVN0cmF0ZWd5KHByb3BzLmxvZ2dlckZhY3RvcnkpO1xuICAgIHRoaXMucmV0cnlEZWxheUludGVydmFsTWlsbGlzID0gcHJvcHMucmV0cnlEZWxheUludGVydmFsTWlsbGlzID8/IDEwMDtcbiAgICB0aGlzLnJlc3BvbnNlRGF0YVJlY2VpdmVkVGltZW91dE1pbGxpcyA9XG4gICAgICBwcm9wcy5yZXNwb25zZURhdGFSZWNlaXZlZFRpbWVvdXRNaWxsaXMgPz8gMTAwMDtcbiAgfVxuXG4gIGRldGVybWluZVdoZW5Ub1JldHJ5UmVxdWVzdChcbiAgICBwcm9wczogRGV0ZXJtaW5ld2hlblRvUmV0cnlSZXF1ZXN0UHJvcHNcbiAgKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICBgRGV0ZXJtaW5pbmcgd2hldGhlciByZXF1ZXN0IGlzIGVsaWdpYmxlIGZvciByZXRyeTsgc3RhdHVzIGNvZGU6ICR7cHJvcHMuZ3JwY1N0YXR1cy5jb2RlfSwgcmVxdWVzdCB0eXBlOiAke3Byb3BzLmdycGNSZXF1ZXN0LnBhdGh9LCBhdHRlbXB0TnVtYmVyOiAke3Byb3BzLmF0dGVtcHROdW1iZXJ9YFxuICAgICk7XG4gICAgaWYgKCF0aGlzLmVsaWdpYmlsaXR5U3RyYXRlZ3kuaXNFbGlnaWJsZUZvclJldHJ5KHByb3BzKSkge1xuICAgICAgLy8gbnVsbCBtZWFucyBkbyBub3QgcmV0cnlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgYFJlcXVlc3QgaXMgZWxpZ2libGUgZm9yIHJldHJ5IChhdHRlbXB0ICR7cHJvcHMuYXR0ZW1wdE51bWJlcn0pLCByZXRyeWluZyBhZnRlciAke3RoaXMucmV0cnlEZWxheUludGVydmFsTWlsbGlzfSBtcyArLy0gaml0dGVyLmBcbiAgICApO1xuICAgIC8vIHJldHJ5IGFmdGVyIGEgZml4ZWQgdGltZSBpbnRlcnZhbCBoYXMgcGFzc2VkICgrLy0gc29tZSBqaXR0ZXIpXG4gICAgcmV0dXJuIGFkZEppdHRlcih0aGlzLnJldHJ5RGVsYXlJbnRlcnZhbE1pbGxpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkSml0dGVyKHdoZW5Ub1JldHJ5OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gKDAuMiAqIE1hdGgucmFuZG9tKCkgKyAwLjkpICogd2hlblRvUmV0cnk7XG59XG4iXX0=