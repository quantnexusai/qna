"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestLoggingMiddleware = void 0;
const __1 = require("../..");
class LoggingMiddlewareRequestHandler {
    constructor(logger, requestId) {
        this.logger = logger;
        this.requestId = requestId;
    }
    onRequestMetadata(metadata) {
        this.logger.info(JSON.stringify({
            event: 'onRequestMetadata',
            requestId: this.requestId,
            ...metadata.toJsonObject(),
        }));
        return Promise.resolve(metadata);
    }
    onRequestBody(request) {
        this.logger.info(JSON.stringify({
            event: 'onRequestBody',
            requestId: this.requestId,
            requestSize: request.messageLength(),
            ...request.toLogFormat(),
        }));
        return Promise.resolve(request);
    }
    onResponseMetadata(metadata) {
        this.logger.info(JSON.stringify({
            event: 'onResponseMetadata',
            requestId: this.requestId,
            ...metadata.toJsonObject(),
        }));
        return Promise.resolve(metadata);
    }
    onResponseBody(response) {
        var _a;
        this.logger.info(JSON.stringify({
            event: 'onResponseBody',
            requestId: this.requestId,
            ...(_a = response === null || response === void 0 ? void 0 : response._grpcMessage) === null || _a === void 0 ? void 0 : _a.toObject(),
        }));
        return Promise.resolve(response);
    }
    onResponseStatus(status) {
        this.logger.info(JSON.stringify({
            event: 'onResponseStatus',
            requestId: this.requestId,
            status: status.code(),
        }));
        return Promise.resolve(status);
    }
}
/**
 * This middleware implements per-request logging which can be used for
 * debugging.
 *
 * WARNING: enabling this middleware may have minor performance implications,
 * so enable with caution.
 *
 * In order for this middleware to produce output you will need to have
 * set up your {Configuration} with a {MomentoLoggerFactory} instance that
 * is configured to log at DEBUG level or lower.  See `advanced.ts` in the
 * examples directory for an example of how to set up your {Configuration} to
 * enable this middleware.
 */
class RequestLoggingMiddleware {
    constructor(loggerFactory = new __1.DefaultMomentoLoggerFactory()) {
        this.logger = loggerFactory.getLogger(this);
        this.nextRequestId = 0;
    }
    onNewRequest() {
        this.nextRequestId++;
        return new LoggingMiddlewareRequestHandler(this.logger, this.nextRequestId.toString());
    }
}
exports.RequestLoggingMiddleware = RequestLoggingMiddleware;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1sb2dnaW5nLW1pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29uZmlnL21pZGRsZXdhcmUvcmVxdWVzdC1sb2dnaW5nLW1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsNkJBSWU7QUFFZixNQUFNLCtCQUErQjtJQUduQyxZQUFZLE1BQXFCLEVBQUUsU0FBaUI7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQTRCO1FBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUU7U0FDM0IsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELGFBQWEsQ0FBQyxPQUEwQjtRQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2IsS0FBSyxFQUFFLGVBQWU7WUFDdEIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLFdBQVcsRUFBRSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3BDLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRTtTQUN6QixDQUFDLENBQ0gsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsa0JBQWtCLENBQ2hCLFFBQTRCO1FBRTVCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixHQUFHLFFBQVEsQ0FBQyxZQUFZLEVBQUU7U0FDM0IsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGNBQWMsQ0FDWixRQUFrQzs7UUFFbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNiLEtBQUssRUFBRSxnQkFBZ0I7WUFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLEdBQUcsTUFBQSxRQUFRLGFBQVIsUUFBUSx1QkFBUixRQUFRLENBQUUsWUFBWSwwQ0FBRSxRQUFRLEVBQUU7U0FDdEMsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQXdCO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixLQUFLLEVBQUUsa0JBQWtCO1lBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRTtTQUN0QixDQUFDLENBQ0gsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFhLHdCQUF3QjtJQUduQyxZQUNFLGdCQUFzQyxJQUFJLCtCQUEyQixFQUFFO1FBRXZFLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixPQUFPLElBQUksK0JBQStCLENBQ3hDLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FDOUIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWpCRCw0REFpQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBNaWRkbGV3YXJlLFxuICBNaWRkbGV3YXJlTWVzc2FnZSxcbiAgTWlkZGxld2FyZU1ldGFkYXRhLFxuICBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIsXG4gIE1pZGRsZXdhcmVTdGF0dXMsXG59IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQge1xuICBEZWZhdWx0TW9tZW50b0xvZ2dlckZhY3RvcnksXG4gIE1vbWVudG9Mb2dnZXIsXG4gIE1vbWVudG9Mb2dnZXJGYWN0b3J5LFxufSBmcm9tICcuLi8uLic7XG5cbmNsYXNzIExvZ2dpbmdNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIgaW1wbGVtZW50cyBNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0SWQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IobG9nZ2VyOiBNb21lbnRvTG9nZ2VyLCByZXF1ZXN0SWQ6IHN0cmluZykge1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIHRoaXMucmVxdWVzdElkID0gcmVxdWVzdElkO1xuICB9XG5cbiAgb25SZXF1ZXN0TWV0YWRhdGEobWV0YWRhdGE6IE1pZGRsZXdhcmVNZXRhZGF0YSk6IFByb21pc2U8TWlkZGxld2FyZU1ldGFkYXRhPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZXZlbnQ6ICdvblJlcXVlc3RNZXRhZGF0YScsXG4gICAgICAgIHJlcXVlc3RJZDogdGhpcy5yZXF1ZXN0SWQsXG4gICAgICAgIC4uLm1ldGFkYXRhLnRvSnNvbk9iamVjdCgpLFxuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWV0YWRhdGEpO1xuICB9XG4gIG9uUmVxdWVzdEJvZHkocmVxdWVzdDogTWlkZGxld2FyZU1lc3NhZ2UpOiBQcm9taXNlPE1pZGRsZXdhcmVNZXNzYWdlPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZXZlbnQ6ICdvblJlcXVlc3RCb2R5JyxcbiAgICAgICAgcmVxdWVzdElkOiB0aGlzLnJlcXVlc3RJZCxcbiAgICAgICAgcmVxdWVzdFNpemU6IHJlcXVlc3QubWVzc2FnZUxlbmd0aCgpLFxuICAgICAgICAuLi5yZXF1ZXN0LnRvTG9nRm9ybWF0KCksXG4gICAgICB9KVxuICAgICk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXF1ZXN0KTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VNZXRhZGF0YShcbiAgICBtZXRhZGF0YTogTWlkZGxld2FyZU1ldGFkYXRhXG4gICk6IFByb21pc2U8TWlkZGxld2FyZU1ldGFkYXRhPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZXZlbnQ6ICdvblJlc3BvbnNlTWV0YWRhdGEnLFxuICAgICAgICByZXF1ZXN0SWQ6IHRoaXMucmVxdWVzdElkLFxuICAgICAgICAuLi5tZXRhZGF0YS50b0pzb25PYmplY3QoKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1ldGFkYXRhKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VCb2R5KFxuICAgIHJlc3BvbnNlOiBNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGxcbiAgKTogUHJvbWlzZTxNaWRkbGV3YXJlTWVzc2FnZSB8IG51bGw+IHtcbiAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBldmVudDogJ29uUmVzcG9uc2VCb2R5JyxcbiAgICAgICAgcmVxdWVzdElkOiB0aGlzLnJlcXVlc3RJZCxcbiAgICAgICAgLi4ucmVzcG9uc2U/Ll9ncnBjTWVzc2FnZT8udG9PYmplY3QoKSxcbiAgICAgIH0pXG4gICAgKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIG9uUmVzcG9uc2VTdGF0dXMoc3RhdHVzOiBNaWRkbGV3YXJlU3RhdHVzKTogUHJvbWlzZTxNaWRkbGV3YXJlU3RhdHVzPiB7XG4gICAgdGhpcy5sb2dnZXIuaW5mbyhcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZXZlbnQ6ICdvblJlc3BvbnNlU3RhdHVzJyxcbiAgICAgICAgcmVxdWVzdElkOiB0aGlzLnJlcXVlc3RJZCxcbiAgICAgICAgc3RhdHVzOiBzdGF0dXMuY29kZSgpLFxuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhdHVzKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgbWlkZGxld2FyZSBpbXBsZW1lbnRzIHBlci1yZXF1ZXN0IGxvZ2dpbmcgd2hpY2ggY2FuIGJlIHVzZWQgZm9yXG4gKiBkZWJ1Z2dpbmcuXG4gKlxuICogV0FSTklORzogZW5hYmxpbmcgdGhpcyBtaWRkbGV3YXJlIG1heSBoYXZlIG1pbm9yIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucyxcbiAqIHNvIGVuYWJsZSB3aXRoIGNhdXRpb24uXG4gKlxuICogSW4gb3JkZXIgZm9yIHRoaXMgbWlkZGxld2FyZSB0byBwcm9kdWNlIG91dHB1dCB5b3Ugd2lsbCBuZWVkIHRvIGhhdmVcbiAqIHNldCB1cCB5b3VyIHtDb25maWd1cmF0aW9ufSB3aXRoIGEge01vbWVudG9Mb2dnZXJGYWN0b3J5fSBpbnN0YW5jZSB0aGF0XG4gKiBpcyBjb25maWd1cmVkIHRvIGxvZyBhdCBERUJVRyBsZXZlbCBvciBsb3dlci4gIFNlZSBgYWR2YW5jZWQudHNgIGluIHRoZVxuICogZXhhbXBsZXMgZGlyZWN0b3J5IGZvciBhbiBleGFtcGxlIG9mIGhvdyB0byBzZXQgdXAgeW91ciB7Q29uZmlndXJhdGlvbn0gdG9cbiAqIGVuYWJsZSB0aGlzIG1pZGRsZXdhcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0TG9nZ2luZ01pZGRsZXdhcmUgaW1wbGVtZW50cyBNaWRkbGV3YXJlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXI6IE1vbWVudG9Mb2dnZXI7XG4gIHByaXZhdGUgbmV4dFJlcXVlc3RJZDogbnVtYmVyO1xuICBjb25zdHJ1Y3RvcihcbiAgICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeSA9IG5ldyBEZWZhdWx0TW9tZW50b0xvZ2dlckZhY3RvcnkoKVxuICApIHtcbiAgICB0aGlzLmxvZ2dlciA9IGxvZ2dlckZhY3RvcnkuZ2V0TG9nZ2VyKHRoaXMpO1xuICAgIHRoaXMubmV4dFJlcXVlc3RJZCA9IDA7XG4gIH1cblxuICBvbk5ld1JlcXVlc3QoKTogTWlkZGxld2FyZVJlcXVlc3RIYW5kbGVyIHtcbiAgICB0aGlzLm5leHRSZXF1ZXN0SWQrKztcbiAgICByZXR1cm4gbmV3IExvZ2dpbmdNaWRkbGV3YXJlUmVxdWVzdEhhbmRsZXIoXG4gICAgICB0aGlzLmxvZ2dlcixcbiAgICAgIHRoaXMubmV4dFJlcXVlc3RJZC50b1N0cmluZygpXG4gICAgKTtcbiAgfVxufVxuIl19