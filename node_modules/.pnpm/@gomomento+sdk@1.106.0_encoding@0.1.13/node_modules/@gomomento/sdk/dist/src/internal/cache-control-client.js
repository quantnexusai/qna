"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheControlClient = void 0;
const generated_types_1 = require("@gomomento/generated-types");
var grpcControl = generated_types_1.control.control_client;
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const grpc_js_1 = require("@grpc/grpc-js");
const __1 = require("..");
const package_json_1 = require("../../package.json");
const idle_grpc_client_wrapper_1 = require("./grpc/idle-grpc-client-wrapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const retry_interceptor_1 = require("./grpc/retry-interceptor");
const utils_2 = require("@gomomento/sdk-core/dist/src/utils");
class CacheControlClient {
    /**
     * @param {ControlClientProps} props
     */
    constructor(props) {
        this.logger = props.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(props.configuration.getThrowOnErrors());
        const headers = [
            new headers_interceptor_1.Header('Authorization', props.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('agent', `nodejs:cache:${package_json_1.version}`),
            new headers_interceptor_1.Header('runtime-version', `nodejs:${process.versions.node}`),
        ];
        this.interceptors = [
            headers_interceptor_1.HeaderInterceptor.createHeadersInterceptor(headers),
            retry_interceptor_1.RetryInterceptor.createRetryInterceptor({
                clientName: 'CacheControlClient',
                loggerFactory: props.configuration.getLoggerFactory(),
                overallRequestTimeoutMs: CacheControlClient.REQUEST_TIMEOUT_MS,
            }),
        ];
        this.logger.debug(`Creating control client using endpoint: '${props.credentialProvider.getControlEndpoint()}`);
        this.clientWrapper = new idle_grpc_client_wrapper_1.IdleGrpcClientWrapper({
            clientFactoryFn: () => new grpcControl.ScsControlClient(props.credentialProvider.getControlEndpoint(), props.credentialProvider.isControlEndpointSecure()
                ? grpc_js_1.ChannelCredentials.createSsl()
                : grpc_js_1.ChannelCredentials.createInsecure()),
            loggerFactory: props.configuration.getLoggerFactory(),
            maxIdleMillis: props.configuration
                .getTransportStrategy()
                .getMaxIdleMillis(),
        });
    }
    close() {
        this.logger.debug('Closing cache control client');
        this.clientWrapper.getClient().close();
    }
    async createCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CreateCache.Error(err));
        }
        this.logger.debug(`Creating cache: ${name}`);
        const request = new grpcControl._CreateCacheRequest({
            cache_name: name,
        });
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .CreateCache(request, { interceptors: this.interceptors }, (err, _resp) => {
                if (err) {
                    const sdkError = this.cacheServiceErrorMapper.convertError(err);
                    if (sdkError.errorCode() ===
                        __1.MomentoErrorCode.CACHE_ALREADY_EXISTS_ERROR) {
                        resolve(new __1.CreateCache.AlreadyExists());
                    }
                    else {
                        this.cacheServiceErrorMapper.resolveOrRejectError({
                            err: err,
                            errorResponseFactoryFn: e => new __1.CreateCache.Error(e),
                            resolveFn: resolve,
                            rejectFn: reject,
                        });
                    }
                }
                else {
                    resolve(new __1.CreateCache.Success());
                }
            });
        });
    }
    async deleteCache(name) {
        try {
            (0, utils_1.validateCacheName)(name);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.DeleteCache.Error(err));
        }
        const request = new grpcControl._DeleteCacheRequest({
            cache_name: name,
        });
        this.logger.debug(`Deleting cache: ${name}`);
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .DeleteCache(request, { interceptors: this.interceptors }, (err, _resp) => {
                if (err) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.DeleteCache.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    resolve(new __1.DeleteCache.Success());
                }
            });
        });
    }
    async flushCache(cacheName) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new __1.CacheFlush.Error(err));
        }
        this.logger.debug(`Flushing cache: ${cacheName}`);
        return await this.sendFlushCache(cacheName);
    }
    async sendFlushCache(cacheName) {
        const request = new grpcControl._FlushCacheRequest({
            cache_name: cacheName,
        });
        return await new Promise((resolve, reject) => {
            this.clientWrapper.getClient().FlushCache(request, {
                interceptors: this.interceptors,
            }, (err, resp) => {
                if (resp) {
                    resolve(new __1.CacheFlush.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.CacheFlush.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async listCaches() {
        const request = new grpcControl._ListCachesRequest();
        request.next_token = '';
        this.logger.debug("Issuing 'listCaches' request");
        return await new Promise((resolve, reject) => {
            this.clientWrapper
                .getClient()
                .ListCaches(request, { interceptors: this.interceptors }, (err, resp) => {
                if (err || !resp) {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new __1.ListCaches.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
                else {
                    const caches = resp.cache.map(cache => {
                        var _a, _b, _c, _d, _e, _f, _g;
                        const cacheName = cache.cache_name;
                        const topicLimits = {
                            maxPublishMessageSizeKb: ((_a = cache.topic_limits) === null || _a === void 0 ? void 0 : _a.max_publish_message_size_kb) || 0,
                            maxSubscriptionCount: ((_b = cache.topic_limits) === null || _b === void 0 ? void 0 : _b.max_subscription_count) || 0,
                            maxPublishRate: ((_c = cache.topic_limits) === null || _c === void 0 ? void 0 : _c.max_publish_rate) || 0,
                        };
                        const cacheLimits = {
                            maxTtlSeconds: ((_d = cache.cache_limits) === null || _d === void 0 ? void 0 : _d.max_ttl_seconds) || 0,
                            maxItemSizeKb: ((_e = cache.cache_limits) === null || _e === void 0 ? void 0 : _e.max_item_size_kb) || 0,
                            maxThroughputKbps: ((_f = cache.cache_limits) === null || _f === void 0 ? void 0 : _f.max_throughput_kbps) || 0,
                            maxTrafficRate: ((_g = cache.cache_limits) === null || _g === void 0 ? void 0 : _g.max_traffic_rate) || 0,
                        };
                        return new __1.CacheInfo(cacheName, topicLimits, cacheLimits);
                    });
                    resolve(new __1.ListCaches.Success(caches));
                }
            });
        });
    }
}
exports.CacheControlClient = CacheControlClient;
CacheControlClient.REQUEST_TIMEOUT_MS = (0, utils_2.secondsToMilliseconds)(60);
//# sourceMappingURL=data:application/json;base64,