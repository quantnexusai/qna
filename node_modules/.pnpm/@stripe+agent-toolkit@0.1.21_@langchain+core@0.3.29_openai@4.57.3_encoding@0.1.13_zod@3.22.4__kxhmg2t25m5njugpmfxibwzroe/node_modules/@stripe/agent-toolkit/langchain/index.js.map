{"version":3,"sources":["../src/langchain/index.ts","../src/langchain/tool.ts","../src/shared/api.ts","../src/shared/functions.ts","../src/shared/prompts.ts","../src/shared/parameters.ts","../src/shared/tools.ts","../src/shared/configuration.ts","../src/langchain/toolkit.ts"],"sourcesContent":["import StripeAgentToolkit from './toolkit';\nexport {StripeAgentToolkit};\n","import {z} from 'zod';\nimport {StructuredTool} from '@langchain/core/tools';\nimport {CallbackManagerForToolRun} from '@langchain/core/callbacks/manager';\nimport {RunnableConfig} from '@langchain/core/runnables';\nimport StripeAPI from '../shared/api';\n\nclass StripeTool extends StructuredTool {\n  stripeAPI: StripeAPI;\n\n  method: string;\n\n  name: string;\n\n  description: string;\n\n  schema: z.ZodObject<any, any, any, any>;\n\n  constructor(\n    StripeAPI: StripeAPI,\n    method: string,\n    description: string,\n    schema: z.ZodObject<any, any, any, any, {[x: string]: any}>\n  ) {\n    super();\n\n    this.stripeAPI = StripeAPI;\n    this.method = method;\n    this.name = method;\n    this.description = description;\n    this.schema = schema;\n  }\n\n  _call(\n    arg: z.output<typeof this.schema>,\n    _runManager?: CallbackManagerForToolRun,\n    _parentConfig?: RunnableConfig\n  ): Promise<any> {\n    return this.stripeAPI.run(this.method, arg);\n  }\n}\n\nexport default StripeTool;\n","import Stripe from 'stripe';\nimport {\n  createCustomer,\n  listCustomers,\n  createProduct,\n  listProducts,\n  createPrice,\n  listPrices,\n  createPaymentLink,\n  createInvoice,\n  createInvoiceItem,\n  finalizeInvoice,\n  retrieveBalance,\n} from './functions';\n\nclass StripeAPI {\n  stripe: Stripe;\n\n  constructor(secretKey: string) {\n    const stripeClient = new Stripe(secretKey, {\n      appInfo: {\n        name: 'stripe-agent-toolkit-typescript',\n        version: '0.1.21',\n        url: 'https://github.com/stripe/agent-toolkit',\n      },\n    });\n    this.stripe = stripeClient;\n  }\n\n  async createMeterEvent({\n    event,\n    customer,\n    value,\n  }: {\n    event: string;\n    customer: string;\n    value: string;\n  }) {\n    await this.stripe.billing.meterEvents.create({\n      event_name: event,\n      payload: {\n        stripe_customer_id: customer,\n        value: value,\n      },\n    });\n  }\n\n  async run(method: string, arg: any) {\n    if (method === 'create_customer') {\n      const output = JSON.stringify(await createCustomer(this.stripe, arg));\n      return output;\n    } else if (method === 'list_customers') {\n      const output = JSON.stringify(await listCustomers(this.stripe, arg));\n      return output;\n    } else if (method === 'create_product') {\n      const output = JSON.stringify(await createProduct(this.stripe, arg));\n      return output;\n    } else if (method === 'list_products') {\n      const output = JSON.stringify(await listProducts(this.stripe, arg));\n      return output;\n    } else if (method === 'create_price') {\n      const output = JSON.stringify(await createPrice(this.stripe, arg));\n      return output;\n    } else if (method === 'list_prices') {\n      const output = JSON.stringify(await listPrices(this.stripe, arg));\n      return output;\n    } else if (method === 'create_payment_link') {\n      const output = JSON.stringify(await createPaymentLink(this.stripe, arg));\n      return output;\n    } else if (method === 'create_invoice') {\n      const output = JSON.stringify(await createInvoice(this.stripe, arg));\n      return output;\n    } else if (method === 'create_invoice_item') {\n      const output = JSON.stringify(await createInvoiceItem(this.stripe, arg));\n      return output;\n    } else if (method === 'finalize_invoice') {\n      const output = JSON.stringify(await finalizeInvoice(this.stripe, arg));\n      return output;\n    } else if (method === 'retrieve_balance') {\n      const output = JSON.stringify(await retrieveBalance(this.stripe, arg));\n      return output;\n    } else {\n      throw new Error('Invalid method ' + method);\n    }\n  }\n}\n\nexport default StripeAPI;\n","import Stripe from 'stripe';\nimport {z} from 'zod';\nimport {\n  createCustomerParameters,\n  listCustomersParameters,\n  createProductParameters,\n  listProductsParameters,\n  createPriceParameters,\n  listPricesParameters,\n  createPaymentLinkParameters,\n  createInvoiceParameters,\n  createInvoiceItemParameters,\n  finalizeInvoiceParameters,\n  retrieveBalanceParameters,\n} from './parameters';\n\nexport const createCustomer = async (\n  stripe: Stripe,\n  params: z.infer<typeof createCustomerParameters>\n) => {\n  try {\n    const customer = await stripe.customers.create(params);\n    return {id: customer.id};\n  } catch (error) {\n    return 'Failed to create customer';\n  }\n};\n\nexport const listCustomers = async (\n  stripe: Stripe,\n  params: z.infer<typeof listCustomersParameters>\n) => {\n  try {\n    const customers = await stripe.customers.list(params);\n    return customers.data.map((customer) => ({id: customer.id}));\n  } catch (error) {\n    return 'Failed to list customers';\n  }\n};\n\nexport const createProduct = async (\n  stripe: Stripe,\n  params: z.infer<typeof createProductParameters>\n) => {\n  try {\n    const product = await stripe.products.create(params);\n    return product;\n  } catch (error) {\n    return 'Failed to create product';\n  }\n};\n\nexport const listProducts = async (\n  stripe: Stripe,\n  params: z.infer<typeof listProductsParameters>\n) => {\n  try {\n    const products = await stripe.products.list(params);\n    return products.data;\n  } catch (error) {\n    return 'Failed to list products';\n  }\n};\n\nexport const createPrice = async (\n  stripe: Stripe,\n  params: z.infer<typeof createPriceParameters>\n) => {\n  try {\n    const price = await stripe.prices.create(params);\n    return price;\n  } catch (error) {\n    return 'Failed to create price';\n  }\n};\n\nexport const listPrices = async (\n  stripe: Stripe,\n  params: z.infer<typeof listPricesParameters>\n) => {\n  try {\n    const prices = await stripe.prices.list(params);\n    return prices.data;\n  } catch (error) {\n    return 'Failed to list prices';\n  }\n};\n\nexport const createPaymentLink = async (\n  stripe: Stripe,\n  params: z.infer<typeof createPaymentLinkParameters>\n) => {\n  try {\n    const paymentLink = await stripe.paymentLinks.create({\n      line_items: [params],\n    });\n    return {id: paymentLink.id, url: paymentLink.url};\n  } catch (error) {\n    return 'Failed to create payment link';\n  }\n};\n\nexport const createInvoice = async (\n  stripe: Stripe,\n  params: z.infer<typeof createInvoiceParameters>\n) => {\n  try {\n    const invoice = await stripe.invoices.create(params);\n    return {\n      id: invoice.id,\n      url: invoice.hosted_invoice_url,\n      customer: invoice.customer,\n      status: invoice.status,\n    };\n  } catch (error) {\n    return 'Failed to create invoice';\n  }\n};\n\nexport const createInvoiceItem = async (\n  stripe: Stripe,\n  params: z.infer<typeof createInvoiceItemParameters>\n) => {\n  try {\n    const invoiceItem = await stripe.invoiceItems.create(params);\n    return {\n      id: invoiceItem.id,\n      invoice: invoiceItem.invoice,\n    };\n  } catch (error) {\n    return 'Failed to create invoice item';\n  }\n};\n\nexport const finalizeInvoice = async (\n  stripe: Stripe,\n  params: z.infer<typeof finalizeInvoiceParameters>\n) => {\n  try {\n    const invoice = await stripe.invoices.finalizeInvoice(params.invoice);\n    return {\n      id: invoice.id,\n      url: invoice.hosted_invoice_url,\n      customer: invoice.customer,\n      status: invoice.status,\n    };\n  } catch (error) {\n    return 'Failed to finalize invoice';\n  }\n};\n\nexport const retrieveBalance = async (\n  stripe: Stripe,\n  params: z.infer<typeof retrieveBalanceParameters>\n) => {\n  try {\n    const balance = await stripe.balance.retrieve(params);\n    return balance;\n  } catch (error) {\n    return 'Failed to retrieve balance';\n  }\n};\n","export const createCustomerPrompt = `\nThis tool will create a customer in Stripe.\n\nIt takes two arguments:\n- name (str): The name of the customer.\n- email (str, optional): The email of the customer.\n`;\n\nexport const listCustomersPrompt = `\nThis tool will fetch a list of Customers from Stripe.\n\nIt takes no input.\n`;\n\nexport const createProductPrompt = `\nThis tool will create a product in Stripe.\n\nIt takes two arguments:\n- name (str): The name of the product.\n- description (str, optional): The description of the product.\n`;\n\nexport const listProductsPrompt = `\nThis tool will fetch a list of Products from Stripe.\n\nIt takes one optional argument:\n- limit (int, optional): The number of products to return.\n`;\n\nexport const createPricePrompt = `\nThis tool will create a price in Stripe. If a product has not already been specified, a product should be created first.\n\nIt takes three arguments:\n- product (str): The ID of the product to create the price for.\n- unit_amount (int): The unit amount of the price in cents.\n- currency (str): The currency of the price.\n`;\n\nexport const listPricesPrompt = `\nThis tool will fetch a list of Prices from Stripe.\n\nIt takes two arguments.\n- product (str, optional): The ID of the product to list prices for.\n- limit (int, optional): The number of prices to return.\n`;\n\nexport const createPaymentLinkPrompt = `\nThis tool will create a payment link in Stripe.\n\nIt takes two arguments:\n- price (str): The ID of the price to create the payment link for.\n- quantity (int): The quantity of the product to include in the payment link.\n`;\n\nexport const createInvoicePrompt = `\nThis tool will create an invoice in Stripe.\n\nIt takes one argument:\n- customer (str): The ID of the customer to create the invoice for.\n`;\n\nexport const createInvoiceItemPrompt = `\nThis tool will create an invoice item in Stripe.\n\nIt takes two arguments:\n- customer (str): The ID of the customer to create the invoice item for.\n- price (str): The ID of the price to create the invoice item for.\n`;\n\nexport const finalizeInvoicePrompt = `\nThis tool will finalize an invoice in Stripe.\n\nIt takes one argument:\n- invoice (str): The ID of the invoice to finalize.\n`;\n\nexport const retrieveBalancePrompt = `\nThis tool will retrieve the balance from Stripe. It takes no input.\n`;\n","import {z} from 'zod';\n\nexport const createCustomerParameters = z.object({\n  name: z.string().describe('The name of the customer'),\n  email: z.string().email().optional().describe('The email of the customer'),\n});\n\nexport const listCustomersParameters = z.object({\n  limit: z\n    .number()\n    .int()\n    .min(1)\n    .max(100)\n    .optional()\n    .describe(\n      'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n    ),\n  email: z\n    .string()\n    .optional()\n    .describe(\n      \"A case-sensitive filter on the list based on the customer's email field. The value must be a string.\"\n    ),\n});\n\nexport const createProductParameters = z.object({\n  name: z.string().describe('The name of the product.'),\n  description: z\n    .string()\n    .optional()\n    .describe('The description of the product.'),\n});\n\nexport const listProductsParameters = z.object({\n  limit: z\n    .number()\n    .int()\n    .min(1)\n    .max(100)\n    .optional()\n    .describe(\n      'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n    ),\n});\n\nexport const createPriceParameters = z.object({\n  product: z\n    .string()\n    .describe('The ID of the product to create the price for.'),\n  unit_amount: z\n    .number()\n    .int()\n    .describe('The unit amount of the price in cents.'),\n  currency: z.string().describe('The currency of the price.'),\n});\n\nexport const listPricesParameters = z.object({\n  product: z\n    .string()\n    .optional()\n    .describe('The ID of the product to list prices for.'),\n  limit: z\n    .number()\n    .int()\n    .min(1)\n    .max(100)\n    .optional()\n    .describe(\n      'A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.'\n    ),\n});\n\nexport const createPaymentLinkParameters = z.object({\n  price: z\n    .string()\n    .describe('The ID of the price to create the payment link for.'),\n  quantity: z\n    .number()\n    .int()\n    .describe('The quantity of the product to include.'),\n});\n\nexport const createInvoiceParameters = z.object({\n  customer: z\n    .string()\n    .describe('The ID of the customer to create the invoice for.'),\n  days_until_due: z\n    .number()\n    .int()\n    .optional()\n    .describe('The number of days until the invoice is due.'),\n});\n\nexport const createInvoiceItemParameters = z.object({\n  customer: z\n    .string()\n    .describe('The ID of the customer to create the invoice item for.'),\n  price: z.string().describe('The ID of the price for the item.'),\n  invoice: z.string().describe('The ID of the invoice to create the item for.'),\n});\n\nexport const finalizeInvoiceParameters = z.object({\n  invoice: z.string().describe('The ID of the invoice to finalize.'),\n});\n\nexport const retrieveBalanceParameters = z.object({});\n","import {\n  createCustomerPrompt,\n  listCustomersPrompt,\n  createProductPrompt,\n  listProductsPrompt,\n  createPricePrompt,\n  listPricesPrompt,\n  createPaymentLinkPrompt,\n  createInvoicePrompt,\n  createInvoiceItemPrompt,\n  finalizeInvoicePrompt,\n  retrieveBalancePrompt,\n} from './prompts';\n\nimport {\n  createCustomerParameters,\n  listCustomersParameters,\n  createProductParameters,\n  listProductsParameters,\n  createPriceParameters,\n  listPricesParameters,\n  createPaymentLinkParameters,\n  createInvoiceParameters,\n  createInvoiceItemParameters,\n  finalizeInvoiceParameters,\n  retrieveBalanceParameters,\n} from './parameters';\n\nexport type Tool = {\n  method: string;\n  name: string;\n  description: string;\n  parameters: any;\n  actions: {\n    [key: string]: {\n      [action: string]: boolean;\n    };\n  };\n};\n\nconst tools: Tool[] = [\n  {\n    method: 'create_customer',\n    name: 'Create Customer',\n    description: createCustomerPrompt,\n    parameters: createCustomerParameters,\n    actions: {\n      customers: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_customers',\n    name: 'List Customers',\n    description: listCustomersPrompt,\n    parameters: listCustomersParameters,\n    actions: {\n      customers: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_product',\n    name: 'Create Product',\n    description: createProductPrompt,\n    parameters: createProductParameters,\n    actions: {\n      products: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_products',\n    name: 'List Products',\n    description: listProductsPrompt,\n    parameters: listProductsParameters,\n    actions: {\n      products: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_price',\n    name: 'Create Price',\n    description: createPricePrompt,\n    parameters: createPriceParameters,\n    actions: {\n      prices: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'list_prices',\n    name: 'List Prices',\n    description: listPricesPrompt,\n    parameters: listPricesParameters,\n    actions: {\n      prices: {\n        read: true,\n      },\n    },\n  },\n  {\n    method: 'create_payment_link',\n    name: 'Create Payment Link',\n    description: createPaymentLinkPrompt,\n    parameters: createPaymentLinkParameters,\n    actions: {\n      paymentLinks: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'create_invoice',\n    name: 'Create Invoice',\n    description: createInvoicePrompt,\n    parameters: createInvoiceParameters,\n    actions: {\n      invoices: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'create_invoice_item',\n    name: 'Create Invoice Item',\n    description: createInvoiceItemPrompt,\n    parameters: createInvoiceItemParameters,\n    actions: {\n      invoiceItems: {\n        create: true,\n      },\n    },\n  },\n  {\n    method: 'finalize_invoice',\n    name: 'Finalize Invoice',\n    description: finalizeInvoicePrompt,\n    parameters: finalizeInvoiceParameters,\n    actions: {\n      invoices: {\n        update: true,\n      },\n    },\n  },\n  {\n    method: 'retrieve_balance',\n    name: 'Retrieve Balance',\n    description: retrieveBalancePrompt,\n    parameters: retrieveBalanceParameters,\n    actions: {\n      balance: {\n        read: true,\n      },\n    },\n  },\n];\n\nexport default tools;\n","import type {Tool} from './tools';\n\n// Actions restrict the subset of API calls that can be made. They should\n// be used in conjunction with Restricted API Keys. Setting a permission to false\n// prevents the related \"tool\" from being considered.\nexport type Object =\n  | 'customers'\n  | 'invoices'\n  | 'invoiceItems'\n  | 'paymentLinks'\n  | 'products'\n  | 'prices'\n  | 'balance';\n\nexport type Permission = 'create' | 'update' | 'read';\n\nexport type Actions = {\n  [K in Object]?: {\n    [K in Permission]?: boolean;\n  };\n} & {\n  balance?: {\n    read?: boolean;\n  };\n};\n\n// Configuration provides various settings and options for the integration\n// to tune and manage how it behaves.\nexport type Configuration = {\n  actions?: Actions;\n};\n\nexport const isToolAllowed = (\n  tool: Tool,\n  configuration: Configuration\n): boolean => {\n  return Object.keys(tool.actions).every((resource) => {\n    // For each resource.permission pair, check the configuration.\n    // @ts-ignore\n    const permissions = tool.actions[resource];\n\n    return Object.keys(permissions).every((permission) => {\n      // @ts-ignore\n      return configuration.actions[resource]?.[permission] === true;\n    });\n  });\n};\n","import {BaseToolkit} from '@langchain/core/tools';\nimport StripeTool from './tool';\nimport StripeAPI from '../shared/api';\nimport tools from '../shared/tools';\nimport {isToolAllowed, type Configuration} from '../shared/configuration';\n\nclass StripeAgentToolkit implements BaseToolkit {\n  private _stripe: StripeAPI;\n\n  tools: StripeTool[];\n\n  constructor({\n    secretKey,\n    configuration,\n  }: {\n    secretKey: string;\n    configuration: Configuration;\n  }) {\n    this._stripe = new StripeAPI(secretKey);\n\n    const filteredTools = tools.filter((tool) =>\n      isToolAllowed(tool, configuration)\n    );\n\n    this.tools = filteredTools.map(\n      (tool) =>\n        new StripeTool(\n          this._stripe,\n          tool.method,\n          tool.description,\n          tool.parameters\n        )\n    );\n  }\n\n  getTools(): StripeTool[] {\n    return this.tools;\n  }\n}\n\nexport default StripeAgentToolkit;\n"],"mappings":"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","names":["StripeAPI","Stripe"]}