import * as axios from 'axios';
import { z } from 'zod';

/**
 * Member information
 */
type MemberInfoResDTO = {
    id: string;
    projectId: string;
    email: string;
    name: string;
    role: string;
    metadata?: unknown;
    createdAt: string;
    updatedAt: string;
    deletedAt?: string;
};
type DeleteRowAPIDTO = {
    /**
     * Status of the delete operation
     */
    status: string;
    /**
     * Number of records deleted
     */
    count: number;
};
type SingleAppInfoResDTO = {
    /**
     * The unique identifier for the app
     */
    appId: string;
    /**
     * The key of the app
     */
    key: string;
    /**
     * The name of the app
     */
    name: string;
    /**
     * The description of the app
     */
    description: string;
    /**
     * The logo of the app
     */
    logo?: string;
    /**
     * The categories of the app
     */
    categories?: Array<string>;
    /**
     * The path of the app
     */
    path?: string;
    /**
     * The documentation URL of the app
     */
    docs?: string;
    /**
     * The configuration documentation text of the app
     */
    configuration_docs_text?: string;
    /**
     * The status of the app
     */
    status?: string;
    /**
     * The documentation text of the app
     */
    documentation_doc_text?: string;
    /**
     * The test connectors of the app
     */
    testConnectors?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Indicates if the app has no authentication
     */
    no_auth?: boolean;
    /**
     * The authentication schemes of the app
     */
    auth_schemes?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * The metadata of the app
     */
    meta?: unknown;
    /**
     * The yaml of the app
     */
    yaml?: unknown;
};
type AppInfoResponseDto = {
    /**
     * The ID of the app
     */
    appId: string;
    /**
     * The key of the app
     */
    key: string;
    /**
     * The name of the app
     */
    name: string;
    /**
     * The description of the app
     */
    description: string;
    /**
     * The logo of the app
     */
    logo: string;
    /**
     * The categories of the app
     */
    categories: string;
    /**
     * The tags of the app
     */
    tags?: string;
    /**
     * The authentication schemes of the app
     */
    auth_schemes?: unknown;
    /**
     * Indicates if the app is enabled
     */
    enabled: boolean;
    /**
     * Indicates if the app has no authentication
     */
    no_auth?: boolean;
};
type ExpectedInputFieldsDTO = {
    /**
     * Name of the field
     */
    name: string;
    /**
     * Type of the field
     */
    type: string;
    /**
     * Description of the field
     */
    description: string;
    /**
     * Display name of the field
     */
    display_name: string;
    /**
     * Default value of the field
     */
    default: {
        [key: string]: unknown;
    };
    /**
     * Whether the field is required
     */
    required: boolean;
    /**
     * Whether the field is expected from customer
     */
    expected_from_customer: boolean;
    /**
     * Whether the field is a secret
     */
    is_secret: boolean;
};
type GetConnectorInfoResDTO = {
    /**
     * Unique identifier of the connector
     */
    id?: string;
    /**
     * Authentication scheme used by the connector
     */
    authScheme?: string;
    /**
     * Name of the connector
     */
    name?: string;
    /**
     * Creation date of the connector
     */
    createdAt?: string;
    /**
     * Last update date of the connector
     */
    updatedAt?: string;
    /**
     * Flag to indicate if the connector is currently enabled
     */
    enabled: boolean;
    /**
     * Flag to indicate if the connector has been deleted
     */
    deleted?: boolean;
    /**
     * Application ID associated with the connector
     */
    appId: string;
    /**
     * Default connector ID if one exists
     */
    defaultConnectorId?: string;
    /**
     * Authentication configuration with sensitive data obscured
     */
    authConfig: {
        [key: string]: unknown;
    };
    /**
     * List of required fields expected from the customer
     */
    expectedInputFields: Array<ExpectedInputFieldsDTO>;
    /**
     * Logo URL of the application associated with the connector
     */
    logo: string;
    /**
     * Name of the application associated with the connector
     */
    appName: string;
    /**
     * Flag to indicate if Composio authentication is used
     */
    useComposioAuth: boolean;
};
type GetConnectorListResDTO = {
    items: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Total number of pages available
     */
    totalPages: number;
    /**
     * Current page number
     */
    page: number;
};
type ConnectionParams = {
    integrationId: string;
    connectionParams?: {
        [key: string]: unknown;
    };
    isDisabled: boolean;
    invocationCount: number;
    id: string;
    clientUniqueUserId?: string;
    status: string;
    data?: {
        [key: string]: unknown;
    };
    deleted?: boolean;
    enabled?: boolean;
    createdAt: string;
    updatedAt: string;
    appUniqueId: string;
    appName: string;
    logo?: string;
    authConfig?: {
        [key: string]: unknown;
    };
    member: {
        [key: string]: unknown;
    };
    labels?: Array<string>;
};
type Meta = {
    app: {
        [key: string]: unknown;
    };
};
type ConnectedAccountResponseDTO = {
    integrationId: string;
    appUniqueId: string;
    memberInfo?: MemberInfoResDTO;
    meta?: Meta;
    isDisabled?: boolean;
    id: string;
    clientUniqueUserId: string;
    appName: string;
    entityId: string;
    status: string;
    enabled?: boolean;
    createdAt: string;
    updatedAt: string;
};
type GetConnectionsResponseDto = {
    items: Array<ConnectionParams>;
    totalPages: number;
    page: number;
};
type GetConnectionInfoResponseDTO = {
    base_url: string;
    parameters: Array<Parameter$1>;
    body: {
        [key: string]: unknown;
    };
};
type Parameter$1 = {
    /**
     * The name of the parameter. For example, 'x-api-key', 'Content-Type', etc.,
     */
    name: string;
    /**
     * The location of the parameter. Can be 'query' or 'header'.
     */
    in: "query" | "header";
    /**
     * The value of the parameter. For example, '1234567890', 'application/json', etc.,
     */
    value: string;
};
type InitiateConnectionPayloadDto = {
    data: {
        [key: string]: unknown;
    };
    integrationId: string;
    redirectUri?: string;
    userUuid?: string;
    entityId?: string;
    labels?: Array<string>;
};
type InitiateConnectionResponse = {
    connectionStatus: string;
    connectedAccountId: string;
    redirectUrl?: string;
};
type ActionExecutionResDto = {
    data: {
        [key: string]: unknown;
    };
    error?: string;
    successfull?: string;
};
type ActionProxyRequestConfigDTO = {
    /**
     * The connected account uuid to use for the action.
     */
    connectedAccountId: string;
    /**
     * The endpoint to call for the action. If the given url is relative, it will be resolved relative to the base_url set in the connected account info.
     */
    endpoint: string;
    /**
     * The HTTP method to use for the action.
     */
    method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
    parameters: Array<Parameter$1>;
    /**
     * The body to be sent to the endpoint. This can either be a JSON field or a string.
     */
    body?: {
        [key: string]: unknown;
    };
};
type ActionDetails = {
    parameters: {
        [key: string]: unknown;
    };
    response: {
        [key: string]: unknown;
    };
    appId?: string;
    appKey: string;
    appName: string;
    description: string;
    displayName: string;
    enabled: boolean;
    logo: string;
    name: string;
    tags: Array<string>;
    deprecated: boolean;
};
type ActionsListResponseDTO = {
    items: Array<ActionDetails>;
    page: number;
    totalPages: number;
};
type TriggerResDTO = {
    /**
     * Trigger name
     */
    name: string;
    /**
     * Trigger display name
     */
    display_name: string;
    /**
     * Trigger description
     */
    description?: string;
    /**
     * Is trigger enabled
     */
    enabled?: boolean;
    /**
     * Trigger configuration
     */
    config?: {
        [key: string]: unknown;
    };
    /**
     * Trigger payload
     */
    payload?: {
        [key: string]: unknown;
    };
    /**
     * Trigger logo URL
     */
    logo?: string;
    /**
     * Trigger count
     */
    count?: number;
    /**
     * App key
     */
    appKey: string;
    /**
     * App ID
     */
    appId: string;
    /**
     * App name
     */
    appName: string;
    /**
     * Trigger instructions
     */
    instructions?: string;
    /**
     * Trigger type
     */
    type?: string;
};
type DeleteConnectorData = {
    path: {
        integrationId: string;
    };
};
type GetConnectionsData = {
    query?: {
        appNames?: string;
        connectionId?: string;
        integrationId?: string;
        labels?: Array<string>;
        page?: number;
        pageSize?: number;
        showActiveOnly?: boolean;
        showDisabled?: boolean;
        status?: string;
        user_uuid?: string;
    };
};
type GetConnectionInfoData = {
    path: {
        connectedAccountId: string;
    };
};
type GetConnectionInfoResponse = GetConnectionInfoResponseDTO;
type ListTriggersData = {
    query?: {
        appNames?: string;
        connectedAccountIds?: string;
        integrationIds?: string;
        showEnabledOnly?: boolean;
        triggerIds?: string;
    };
};
type ListTriggersResponse = Array<TriggerResDTO>;
type GetActiveTriggersData = {
    query?: {
        connectedAccountIds?: string;
        integrationIds?: string;
        limit?: number;
        page?: number;
        showDisabled?: boolean;
        triggerIds?: string;
        triggerNames?: string;
    };
};

/**
 * Class representing the details required to initialize and configure the API client.
 */
declare class BackendClient {
    /**
     * The API key used for authenticating requests.
     */
    apiKey: string;
    /**
     * The base URL of the API against which requests will be made.
     */
    baseUrl: string;
    /**
     * The runtime environment where the client is being used.
     */
    runtime: string;
    /**
     * Creates an instance of apiClientDetails.
     * @param {string} apiKey - The API key for client initialization.
     * @param {string} baseUrl - The base URL for the API client.
     * @param {string} runtime - The runtime environment identifier.
     * @throws Will throw an error if the API key is not provided.
     */
    constructor(apiKey: string, baseUrl: string, runtime?: string);
    /**
     * Retrieves the client ID from the user's information.
     * @returns {Promise<string>} A promise that resolves to the client ID.
     * @throws Will throw an error if the HTTP request fails.
     */
    getClientId(): Promise<string>;
    /**
     * Initializes the API client with the provided configuration.
     * @private
     */
    private initializeApiClient;
}

type ListAllIntegrationsData = {
    /**
     * Page number to fetch
     */
    page?: number;
    /**
     * Page Size to assume
     */
    pageSize?: number;
    /**
     * The name of the app to filter by
     */
    appName?: string;
    /**
     * Whether to show disabled integrations
     */
    showDisabled?: boolean;
};
type GetIntegrationData = {
    /**
     * The unique identifier of the integration.
     */
    integrationId: string;
};
type CreateIntegrationData = {
    requestBody?: {
        /**
         * The name of the connector.
         */
        name?: string;
        /**
         * The authentication scheme used by the connector (e.g., "OAUTH2", "API_KEY").
         */
        authScheme?: string;
        /**
         * The unique identifier of the app associated with the connector.
         */
        appId?: string;
        forceNewIntegration?: boolean;
        /**
         * An object containing the authentication configuration for the connector.
         */
        authConfig?: {
            /**
             * The client ID used for authentication with the app - if authScheme is OAUTH2
             */
            client_id?: string;
            /**
             * The client secret used for authentication with the app - if authScheme is OAUTH2
             */
            client_secret?: string;
            /**
             * The API key used for authentication with the app - if authScheme is API_KEY
             */
            api_key?: string;
            /**
             * The Consumer key used for authentication with the app - if authScheme is OAUTH1
             */
            consumer_key?: string;
            /**
             * The Consumer secret used for authentication with the app - if authScheme is OAUTH1
             */
            consumer_secret?: string;
            /**
             *  The base URL for making API requests to the app.
             */
            base_url?: string;
            [key: string]: unknown;
        };
        /**
         * Use default Composio credentials to proceed. The developer app credentials will be of Composio.
         */
        useComposioAuth?: boolean;
    };
};
declare class Integrations {
    backendClient: BackendClient;
    fileName: string;
    constructor(backendClient: BackendClient);
    /**
     * Retrieves a list of all available integrations in the Composio platform.
     *
     * This method allows clients to explore and discover the supported integrations. It returns an array of integration objects, each containing essential details such as the integration's key, name, description, logo, categories, and unique identifier.
     *
     * @returns {Promise<ListAllIntegrationsResponse>} A promise that resolves to the list of all integrations.
     * @throws {ApiError} If the request fails.
     */
    list(data?: ListAllIntegrationsData): Promise<GetConnectorListResDTO | undefined>;
    /**
     * Retrieves details of a specific integration in the Composio platform by providing its integration name.
     *
     * The response includes the integration's name, display name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {GetIntegrationData} data The data for the request.
     * @returns {Promise<AppConnectorControllerGetConnectorInfoResponse | undefined>} A promise that resolves to the details of the integration.
     * @throws {ApiError} If the request fails.
     */
    get(data: GetIntegrationData): Promise<GetConnectorInfoResDTO | undefined>;
    getRequiredParams(integrationId: string): Promise<ExpectedInputFieldsDTO[]>;
    /**
     * Creates a new integration in the Composio platform.
     *
     * This method allows clients to create a new integration by providing the necessary details such as app ID, name, authentication mode, and configuration.
     *
     * @param {CreateIntegrationData["requestBody"]} data The data for the request.
     * @returns {Promise<CreateIntegrationResponse>} A promise that resolves to the created integration model.
     * @throws {ApiError} If the request fails.
     */
    create(data: CreateIntegrationData["requestBody"]): Promise<GetConnectorInfoResDTO>;
    delete(data: DeleteConnectorData): Promise<DeleteRowAPIDTO | undefined>;
}

type GetAppData = {
    appKey: string;
};
type RequiredParamsResponse = {
    required_fields: string[];
    expected_from_user: string[];
    optional_fields: string[];
};
type RequiredParamsFullResponse = {
    availableAuthSchemes: string[];
    authSchemes: Record<string, RequiredParamsResponse>;
};
declare class Apps {
    backendClient: BackendClient;
    fileName: string;
    constructor(backendClient: BackendClient);
    /**
     * Retrieves a list of all available apps in the Composio platform.
     *
     * This method allows clients to explore and discover the supported apps. It returns an array of app objects, each containing essential details such as the app's key, name, description, logo, categories, and unique identifier.
     *
     * @returns {Promise<AppListResDTO>} A promise that resolves to the list of all apps.
     * @throws {ApiError} If the request fails.
     */
    list(): Promise<AppInfoResponseDto[]>;
    /**
     * Retrieves details of a specific app in the Composio platform.
     *
     * This method allows clients to fetch detailed information about a specific app by providing its unique key. The response includes the app's name, key, status, description, logo, categories, authentication schemes, and other metadata.
     *
     * @param {GetAppData} data The data for the request, including the app's unique key.
     * @returns {CancelablePromise<GetAppResponse>} A promise that resolves to the details of the app.
     * @throws {ApiError} If the request fails.
     */
    get(data: GetAppData): Promise<SingleAppInfoResDTO>;
    getRequiredParams(appId: string): Promise<RequiredParamsFullResponse>;
    getRequiredParamsForAuthScheme({ appId, authScheme, }: {
        appId: string;
        authScheme: string;
    }): Promise<RequiredParamsResponse>;
}

type ConnectedAccountsListData = GetConnectionsData["query"] & {
    appNames?: string;
};
type InitiateConnectionDataReq = InitiateConnectionPayloadDto & {
    data?: Record<string, unknown> | unknown;
    entityId?: string;
    labels?: string[];
    integrationId?: string;
    redirectUri?: string;
    authMode?: string;
    authConfig?: {
        [key: string]: any;
    };
    appName?: string;
};
declare class ConnectedAccounts {
    backendClient: BackendClient;
    integrations: Integrations;
    apps: Apps;
    fileName: string;
    constructor(backendClient: BackendClient);
    list(data: ConnectedAccountsListData): Promise<GetConnectionsResponseDto>;
    create(data: InitiateConnectionPayloadDto): Promise<ConnectionRequest>;
    get(data: {
        connectedAccountId: string;
    }): Promise<ConnectedAccountResponseDTO | undefined>;
    delete(data: {
        connectedAccountId: string;
    }): Promise<DeleteRowAPIDTO | undefined>;
    getAuthParams(data: {
        connectedAccountId: string;
    }): Promise<ConnectedAccountResponseDTO | undefined>;
    initiate(payload: InitiateConnectionDataReq): Promise<ConnectionRequest>;
}
declare class ConnectionRequest {
    connectionStatus: string;
    connectedAccountId: string;
    redirectUrl: string | null;
    constructor({ connectionStatus, connectedAccountId, redirectUri, }: {
        connectionStatus: string;
        connectedAccountId: string;
        redirectUri: string | null;
    });
    saveUserAccessData(data: {
        fieldInputs: Record<string, string>;
        redirectUrl?: string;
        entityId?: string;
    }): Promise<(axios.AxiosError<unknown, any> & {
        data: undefined;
        error: unknown;
    }) | (axios.AxiosResponse<InitiateConnectionResponse, any> & {
        error: undefined;
    })>;
    getAuthInfo(data: GetConnectionInfoData["path"]): Promise<GetConnectionInfoResponse>;
    waitUntilActive(timeout?: number): Promise<ConnectedAccountResponseDTO>;
}

/**
 * The `Actions` class provides methods to interact with the Composio platform's actions.
 * It allows fetching details of specific actions, listing all actions, and executing actions.
 *
 * - `get` method retrieves details of a specific action.
 * - `list` method retrieves a list of all actions.
 * - `execute` method executes a specific action.
 *
 * Each method returns a `CancelablePromise` which can be canceled. If canceled, the promise
 * will reject with a `Cancellation` object.
 *
 * @typeParam Composio The client configuration object type.
 * @groupDescription Methods
 * The methods in this class are grouped under 'Actions Methods' and provide functionalities
 * to interact with actions in the Composio platform. This includes fetching, listing, and
 * executing actions.
 */
type GetListActionsData = {
    /**
     * Name of the apps like "github", "linear" separated by a comma
     */
    apps?: string;
    /**
     * Filter by Action names
     */
    actions?: string;
    /**
     * Filter by Action tags
     */
    tags?: string;
    /**
     * Filter by use case
     */
    useCase?: string | undefined;
    /**
     * Limit of use-cases based search
     */
    usecaseLimit?: number;
    /**
     * Show all actions - i.e disable pagination
     */
    showAll?: boolean;
    /**
     * Show actions enabled for the API Key
     */
    showEnabledOnly?: boolean;
    /**
     * Use smart tag filtering
     */
    filterImportantActions?: boolean;
    /**
     * Should search in available apps only
     */
    filterByAvailableApps?: boolean;
};
type Parameter = {
    /**
     * The name of the parameter.
     */
    name: string;
    /**
     * The location of the parameter (e.g., query, header).
     */
    in: string;
    /**
     * The value of the parameter.
     */
    value: string | number;
};
type CustomAuthData = {
    /**
     * The base URL for the custom authentication.
     */
    base_url?: string;
    /**
     * An array of parameters for the custom authentication.
     */
    parameters: Parameter[];
    /**
     * An optional object containing the body for the custom authentication.
     */
    body?: Record<string, unknown>;
};
type ExecuteActionData = {
    /**
     * The name of the action to execute.
     */
    actionName: string;
    requestBody?: {
        /**
         * The unique identifier of the connection to use for executing the action.
         */
        connectedAccountId?: string;
        /**
         * An object containing the input parameters for the action. If you want to execute
         * NLP based action (i.e text), you can use text parameter instead of input.
         */
        input?: {
            [key: string]: unknown;
        };
        appName?: string;
        /**
         * The text to supply to the action which will be automatically converted to
         * appropriate input parameters.
         */
        text?: string;
        /**
         * The custom authentication configuration for executing the action.
         */
        authConfig?: CustomAuthData;
    };
};
declare class Actions {
    backendClient: BackendClient;
    fileName: string;
    constructor(backendClient: BackendClient);
    /**
     * Retrieves details of a specific action in the Composio platform by providing its action name.
     *
     * The response includes the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {GetActionData} data The data for the request.
     * @returns {CancelablePromise<GetActionResponse[0]>} A promise that resolves to the details of the action.
     * @throws {ApiError} If the request fails.
     */
    get(data: {
        actionName: string;
    }): Promise<ActionDetails>;
    /**
     * Retrieves a list of all actions in the Composio platform.
     *
     * This method allows you to fetch a list of all the available actions. It supports pagination to handle large numbers of actions. The response includes an array of action objects, each containing information such as the action's name, display name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {GetListActionsData} data The data for the request.
     * @returns {Promise<ActionsListResponseDTO>} A promise that resolves to the list of all actions.
     * @throws {ApiError} If the request fails.
     */
    list(data?: GetListActionsData): Promise<ActionsListResponseDTO>;
    /**
     * Executes a specific action in the Composio platform.
     *
     * This method allows you to trigger the execution of an action by providing its name and the necessary input parameters. The request includes the connected account ID to identify the app connection to use for the action, and the input parameters required by the action. The response provides details about the execution status and the response data returned by the action.
     *
     * @param {ExecuteActionData} data The data for the request.
     * @returns {Promise<ActionExecutionResDto>} A promise that resolves to the execution status and response data.
     * @throws {ApiError} If the request fails.
     */
    execute(data: ExecuteActionData): Promise<ActionExecutionResDto>;
    findActionEnumsByUseCase(data: {
        apps: Array<string>;
        useCase: string;
        limit?: number;
        filterByAvailableApps?: boolean;
    }): Promise<Array<string>>;
    /**
     * Executes a action using Composio Proxy
     *
     * This method allows you to trigger the execution of an action by providing its name and the necessary input parameters. The request includes the connected account ID to identify the app connection to use for the action, and the input parameters required by the action. The response provides details about the execution status and the response data returned by the action.
     *
     * @param {ExecuteActionData} data The data for the request.
     * @returns {Promise<ActionExecutionResDto>} A promise that resolves to the execution status and response data.
     * @throws {ApiError} If the request fails.
     */
    executeRequest(data: ActionProxyRequestConfigDTO): Promise<ActionExecutionResDto>;
}

type TriggerData = {
    appName: string;
    clientId: number;
    payload: {};
    originalPayload: Record<string, any>;
    metadata: {
        id: string;
        connectionId: string;
        triggerName: string;
        triggerData: string;
        triggerConfig: Record<string, any>;
        connection: {
            id: string;
            integrationId: string;
            clientUniqueUserId: string;
            status: string;
        };
    };
};

type RequiredQuery = ListTriggersData["query"];
declare class Triggers {
    trigger_to_client_event: string;
    backendClient: BackendClient;
    fileName: string;
    constructor(backendClient: BackendClient);
    /**
     * Retrieves a list of all triggers in the Composio platform.
     *
     * This method allows you to fetch a list of all the available triggers. It supports pagination to handle large numbers of triggers. The response includes an array of trigger objects, each containing information such as the trigger's name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {ListTriggersData} data The data for the request.
     * @returns {CancelablePromise<ListTriggersResponse>} A promise that resolves to the list of all triggers.
     * @throws {ApiError} If the request fails.
     */
    list(data?: RequiredQuery): Promise<ListTriggersResponse>;
    /**
     * Setup a trigger for a connected account.
     *
     * @param {SetupTriggerData} data The data for the request.
     * @returns {CancelablePromise<SetupTriggerResponse>} A promise that resolves to the setup trigger response.
     * @throws {ApiError} If the request fails.
     */
    setup({ connectedAccountId, triggerName, config, }: {
        connectedAccountId: string;
        triggerName: string;
        config: Record<string, any>;
    }): Promise<{
        status: string;
        triggerId: string;
    }>;
    enable(data: {
        triggerId: string;
    }): Promise<{
        status: string;
    }>;
    disable(data: {
        triggerId: string;
    }): Promise<{
        status: string;
    }>;
    delete(data: {
        triggerInstanceId: string;
    }): Promise<{
        status: string;
    }>;
    subscribe(fn: (data: TriggerData) => void, filters?: {
        appName?: string;
        triggerId?: string;
        connectionId?: string;
        integrationId?: string;
        triggerName?: string;
        triggerData?: string;
        entityId?: string;
    }): Promise<void>;
    unsubscribe(): Promise<void>;
}

declare class ActiveTriggers {
    backendClient: BackendClient;
    fileName: string;
    constructor(backendClient: BackendClient);
    /**
     * Retrieves details of a specific active trigger in the Composio platform by providing its trigger name.
     *
     * The response includes the trigger's name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {GetActiveTriggerData} data The data for the request.
     * @returns {CancelablePromise<GetActiveTriggerResponse>} A promise that resolves to the details of the active trigger.
     * @throws {ApiError} If the request fails.
     */
    get({ triggerId }: {
        triggerId: string;
    }): Promise<{
        [key: string]: unknown;
    } | undefined>;
    /**
     * Retrieves a list of all active triggers in the Composio platform.
     *
     * This method allows you to fetch a list of all the available active triggers. It supports pagination to handle large numbers of triggers. The response includes an array of trigger objects, each containing information such as the trigger's name, description, input parameters, expected response, associated app information, and enabled status.
     *
     * @param {ListActiveTriggersData} data The data for the request.
     * @returns {CancelablePromise<ListActiveTriggersResponse>} A promise that resolves to the list of all active triggers.
     * @throws {ApiError} If the request fails.
     */
    list(data?: GetActiveTriggersData): Promise<{
        [key: string]: unknown;
    }[]>;
    /**
     * Enables the previously disabled trigger.
     *
     * @param {Object} data The data for the request.
     * @param {string} data.triggerId Id of the trigger
     * @returns {CancelablePromise<Record<string, any>>} A promise that resolves to the response of the enable request.
     * @throws {ApiError} If the request fails.
     */
    enable(data: {
        triggerId: string;
    }): Promise<boolean>;
    disable(data: {
        triggerId: string;
    }): Promise<boolean>;
}

declare const ZExecuteActionParams: z.ZodObject<{
    actionName: z.ZodString;
    params: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    text: z.ZodOptional<z.ZodString>;
    connectedAccountId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    actionName: string;
    params?: Record<string, any> | undefined;
    text?: string | undefined;
    connectedAccountId?: string | undefined;
}, {
    actionName: string;
    params?: Record<string, any> | undefined;
    text?: string | undefined;
    connectedAccountId?: string | undefined;
}>;
type TExecuteActionParams = z.infer<typeof ZExecuteActionParams>;
declare const ZInitiateConnectionParams: z.ZodObject<{
    appName: z.ZodOptional<z.ZodString>;
    authConfig: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    integrationId: z.ZodOptional<z.ZodString>;
    authMode: z.ZodOptional<z.ZodString>;
    connectionData: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    config: z.ZodOptional<z.ZodObject<{
        labels: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        redirectUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        labels?: string[] | undefined;
        redirectUrl?: string | undefined;
    }, {
        labels?: string[] | undefined;
        redirectUrl?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    integrationId?: string | undefined;
    appName?: string | undefined;
    authConfig?: Record<string, any> | undefined;
    config?: {
        labels?: string[] | undefined;
        redirectUrl?: string | undefined;
    } | undefined;
    authMode?: string | undefined;
    connectionData?: Record<string, any> | undefined;
}, {
    integrationId?: string | undefined;
    appName?: string | undefined;
    authConfig?: Record<string, any> | undefined;
    config?: {
        labels?: string[] | undefined;
        redirectUrl?: string | undefined;
    } | undefined;
    authMode?: string | undefined;
    connectionData?: Record<string, any> | undefined;
}>;
type TInitiateConnectionParams = z.infer<typeof ZInitiateConnectionParams>;
declare class Entity {
    id: string;
    backendClient: BackendClient;
    triggerModel: Triggers;
    actionsModel: Actions;
    apps: Apps;
    connectedAccounts: ConnectedAccounts;
    integrations: Integrations;
    activeTriggers: ActiveTriggers;
    fileName: string;
    constructor(backendClient: BackendClient, id?: string);
    execute({ actionName, params, text, connectedAccountId, }: TExecuteActionParams): Promise<ActionExecutionResDto>;
    getConnection({ app, connectedAccountId, }: {
        app?: string;
        connectedAccountId?: string;
    }): Promise<any | null>;
    setupTrigger(app: string, triggerName: string, config: {
        [key: string]: any;
    }): Promise<{
        status: string;
        triggerId: string;
    }>;
    disableTrigger(triggerId: string): Promise<{
        status: string;
    }>;
    getConnections(): Promise<ConnectionParams[]>;
    getActiveTriggers(): Promise<{
        [key: string]: unknown;
    }[]>;
    initiateConnection(data: TInitiateConnectionParams): Promise<ConnectionRequest>;
}

declare class Composio {
    /**
     * The Composio class serves as the main entry point for interacting with the Composio SDK.
     * It provides access to various models that allow for operations on connected accounts, apps,
     * actions, triggers, integrations, and active triggers.
     */
    backendClient: BackendClient;
    connectedAccounts: ConnectedAccounts;
    apps: Apps;
    actions: Actions;
    triggers: Triggers;
    integrations: Integrations;
    activeTriggers: ActiveTriggers;
    fileName: string;
    /**
     * Initializes a new instance of the Composio class.
     *
     * @param {Object} config - Configuration object for the Composio SDK
     * @param {string} [config.apiKey] - The API key for authenticating with the Composio backend. Can also be set locally in an environment variable.
     * @param {string} [config.baseUrl] - The base URL for the Composio backend. By default, it is set to the production URL.
     * @param {string} [config.runtime] - The runtime environment for the SDK.
     */
    constructor(config: {
        apiKey?: string;
        baseUrl?: string;
        runtime?: string;
    });
    /**
     * Checks for the latest version of the Composio SDK from NPM.
     * If a newer version is available, it logs a warning to the console.
     */
    checkForLatestVersionFromNPM(): Promise<void>;
    /**
     * Retrieves an Entity instance associated with a given ID.
     *
     * @param {string} [id='default'] - The ID of the entity to retrieve.
     * @returns {Entity} An instance of the Entity class.
     */
    getEntity(id?: string): Entity;
    getExpectedParamsForUser(params?: {
        app?: string;
        integrationId?: string;
        entityId?: string;
        authScheme?: "OAUTH2" | "OAUTH1" | "API_KEY" | "BASIC" | "BEARER_TOKEN" | "BASIC_WITH_JWT";
    }): Promise<{
        expectedInputFields: GetConnectorInfoResDTO["expectedInputFields"];
        integrationId: string;
        authScheme: "OAUTH2" | "OAUTH1" | "API_KEY" | "BASIC" | "BEARER_TOKEN" | "BASIC_WITH_JWT";
    }>;
}

export { Composio };
