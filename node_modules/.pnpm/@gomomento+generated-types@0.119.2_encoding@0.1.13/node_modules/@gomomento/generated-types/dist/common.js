"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.common = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: common.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = __importStar(require("google-protobuf"));
var common;
(function (common) {
    var _Present_one_of_decls, _PresentAndNotEqual_one_of_decls, _Absent_one_of_decls, _Equal_one_of_decls, _AbsentOrEqual_one_of_decls, _NotEqual_one_of_decls, __Unbounded_one_of_decls, __Empty_one_of_decls;
    class Present extends pb_1.Message {
        constructor(data) {
            super();
            _Present_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Present_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new Present({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Present();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Present.deserialize(bytes);
        }
    }
    _Present_one_of_decls = new WeakMap();
    common.Present = Present;
    class PresentAndNotEqual extends pb_1.Message {
        constructor(data) {
            super();
            _PresentAndNotEqual_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PresentAndNotEqual_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value_to_check" in data && data.value_to_check != undefined) {
                    this.value_to_check = data.value_to_check;
                }
            }
        }
        get value_to_check() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
        }
        set value_to_check(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new PresentAndNotEqual({});
            if (data.value_to_check != null) {
                message.value_to_check = data.value_to_check;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.value_to_check != null) {
                data.value_to_check = this.value_to_check;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value_to_check.length)
                writer.writeBytes(1, this.value_to_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PresentAndNotEqual();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value_to_check = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return PresentAndNotEqual.deserialize(bytes);
        }
    }
    _PresentAndNotEqual_one_of_decls = new WeakMap();
    common.PresentAndNotEqual = PresentAndNotEqual;
    class Absent extends pb_1.Message {
        constructor(data) {
            super();
            _Absent_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Absent_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new Absent({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Absent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Absent.deserialize(bytes);
        }
    }
    _Absent_one_of_decls = new WeakMap();
    common.Absent = Absent;
    class Equal extends pb_1.Message {
        constructor(data) {
            super();
            _Equal_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Equal_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value_to_check" in data && data.value_to_check != undefined) {
                    this.value_to_check = data.value_to_check;
                }
            }
        }
        get value_to_check() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
        }
        set value_to_check(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new Equal({});
            if (data.value_to_check != null) {
                message.value_to_check = data.value_to_check;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.value_to_check != null) {
                data.value_to_check = this.value_to_check;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value_to_check.length)
                writer.writeBytes(1, this.value_to_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Equal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value_to_check = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return Equal.deserialize(bytes);
        }
    }
    _Equal_one_of_decls = new WeakMap();
    common.Equal = Equal;
    class AbsentOrEqual extends pb_1.Message {
        constructor(data) {
            super();
            _AbsentOrEqual_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AbsentOrEqual_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value_to_check" in data && data.value_to_check != undefined) {
                    this.value_to_check = data.value_to_check;
                }
            }
        }
        get value_to_check() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
        }
        set value_to_check(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new AbsentOrEqual({});
            if (data.value_to_check != null) {
                message.value_to_check = data.value_to_check;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.value_to_check != null) {
                data.value_to_check = this.value_to_check;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value_to_check.length)
                writer.writeBytes(1, this.value_to_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbsentOrEqual();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value_to_check = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return AbsentOrEqual.deserialize(bytes);
        }
    }
    _AbsentOrEqual_one_of_decls = new WeakMap();
    common.AbsentOrEqual = AbsentOrEqual;
    class NotEqual extends pb_1.Message {
        constructor(data) {
            super();
            _NotEqual_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NotEqual_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value_to_check" in data && data.value_to_check != undefined) {
                    this.value_to_check = data.value_to_check;
                }
            }
        }
        get value_to_check() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0));
        }
        set value_to_check(value) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data) {
            const message = new NotEqual({});
            if (data.value_to_check != null) {
                message.value_to_check = data.value_to_check;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.value_to_check != null) {
                data.value_to_check = this.value_to_check;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value_to_check.length)
                writer.writeBytes(1, this.value_to_check);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NotEqual();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value_to_check = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NotEqual.deserialize(bytes);
        }
    }
    _NotEqual_one_of_decls = new WeakMap();
    common.NotEqual = NotEqual;
    class _Unbounded extends pb_1.Message {
        constructor(data) {
            super();
            __Unbounded_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Unbounded_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _Unbounded({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Unbounded();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Unbounded.deserialize(bytes);
        }
    }
    __Unbounded_one_of_decls = new WeakMap();
    common._Unbounded = _Unbounded;
    class _Empty extends pb_1.Message {
        constructor(data) {
            super();
            __Empty_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, __Empty_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data) {
            const message = new _Empty({});
            return message;
        }
        toObject() {
            const data = {};
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new _Empty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return _Empty.deserialize(bytes);
        }
    }
    __Empty_one_of_decls = new WeakMap();
    common._Empty = _Empty;
})(common = exports.common || (exports.common = {}));
