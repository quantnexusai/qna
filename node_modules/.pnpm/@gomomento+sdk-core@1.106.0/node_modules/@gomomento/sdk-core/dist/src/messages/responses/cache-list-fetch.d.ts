import { SdkError } from '../../errors';
import { BaseResponseError, BaseResponseMiss, ResponseBase } from './response-base';
import { CacheListFetchResponse } from './enums';
interface IResponse {
    value(): string[] | undefined;
    readonly type: CacheListFetchResponse;
}
/**
 * Indicates that the requested list was successfully retrieved from the cache.
 * Provides `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Hit extends ResponseBase implements IResponse {
    readonly type: CacheListFetchResponse.Hit;
    private readonly _values;
    constructor(values: Uint8Array[]);
    /**
     * Returns the data as an array of byte arrays.
     * @returns {Uint8Array[]}
     */
    valueListUint8Array(): Uint8Array[];
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.
     * @returns {string[]}
     */
    valueListString(): string[];
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.  This is a convenience alias
     * for {valueListString}
     * @returns {string[]}
     */
    valueList(): string[];
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.
     * This is a convenience alias for {valueListString}
     * @returns {string[]}
     */
    value(): string[];
    toString(): string;
}
/**
 * Indicates that the requested list was not available in the cache.
 */
export declare class Miss extends BaseResponseMiss implements IResponse {
    readonly type: CacheListFetchResponse.Miss;
    constructor();
    value(): undefined;
}
/**
 * Indicates that an error occurred during the list fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: CacheListFetchResponse.Error;
    constructor(_innerException: SdkError);
    value(): undefined;
}
export type Response = Hit | Miss | Error;
export {};
