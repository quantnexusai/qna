import { SdkError } from '../../errors';
import { BaseResponseError, BaseResponseSuccess } from './response-base';
import { CacheIncrementResponse } from './enums';
interface IResponse {
    value(): number | undefined;
    readonly type: CacheIncrementResponse;
}
/**
 * Indicates a successful cache increment request.
 * Provides `value*` accessors to retrieve the updated value in the appropriate format.
 */
export declare class Success extends BaseResponseSuccess implements IResponse {
    readonly type: CacheIncrementResponse.Success;
    private readonly body;
    constructor(body: number);
    /**
     * Returns the updated value as a number.
     * @returns number
     */
    value(): number;
    /**
     * Returns the updated value as a number.
     * @returns number
     */
    valueNumber(): number;
    toString(): string;
}
/**
 * Indicates that an error occurred during the increment request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error.
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    constructor(_innerException: SdkError);
    readonly type: CacheIncrementResponse.Error;
    value(): undefined;
}
export type Response = Success | Error;
export {};
