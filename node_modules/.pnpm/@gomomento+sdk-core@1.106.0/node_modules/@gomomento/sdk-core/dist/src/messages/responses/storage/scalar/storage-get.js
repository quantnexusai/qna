"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.NotFound = exports.Found = void 0;
const enums_1 = require("../../enums");
const response_base_1 = require("../../response-base");
const storage_value_1 = require("./storage-value");
/**
 * Indicates that the item was fetched from the store.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the successful response:
 *
 * - `value()` - the value associated with the key that was retrieved from the cache.
 */
class Found extends response_base_1.ResponseBase {
    /**
     * Creates an instance of the Found response.
     * @param {StorageValue} value - The value associated with the key that was retrieved from the cache.
     */
    constructor(value) {
        super();
        this.type = enums_1.StorageGetResponse.Found;
        this._value = value;
    }
    /**
     * Creates a Found response with an integer value.
     * @param {number} value - The integer value to be stored.
     * @returns {Found} - A Found response object containing the integer value.
     */
    static ofInt(value) {
        return new Found(storage_value_1.StorageValue.ofInt(value));
    }
    /**
     * Creates a Found response with a double value.
     * @param {number} value - The double value to be stored.
     * @returns {Found} - A Found response object containing the double value.
     */
    static ofDouble(value) {
        return new Found(storage_value_1.StorageValue.ofDouble(value));
    }
    /**
     * Creates a Found response with a string value.
     * @param {string} value - The string value to be stored.
     * @returns {Found} - A Found response object containing the string value.
     */
    static ofString(value) {
        return new Found(storage_value_1.StorageValue.ofString(value));
    }
    /**
     * Creates a Found response with a byte array value.
     * @param {Uint8Array} value - The byte array value to be stored.
     * @returns {Found} - A Found response object containing the byte array value.
     */
    static ofBytes(value) {
        return new Found(storage_value_1.StorageValue.ofBytes(value));
    }
    /**
     * Retrieves the value associated with the key that was retrieved from the cache.
     * @returns {StorageValue} - The value associated with the key, or undefined if no value is present.
     */
    value() {
        return this._value;
    }
}
exports.Found = Found;
/**
 * Indicates that the item was not found in the store.
 */
class NotFound extends response_base_1.ResponseBase {
    constructor() {
        super();
        this.type = enums_1.StorageGetResponse.NotFound;
    }
    value() {
        return undefined;
    }
}
exports.NotFound = NotFound;
/**
 * Indicates that an error occurred during the storage get request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.StorageGetResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1nZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL3N0b3JhZ2Uvc2NhbGFyL3N0b3JhZ2UtZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUErQztBQUMvQyx1REFBb0U7QUFFcEUsbURBQTZDO0FBTzdDOzs7Ozs7O0dBT0c7QUFDSCxNQUFhLEtBQU0sU0FBUSw0QkFBWTtJQUlyQzs7O09BR0c7SUFDSCxZQUFZLEtBQW1CO1FBQzdCLEtBQUssRUFBRSxDQUFDO1FBUkQsU0FBSSxHQUE2QiwwQkFBa0IsQ0FBQyxLQUFLLENBQUM7UUFTakUsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWE7UUFDeEIsT0FBTyxJQUFJLEtBQUssQ0FBQyw0QkFBWSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sSUFBSSxLQUFLLENBQUMsNEJBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBYTtRQUMzQixPQUFPLElBQUksS0FBSyxDQUFDLDRCQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWlCO1FBQzlCLE9BQU8sSUFBSSxLQUFLLENBQUMsNEJBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0NBQ0Y7QUF4REQsc0JBd0RDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLFFBQVMsU0FBUSw0QkFBWTtJQUd4QztRQUNFLEtBQUssRUFBRSxDQUFDO1FBSEQsU0FBSSxHQUFnQywwQkFBa0IsQ0FBQyxRQUFRLENBQUM7SUFJekUsQ0FBQztJQUVELEtBQUs7UUFDSCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFWRCw0QkFVQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUcxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUhoQixTQUFJLEdBQTZCLDBCQUFrQixDQUFDLEtBQUssQ0FBQztJQUluRSxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQVZELHNCQVVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlR2V0UmVzcG9uc2V9IGZyb20gJy4uLy4uL2VudW1zJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIFJlc3BvbnNlQmFzZX0gZnJvbSAnLi4vLi4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi8uLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtTdG9yYWdlVmFsdWV9IGZyb20gJy4vc3RvcmFnZS12YWx1ZSc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBTdG9yYWdlR2V0UmVzcG9uc2U7XG4gIHZhbHVlKCk6IFN0b3JhZ2VWYWx1ZSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgaXRlbSB3YXMgZmV0Y2hlZCBmcm9tIHRoZSBzdG9yZS5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgc3VjY2Vzc2Z1bCByZXNwb25zZTpcbiAqXG4gKiAtIGB2YWx1ZSgpYCAtIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSB0aGF0IHdhcyByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3VuZCBleHRlbmRzIFJlc3BvbnNlQmFzZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IFN0b3JhZ2VHZXRSZXNwb25zZS5Gb3VuZCA9IFN0b3JhZ2VHZXRSZXNwb25zZS5Gb3VuZDtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWU6IFN0b3JhZ2VWYWx1ZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgRm91bmQgcmVzcG9uc2UuXG4gICAqIEBwYXJhbSB7U3RvcmFnZVZhbHVlfSB2YWx1ZSAtIFRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSB0aGF0IHdhcyByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih2YWx1ZTogU3RvcmFnZVZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBGb3VuZCByZXNwb25zZSB3aXRoIGFuIGludGVnZXIgdmFsdWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSBpbnRlZ2VyIHZhbHVlIHRvIGJlIHN0b3JlZC5cbiAgICogQHJldHVybnMge0ZvdW5kfSAtIEEgRm91bmQgcmVzcG9uc2Ugb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGludGVnZXIgdmFsdWUuXG4gICAqL1xuICBzdGF0aWMgb2ZJbnQodmFsdWU6IG51bWJlcik6IEZvdW5kIHtcbiAgICByZXR1cm4gbmV3IEZvdW5kKFN0b3JhZ2VWYWx1ZS5vZkludCh2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBGb3VuZCByZXNwb25zZSB3aXRoIGEgZG91YmxlIHZhbHVlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgZG91YmxlIHZhbHVlIHRvIGJlIHN0b3JlZC5cbiAgICogQHJldHVybnMge0ZvdW5kfSAtIEEgRm91bmQgcmVzcG9uc2Ugb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGRvdWJsZSB2YWx1ZS5cbiAgICovXG4gIHN0YXRpYyBvZkRvdWJsZSh2YWx1ZTogbnVtYmVyKTogRm91bmQge1xuICAgIHJldHVybiBuZXcgRm91bmQoU3RvcmFnZVZhbHVlLm9mRG91YmxlKHZhbHVlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIEZvdW5kIHJlc3BvbnNlIHdpdGggYSBzdHJpbmcgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgKiBAcmV0dXJucyB7Rm91bmR9IC0gQSBGb3VuZCByZXNwb25zZSBvYmplY3QgY29udGFpbmluZyB0aGUgc3RyaW5nIHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIG9mU3RyaW5nKHZhbHVlOiBzdHJpbmcpOiBGb3VuZCB7XG4gICAgcmV0dXJuIG5ldyBGb3VuZChTdG9yYWdlVmFsdWUub2ZTdHJpbmcodmFsdWUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgRm91bmQgcmVzcG9uc2Ugd2l0aCBhIGJ5dGUgYXJyYXkgdmFsdWUuXG4gICAqIEBwYXJhbSB7VWludDhBcnJheX0gdmFsdWUgLSBUaGUgYnl0ZSBhcnJheSB2YWx1ZSB0byBiZSBzdG9yZWQuXG4gICAqIEByZXR1cm5zIHtGb3VuZH0gLSBBIEZvdW5kIHJlc3BvbnNlIG9iamVjdCBjb250YWluaW5nIHRoZSBieXRlIGFycmF5IHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIG9mQnl0ZXModmFsdWU6IFVpbnQ4QXJyYXkpOiBGb3VuZCB7XG4gICAgcmV0dXJuIG5ldyBGb3VuZChTdG9yYWdlVmFsdWUub2ZCeXRlcyh2YWx1ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXkgdGhhdCB3YXMgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlLlxuICAgKiBAcmV0dXJucyB7U3RvcmFnZVZhbHVlfSAtIFRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleSwgb3IgdW5kZWZpbmVkIGlmIG5vIHZhbHVlIGlzIHByZXNlbnQuXG4gICAqL1xuICB2YWx1ZSgpOiBTdG9yYWdlVmFsdWUge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSBpdGVtIHdhcyBub3QgZm91bmQgaW4gdGhlIHN0b3JlLlxuICovXG5leHBvcnQgY2xhc3MgTm90Rm91bmQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBTdG9yYWdlR2V0UmVzcG9uc2UuTm90Rm91bmQgPSBTdG9yYWdlR2V0UmVzcG9uc2UuTm90Rm91bmQ7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHZhbHVlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgc3RvcmFnZSBnZXQgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogU3RvcmFnZUdldFJlc3BvbnNlLkVycm9yID0gU3RvcmFnZUdldFJlc3BvbnNlLkVycm9yO1xuXG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgdmFsdWUoKTogdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gRm91bmQgfCBOb3RGb3VuZCB8IEVycm9yO1xuIl19