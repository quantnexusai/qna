"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Subscription = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Encapsulates a topic subscription.
 *
 * @remarks Currently allows unsubscribing from the topic.
 * In the future, this may be extended to include additional
 * statistics about the subscription.
 */
class Subscription extends response_base_1.BaseResponseSubscription {
    constructor(loggerFactory, subscriptionState) {
        super();
        this.type = enums_1.TopicSubscribeResponse.Subscription;
        this.logger = loggerFactory.getLogger(this);
        this.subscriptionState = subscriptionState;
    }
    /**
     * Unsubscribes from the topic.
     *
     * @returns void
     */
    unsubscribe() {
        this.logger.trace(`Unsubscribing from subscription: ${this.subscriptionState.toString()}`);
        this.subscriptionState.unsubscribe();
    }
    get isSubscribed() {
        return this.subscriptionState.isSubscribed;
    }
}
exports.Subscription = Subscription;
/**
 * Indicates that an error occurred during the topic subscribe request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.TopicSubscribeResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMtc3Vic2NyaWJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy90b3BpYy1zdWJzY3JpYmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQTRFO0FBRTVFLG1DQUErQztBQU8vQzs7Ozs7O0dBTUc7QUFDSCxNQUFhLFlBQ1gsU0FBUSx3Q0FBd0I7SUFRaEMsWUFDRSxhQUFtQyxFQUNuQyxpQkFBb0M7UUFFcEMsS0FBSyxFQUFFLENBQUM7UUFQRCxTQUFJLEdBQ1gsOEJBQXNCLENBQUMsWUFBWSxDQUFDO1FBT3BDLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7SUFDN0MsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLG9DQUFvQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDeEUsQ0FBQztRQUNGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQztJQUM3QyxDQUFDO0NBQ0Y7QUFqQ0Qsb0NBaUNDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBRTFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRmhCLFNBQUksR0FBaUMsOEJBQXNCLENBQUMsS0FBSyxDQUFDO0lBRzNFLENBQUM7Q0FDRjtBQUxELHNCQUtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIEJhc2VSZXNwb25zZVN1YnNjcmlwdGlvbn0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7U3Vic2NyaXB0aW9uU3RhdGV9IGZyb20gJy4uLy4uL2ludGVybmFsL3N1YnNjcmlwdGlvbi1zdGF0ZSc7XG5pbXBvcnQge1RvcGljU3Vic2NyaWJlUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnLi4vLi4vY29uZmlnL2xvZ2dpbmcnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogVG9waWNTdWJzY3JpYmVSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBFbmNhcHN1bGF0ZXMgYSB0b3BpYyBzdWJzY3JpcHRpb24uXG4gKlxuICogQHJlbWFya3MgQ3VycmVudGx5IGFsbG93cyB1bnN1YnNjcmliaW5nIGZyb20gdGhlIHRvcGljLlxuICogSW4gdGhlIGZ1dHVyZSwgdGhpcyBtYXkgYmUgZXh0ZW5kZWQgdG8gaW5jbHVkZSBhZGRpdGlvbmFsXG4gKiBzdGF0aXN0aWNzIGFib3V0IHRoZSBzdWJzY3JpcHRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWJzY3JpcHRpb25cbiAgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWJzY3JpcHRpb25cbiAgaW1wbGVtZW50cyBJUmVzcG9uc2VcbntcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25TdGF0ZTogU3Vic2NyaXB0aW9uU3RhdGU7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuICByZWFkb25seSB0eXBlOiBUb3BpY1N1YnNjcmliZVJlc3BvbnNlLlN1YnNjcmlwdGlvbiA9XG4gICAgVG9waWNTdWJzY3JpYmVSZXNwb25zZS5TdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbG9nZ2VyRmFjdG9yeTogTW9tZW50b0xvZ2dlckZhY3RvcnksXG4gICAgc3Vic2NyaXB0aW9uU3RhdGU6IFN1YnNjcmlwdGlvblN0YXRlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXJGYWN0b3J5LmdldExvZ2dlcih0aGlzKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvblN0YXRlID0gc3Vic2NyaXB0aW9uU3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIGZyb20gdGhlIHRvcGljLlxuICAgKlxuICAgKiBAcmV0dXJucyB2b2lkXG4gICAqL1xuICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgVW5zdWJzY3JpYmluZyBmcm9tIHN1YnNjcmlwdGlvbjogJHt0aGlzLnN1YnNjcmlwdGlvblN0YXRlLnRvU3RyaW5nKCl9YFxuICAgICk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25TdGF0ZS51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHVibGljIGdldCBpc1N1YnNjcmliZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9uU3RhdGUuaXNTdWJzY3JpYmVkO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSB0b3BpYyBzdWJzY3JpYmUgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogVG9waWNTdWJzY3JpYmVSZXNwb25zZS5FcnJvciA9IFRvcGljU3Vic2NyaWJlUmVzcG9uc2UuRXJyb3I7XG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3Vic2NyaXB0aW9uIHwgRXJyb3I7XG4iXX0=