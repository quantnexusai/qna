"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested set was in the cache.  Provides
 * a `containsElements` accessor that returns a mapping of the elements of the set
 * to their presence in the cache.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(elements, found) {
        super();
        this.type = enums_1.CacheSetContainsElementsResponse.Hit;
        this._contains = elements.reduce((acc, element, index) => {
            acc[TEXT_DECODER.decode(element)] = found[index];
            return acc;
        }, {});
    }
    /**
     * Returns a mapping of the elements to their presence in the cache.
     * @returns {Record<string, boolean>}
     */
    containsElements() {
        return this._contains;
    }
    toString() {
        const display = (0, utils_1.truncateString)(Object.entries(this._contains)
            .map(([element, isPresent]) => `${element}: ${isPresent ? 'true' : 'false'}`)
            .join(', '));
        return `${super.toString()}: ${display}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested set was not in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super();
        this.type = enums_1.CacheSetContainsElementsResponse.Miss;
    }
    containsElements() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the set contains element request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetContainsElementsResponse.Error;
    }
    containsElements() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWNvbnRhaW5zLWVsZW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS1zZXQtY29udGFpbnMtZWxlbWVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBSXlCO0FBQ3pCLGdEQUFvRDtBQUNwRCxtQ0FBeUQ7QUFFekQsTUFBTSxZQUFZLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQVl2Qzs7OztHQUlHO0FBQ0gsTUFBYSxHQUFJLFNBQVEsNEJBQVk7SUFLbkMsWUFBWSxRQUFzQixFQUFFLEtBQWdCO1FBQ2xELEtBQUssRUFBRSxDQUFDO1FBSkQsU0FBSSxHQUNYLHdDQUFnQyxDQUFDLEdBQUcsQ0FBQztRQUlyQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQzlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN0QixHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNqRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsRUFDRCxFQUFFLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7O09BR0c7SUFDSSxnQkFBZ0I7UUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUEsc0JBQWMsRUFDNUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQzNCLEdBQUcsQ0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsR0FBRyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUNoRDthQUNBLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDZCxDQUFDO1FBQ0YsT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxPQUFPLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0NBQ0Y7QUFuQ0Qsa0JBbUNDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLElBQUssU0FBUSxnQ0FBZ0I7SUFJeEM7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUpELFNBQUksR0FDWCx3Q0FBZ0MsQ0FBQyxJQUFJLENBQUM7SUFJeEMsQ0FBQztJQUVNLGdCQUFnQjtRQUNyQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFYRCxvQkFXQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUkxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUpoQixTQUFJLEdBQ1gsd0NBQWdDLENBQUMsS0FBSyxDQUFDO0lBSXpDLENBQUM7SUFFTSxnQkFBZ0I7UUFDckIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBWEQsc0JBV0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgQmFzZVJlc3BvbnNlRXJyb3IsXG4gIEJhc2VSZXNwb25zZU1pc3MsXG4gIFJlc3BvbnNlQmFzZSxcbn0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7dHJ1bmNhdGVTdHJpbmd9IGZyb20gJy4uLy4uL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7Q2FjaGVTZXRDb250YWluc0VsZW1lbnRzUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuXG5jb25zdCBURVhUX0RFQ09ERVIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbWFwcGluZyBvZiB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlc2VuY2UgaW4gdGhlIGNhY2hlLlxuICAgKiBAcmV0dXJucyB7UmVjb3JkPHN0cmluZywgYm9vbGVhbj4gfCB1bmRlZmluZWR9IEEgbWFwcGluZyBvZiB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlc2VuY2UgaW4gdGhlIGNhY2hlLlxuICAgKiBJZiB0aGUgc2V0IGl0c2VsZiB3YXMgbm90IGZvdW5kLCAoaWUgdGhlIHJlc3BvbnNlIHdhcyBhIGBNaXNzYCBvciBgRXJyb3JgKSwgdGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGNvbnRhaW5zRWxlbWVudHMoKTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU2V0Q29udGFpbnNFbGVtZW50c1Jlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgc2V0IHdhcyBpbiB0aGUgY2FjaGUuICBQcm92aWRlc1xuICogYSBgY29udGFpbnNFbGVtZW50c2AgYWNjZXNzb3IgdGhhdCByZXR1cm5zIGEgbWFwcGluZyBvZiB0aGUgZWxlbWVudHMgb2YgdGhlIHNldFxuICogdG8gdGhlaXIgcHJlc2VuY2UgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgSGl0IGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfY29udGFpbnM6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldENvbnRhaW5zRWxlbWVudHNSZXNwb25zZS5IaXQgPVxuICAgIENhY2hlU2V0Q29udGFpbnNFbGVtZW50c1Jlc3BvbnNlLkhpdDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50czogVWludDhBcnJheVtdLCBmb3VuZDogYm9vbGVhbltdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jb250YWlucyA9IGVsZW1lbnRzLnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCBib29sZWFuPj4oXG4gICAgICAoYWNjLCBlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICBhY2NbVEVYVF9ERUNPREVSLmRlY29kZShlbGVtZW50KV0gPSBmb3VuZFtpbmRleF07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAge31cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBtYXBwaW5nIG9mIHRoZSBlbGVtZW50cyB0byB0aGVpciBwcmVzZW5jZSBpbiB0aGUgY2FjaGUuXG4gICAqIEByZXR1cm5zIHtSZWNvcmQ8c3RyaW5nLCBib29sZWFuPn1cbiAgICovXG4gIHB1YmxpYyBjb250YWluc0VsZW1lbnRzKCk6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbnM7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBkaXNwbGF5ID0gdHJ1bmNhdGVTdHJpbmcoXG4gICAgICBPYmplY3QuZW50cmllcyh0aGlzLl9jb250YWlucylcbiAgICAgICAgLm1hcChcbiAgICAgICAgICAoW2VsZW1lbnQsIGlzUHJlc2VudF0pID0+XG4gICAgICAgICAgICBgJHtlbGVtZW50fTogJHtpc1ByZXNlbnQgPyAndHJ1ZScgOiAnZmFsc2UnfWBcbiAgICAgICAgKVxuICAgICAgICAuam9pbignLCAnKVxuICAgICk7XG4gICAgcmV0dXJuIGAke3N1cGVyLnRvU3RyaW5nKCl9OiAke2Rpc3BsYXl9YDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgc2V0IHdhcyBub3QgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWlzcyBleHRlbmRzIEJhc2VSZXNwb25zZU1pc3MgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldENvbnRhaW5zRWxlbWVudHNSZXNwb25zZS5NaXNzID1cbiAgICBDYWNoZVNldENvbnRhaW5zRWxlbWVudHNSZXNwb25zZS5NaXNzO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgY29udGFpbnNFbGVtZW50cygpOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgc2V0IGNvbnRhaW5zIGVsZW1lbnQgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRDb250YWluc0VsZW1lbnRzUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlU2V0Q29udGFpbnNFbGVtZW50c1Jlc3BvbnNlLkVycm9yO1xuXG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgcHVibGljIGNvbnRhaW5zRWxlbWVudHMoKTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBIaXQgfCBNaXNzIHwgRXJyb3I7XG4iXX0=