"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractStorageClient = void 0;
class AbstractStorageClient {
    constructor(dataClients, controlClient) {
        this.dataClients = dataClients;
        this.controlClient = controlClient;
        // We round-robin the requests through all of our clients.  Since javascript
        // is single-threaded, we don't have to worry about thread safety on this
        // index variable.
        this.nextDataClientIndex = 0;
    }
    createStore(storeName) {
        return this.controlClient.createStore(storeName);
    }
    listStores() {
        return this.controlClient.listStores();
    }
    deleteStore(storeName) {
        return this.controlClient.deleteStore(storeName);
    }
    get(storeName, key) {
        return this.getNextDataClient().get(storeName, key);
    }
    putInt(storeName, key, value) {
        return this.getNextDataClient().putInt(storeName, key, value);
    }
    putDouble(storeName, key, value) {
        return this.getNextDataClient().putDouble(storeName, key, value);
    }
    putString(storeName, key, value) {
        return this.getNextDataClient().putString(storeName, key, value);
    }
    putBytes(storeName, key, value) {
        return this.getNextDataClient().putBytes(storeName, key, value);
    }
    delete(storeName, key) {
        return this.getNextDataClient().delete(storeName, key);
    }
    getNextDataClient() {
        const client = this.dataClients[this.nextDataClientIndex];
        this.nextDataClientIndex =
            (this.nextDataClientIndex + 1) % this.dataClients.length;
        return client;
    }
}
exports.AbstractStorageClient = AbstractStorageClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RTdG9yYWdlQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2NsaWVudHMvc3RvcmFnZS9BYnN0cmFjdFN0b3JhZ2VDbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBWUEsTUFBc0IscUJBQXFCO0lBS3pDLFlBQ0UsV0FBaUMsRUFDakMsYUFBb0M7UUFFcEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFbkMsNEVBQTRFO1FBQzVFLHlFQUF5RTtRQUN6RSxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRUQsV0FBVyxDQUFDLFNBQWlCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELFdBQVcsQ0FBQyxTQUFpQjtRQUMzQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxHQUFHLENBQUMsU0FBaUIsRUFBRSxHQUFXO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsTUFBTSxDQUNKLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsU0FBUyxDQUNQLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsU0FBUyxDQUNQLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsUUFBUSxDQUNOLFNBQWlCLEVBQ2pCLEdBQVcsRUFDWCxLQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBaUIsRUFBRSxHQUFXO1FBQ25DLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLG1CQUFtQjtZQUN0QixDQUFDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUMzRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBR0Y7QUE5RUQsc0RBOEVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ3JlYXRlU3RvcmUsXG4gIERlbGV0ZVN0b3JlLFxuICBMaXN0U3RvcmVzLFxuICBTdG9yYWdlR2V0LFxuICBTdG9yYWdlUHV0LFxuICBTdG9yYWdlRGVsZXRlLFxufSBmcm9tICcuLi8uLi8uLi9pbmRleCc7XG5pbXBvcnQge0lTdG9yYWdlRGF0YUNsaWVudH0gZnJvbSAnLi9JU3RvcmFnZURhdGFDbGllbnQnO1xuaW1wb3J0IHtJU3RvcmFnZUNsaWVudH0gZnJvbSAnLi4vLi4vLi4vY2xpZW50cy9JU3RvcmFnZUNsaWVudCc7XG5pbXBvcnQge0lTdG9yYWdlQ29udHJvbENsaWVudH0gZnJvbSAnLi9JU3RvcmFnZUNvbnRyb2xDbGllbnQnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RTdG9yYWdlQ2xpZW50IGltcGxlbWVudHMgSVN0b3JhZ2VDbGllbnQge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGF0YUNsaWVudHM6IElTdG9yYWdlRGF0YUNsaWVudFtdO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udHJvbENsaWVudDogSVN0b3JhZ2VDb250cm9sQ2xpZW50O1xuICBwcml2YXRlIG5leHREYXRhQ2xpZW50SW5kZXg6IG51bWJlcjtcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgZGF0YUNsaWVudHM6IElTdG9yYWdlRGF0YUNsaWVudFtdLFxuICAgIGNvbnRyb2xDbGllbnQ6IElTdG9yYWdlQ29udHJvbENsaWVudFxuICApIHtcbiAgICB0aGlzLmRhdGFDbGllbnRzID0gZGF0YUNsaWVudHM7XG4gICAgdGhpcy5jb250cm9sQ2xpZW50ID0gY29udHJvbENsaWVudDtcblxuICAgIC8vIFdlIHJvdW5kLXJvYmluIHRoZSByZXF1ZXN0cyB0aHJvdWdoIGFsbCBvZiBvdXIgY2xpZW50cy4gIFNpbmNlIGphdmFzY3JpcHRcbiAgICAvLyBpcyBzaW5nbGUtdGhyZWFkZWQsIHdlIGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgdGhyZWFkIHNhZmV0eSBvbiB0aGlzXG4gICAgLy8gaW5kZXggdmFyaWFibGUuXG4gICAgdGhpcy5uZXh0RGF0YUNsaWVudEluZGV4ID0gMDtcbiAgfVxuXG4gIGNyZWF0ZVN0b3JlKHN0b3JlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDcmVhdGVTdG9yZS5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRyb2xDbGllbnQuY3JlYXRlU3RvcmUoc3RvcmVOYW1lKTtcbiAgfVxuXG4gIGxpc3RTdG9yZXMoKTogUHJvbWlzZTxMaXN0U3RvcmVzLlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbENsaWVudC5saXN0U3RvcmVzKCk7XG4gIH1cblxuICBkZWxldGVTdG9yZShzdG9yZU5hbWU6IHN0cmluZyk6IFByb21pc2U8RGVsZXRlU3RvcmUuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sQ2xpZW50LmRlbGV0ZVN0b3JlKHN0b3JlTmFtZSk7XG4gIH1cblxuICBnZXQoc3RvcmVOYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nKTogUHJvbWlzZTxTdG9yYWdlR2V0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5nZXQoc3RvcmVOYW1lLCBrZXkpO1xuICB9XG5cbiAgcHV0SW50KFxuICAgIHN0b3JlTmFtZTogc3RyaW5nLFxuICAgIGtleTogc3RyaW5nLFxuICAgIHZhbHVlOiBudW1iZXJcbiAgKTogUHJvbWlzZTxTdG9yYWdlUHV0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5wdXRJbnQoc3RvcmVOYW1lLCBrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHB1dERvdWJsZShcbiAgICBzdG9yZU5hbWU6IHN0cmluZyxcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogbnVtYmVyXG4gICk6IFByb21pc2U8U3RvcmFnZVB1dC5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmdldE5leHREYXRhQ2xpZW50KCkucHV0RG91YmxlKHN0b3JlTmFtZSwga2V5LCB2YWx1ZSk7XG4gIH1cblxuICBwdXRTdHJpbmcoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZ1xuICApOiBQcm9taXNlPFN0b3JhZ2VQdXQuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5nZXROZXh0RGF0YUNsaWVudCgpLnB1dFN0cmluZyhzdG9yZU5hbWUsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgcHV0Qnl0ZXMoXG4gICAgc3RvcmVOYW1lOiBzdHJpbmcsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgdmFsdWU6IFVpbnQ4QXJyYXlcbiAgKTogUHJvbWlzZTxTdG9yYWdlUHV0LlJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TmV4dERhdGFDbGllbnQoKS5wdXRCeXRlcyhzdG9yZU5hbWUsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgZGVsZXRlKHN0b3JlTmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZyk6IFByb21pc2U8U3RvcmFnZURlbGV0ZS5SZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmdldE5leHREYXRhQ2xpZW50KCkuZGVsZXRlKHN0b3JlTmFtZSwga2V5KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TmV4dERhdGFDbGllbnQoKTogSVN0b3JhZ2VEYXRhQ2xpZW50IHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmRhdGFDbGllbnRzW3RoaXMubmV4dERhdGFDbGllbnRJbmRleF07XG4gICAgdGhpcy5uZXh0RGF0YUNsaWVudEluZGV4ID1cbiAgICAgICh0aGlzLm5leHREYXRhQ2xpZW50SW5kZXggKyAxKSAlIHRoaXMuZGF0YUNsaWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBjbGllbnQ7XG4gIH1cblxuICBhYnN0cmFjdCBjbG9zZSgpOiB2b2lkO1xufVxuIl19