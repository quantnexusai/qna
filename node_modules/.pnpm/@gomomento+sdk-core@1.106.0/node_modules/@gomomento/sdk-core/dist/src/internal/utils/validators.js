"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMaxConcurrentRequests = exports.validateLeaderboardNumberOfElements = exports.validateLeaderboardCount = exports.validateLeaderboardOffset = exports.validateLeaderboardRanks = exports.validateLeaderboardName = exports.isBase64 = exports.validateDisposableTokenTokenID = exports.validateDisposableTokenExpiry = exports.validateTimeout = exports.validateValidForSeconds = exports.validateTtlSeconds = exports.validateTtlMinutes = exports.validateTopK = exports.validateNumDimensions = exports.validateIndexName = exports.validateWebhookName = exports.validateTopicName = exports.validateListSliceStartEnd = exports.validateListName = exports.validateDictionaryName = exports.validateSortedSetCount = exports.validateSortedSetOffset = exports.validateSortedSetScores = exports.validateSortedSetRanks = exports.validateSortedSetName = exports.validateSetPopCount = exports.validateSetSampleLimit = exports.validateSetName = exports.validateCacheKeyOrPrefix = exports.validateCacheName = exports.validateStoreName = void 0;
const errors_1 = require("../../errors");
const string_1 = require("./string");
function validateStoreName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('store name must not be empty');
    }
}
exports.validateStoreName = validateStoreName;
function validateCacheName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache name must not be empty');
    }
}
exports.validateCacheName = validateCacheName;
function validateCacheKeyOrPrefix(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache key or key prefix must not be empty');
    }
}
exports.validateCacheKeyOrPrefix = validateCacheKeyOrPrefix;
function validateSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('set name must not be empty');
    }
}
exports.validateSetName = validateSetName;
function validateSetSampleLimit(limit) {
    if (limit < 0) {
        throw new errors_1.InvalidArgumentError('limit must be non-negative (>= 0)');
    }
}
exports.validateSetSampleLimit = validateSetSampleLimit;
function validateSetPopCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be positive (> 0)');
    }
}
exports.validateSetPopCount = validateSetPopCount;
function validateSortedSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('sorted set name must not be empty');
    }
}
exports.validateSortedSetName = validateSortedSetName;
function validateSortedSetRanks(start_rank, end_rank) {
    if (end_rank === undefined) {
        return;
    }
    if (start_rank > 0 && end_rank > 0 && start_rank > end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 && end_rank < 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('negative start rank must be less than negative end rank');
    }
}
exports.validateSortedSetRanks = validateSortedSetRanks;
function validateSortedSetScores(minScore, maxScore) {
    if (minScore === undefined)
        return;
    if (maxScore === undefined)
        return;
    if (minScore > maxScore) {
        throw new errors_1.InvalidArgumentError('minScore must be less than or equal to maxScore');
    }
}
exports.validateSortedSetScores = validateSortedSetScores;
function validateSortedSetOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateSortedSetOffset = validateSortedSetOffset;
function validateSortedSetCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateSortedSetCount = validateSortedSetCount;
function validateDictionaryName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('dictionary name must not be empty');
    }
}
exports.validateDictionaryName = validateDictionaryName;
function validateListName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('list name must not be empty');
    }
}
exports.validateListName = validateListName;
function validateListSliceStartEnd(startIndex, endIndex) {
    if (startIndex === undefined || endIndex === undefined)
        return;
    // can't validate bounds for start and index of either or are negative without list length
    if (startIndex > 0 || endIndex < 0)
        return;
    if (endIndex <= startIndex) {
        throw new errors_1.InvalidArgumentError('endIndex (exclusive) must be larger than startIndex (inclusive)');
    }
}
exports.validateListSliceStartEnd = validateListSliceStartEnd;
function validateTopicName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('topic name must not be empty');
    }
}
exports.validateTopicName = validateTopicName;
function validateWebhookName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('webhook name must not be empty');
    }
}
exports.validateWebhookName = validateWebhookName;
function validateIndexName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('index name must not be empty');
    }
}
exports.validateIndexName = validateIndexName;
function validateNumDimensions(numDimensions) {
    if (numDimensions <= 0) {
        throw new errors_1.InvalidArgumentError('numDimensions must be greater than zero');
    }
}
exports.validateNumDimensions = validateNumDimensions;
function validateTopK(topK) {
    if (topK <= 0) {
        throw new errors_1.InvalidArgumentError('topK must be greater than zero');
    }
}
exports.validateTopK = validateTopK;
function validateTtlMinutes(ttlMinutes) {
    if (ttlMinutes < 0 || !Number.isSafeInteger(ttlMinutes)) {
        throw new errors_1.InvalidArgumentError('ttlMinutes must be a positive integer');
    }
}
exports.validateTtlMinutes = validateTtlMinutes;
// Currently accepting ttl in seconds, but if someone requests support for millis,
// the validator will need to check for Number.isSafeInteger(ttl * 1000).
function validateTtlSeconds(ttl) {
    if (ttl < 0 || !Number.isSafeInteger(ttl)) {
        throw new errors_1.InvalidArgumentError(`ttl must be a positive integer, received ${ttl}`);
    }
}
exports.validateTtlSeconds = validateTtlSeconds;
function validateValidForSeconds(validForSeconds) {
    if (validForSeconds < 0) {
        throw new errors_1.InvalidArgumentError('validForSeconds must be positive');
    }
}
exports.validateValidForSeconds = validateValidForSeconds;
function validateTimeout(timeout) {
    if (timeout < 0) {
        throw new errors_1.InvalidArgumentError('timeout must be positive');
    }
}
exports.validateTimeout = validateTimeout;
function validateDisposableTokenExpiry(expiresIn) {
    if (!expiresIn.doesExpire()) {
        throw new errors_1.InvalidArgumentError('disposable tokens must have an expiry');
    }
    if (expiresIn.seconds() < 0) {
        throw new errors_1.InvalidArgumentError('disposable token expiry must be positive');
    }
    if (expiresIn.seconds() > 60 * 60) {
        // 60 seconds * 60 minutes
        throw new errors_1.InvalidArgumentError('disposable tokens must expire within 1 hour');
    }
}
exports.validateDisposableTokenExpiry = validateDisposableTokenExpiry;
function validateDisposableTokenTokenID(tokenId) {
    if (tokenId.length > 64) {
        throw new errors_1.InvalidArgumentError('TokenID must be less than or equal to 64 characters.');
    }
}
exports.validateDisposableTokenTokenID = validateDisposableTokenTokenID;
function isEmpty(str) {
    return !str.trim();
}
function isBase64(str) {
    try {
        return (0, string_1.encodeToBase64)((0, string_1.decodeFromBase64)(str)) === str;
    }
    catch (e) {
        return false;
    }
}
exports.isBase64 = isBase64;
function validateLeaderboardName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('leaderboard name must not be empty');
    }
}
exports.validateLeaderboardName = validateLeaderboardName;
function validateLeaderboardRanks(start_rank, end_rank) {
    if (start_rank > 0 && end_rank > 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 || end_rank < 0) {
        throw new errors_1.InvalidArgumentError('ranks must be positive');
    }
}
exports.validateLeaderboardRanks = validateLeaderboardRanks;
function validateLeaderboardOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateLeaderboardOffset = validateLeaderboardOffset;
function validateLeaderboardCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateLeaderboardCount = validateLeaderboardCount;
function validateLeaderboardNumberOfElements(numElements) {
    if (numElements < 1) {
        throw new errors_1.InvalidArgumentError('must provide at least one element');
    }
}
exports.validateLeaderboardNumberOfElements = validateLeaderboardNumberOfElements;
function validateMaxConcurrentRequests(limit) {
    if (limit < 1) {
        throw new errors_1.InvalidArgumentError('concurrent requests limit must be strictly positive (> 0)');
    }
}
exports.validateMaxConcurrentRequests = validateMaxConcurrentRequests;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbnRlcm5hbC91dGlscy92YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFrRDtBQUVsRCxxQ0FBMEQ7QUFFMUQsU0FBZ0IsaUJBQWlCLENBQUMsSUFBWTtJQUM1QyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNqQixNQUFNLElBQUksNkJBQW9CLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNoRTtBQUNILENBQUM7QUFKRCw4Q0FJQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLElBQVk7SUFDNUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLDZCQUFvQixDQUFDLDhCQUE4QixDQUFDLENBQUM7S0FDaEU7QUFDSCxDQUFDO0FBSkQsOENBSUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxJQUFZO0lBQ25ELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2pCLE1BQU0sSUFBSSw2QkFBb0IsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQztBQUpELDREQUlDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLElBQVk7SUFDMUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLDZCQUFvQixDQUFDLDRCQUE0QixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDO0FBSkQsMENBSUM7QUFFRCxTQUFnQixzQkFBc0IsQ0FBQyxLQUFhO0lBQ2xELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNiLE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0tBQ3JFO0FBQ0gsQ0FBQztBQUpELHdEQUlDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsS0FBYTtJQUMvQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7UUFDYixN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QUFDLEVBQUU7UUFDYixNQUFNLElBQUksNkJBQW9CLENBQzVCLDJEQUEyRCxDQUM1RCxDQUFDO0tBQ0g7QUFDSCxDQUFDO0FBTkQsc0VBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0ludmFsaWRBcmd1bWVudEVycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtFeHBpcmVzSW59IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7ZGVjb2RlRnJvbUJhc2U2NCwgZW5jb2RlVG9CYXNlNjR9IGZyb20gJy4vc3RyaW5nJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU3RvcmVOYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc3RvcmUgbmFtZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNhY2hlTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgaWYgKGlzRW1wdHkobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2NhY2hlIG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDYWNoZUtleU9yUHJlZml4KG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignY2FjaGUga2V5IG9yIGtleSBwcmVmaXggbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTZXROYW1lKG5hbWU6IHN0cmluZykge1xuICBpZiAoaXNFbXB0eShuYW1lKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignc2V0IG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTZXRTYW1wbGVMaW1pdChsaW1pdDogbnVtYmVyKSB7XG4gIGlmIChsaW1pdCA8IDApIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2xpbWl0IG11c3QgYmUgbm9uLW5lZ2F0aXZlICg+PSAwKScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNldFBvcENvdW50KGNvdW50OiBudW1iZXIpIHtcbiAgaWYgKGNvdW50IDwgMSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignY291bnQgbXVzdCBiZSBwb3NpdGl2ZSAoPiAwKScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNvcnRlZFNldE5hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzb3J0ZWQgc2V0IG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTb3J0ZWRTZXRSYW5rcyhzdGFydF9yYW5rOiBudW1iZXIsIGVuZF9yYW5rPzogbnVtYmVyKSB7XG4gIGlmIChlbmRfcmFuayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzdGFydF9yYW5rID4gMCAmJiBlbmRfcmFuayA+IDAgJiYgc3RhcnRfcmFuayA+IGVuZF9yYW5rKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzdGFydCByYW5rIG11c3QgYmUgbGVzcyB0aGFuIGVuZCByYW5rJyk7XG4gIH1cbiAgaWYgKHN0YXJ0X3JhbmsgPCAwICYmIGVuZF9yYW5rIDwgMCAmJiBzdGFydF9yYW5rID49IGVuZF9yYW5rKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ25lZ2F0aXZlIHN0YXJ0IHJhbmsgbXVzdCBiZSBsZXNzIHRoYW4gbmVnYXRpdmUgZW5kIHJhbmsnXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTb3J0ZWRTZXRTY29yZXMobWluU2NvcmU/OiBudW1iZXIsIG1heFNjb3JlPzogbnVtYmVyKSB7XG4gIGlmIChtaW5TY29yZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmIChtYXhTY29yZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmIChtaW5TY29yZSA+IG1heFNjb3JlKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ21pblNjb3JlIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIG1heFNjb3JlJ1xuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU29ydGVkU2V0T2Zmc2V0KG9mZnNldDogbnVtYmVyKSB7XG4gIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdvZmZzZXQgbXVzdCBiZSBub24tbmVnYXRpdmUgKD49IDApJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU29ydGVkU2V0Q291bnQoY291bnQ6IG51bWJlcikge1xuICBpZiAoY291bnQgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdjb3VudCBtdXN0IGJlIHN0cmljdGx5IHBvc2l0aXZlICg+IDApJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGljdGlvbmFyeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdkaWN0aW9uYXJ5IG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVMaXN0TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgaWYgKGlzRW1wdHkobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2xpc3QgbmFtZSBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUxpc3RTbGljZVN0YXJ0RW5kKFxuICBzdGFydEluZGV4PzogbnVtYmVyLFxuICBlbmRJbmRleD86IG51bWJlclxuKSB7XG4gIGlmIChzdGFydEluZGV4ID09PSB1bmRlZmluZWQgfHwgZW5kSW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAvLyBjYW4ndCB2YWxpZGF0ZSBib3VuZHMgZm9yIHN0YXJ0IGFuZCBpbmRleCBvZiBlaXRoZXIgb3IgYXJlIG5lZ2F0aXZlIHdpdGhvdXQgbGlzdCBsZW5ndGhcbiAgaWYgKHN0YXJ0SW5kZXggPiAwIHx8IGVuZEluZGV4IDwgMCkgcmV0dXJuO1xuICBpZiAoZW5kSW5kZXggPD0gc3RhcnRJbmRleCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICdlbmRJbmRleCAoZXhjbHVzaXZlKSBtdXN0IGJlIGxhcmdlciB0aGFuIHN0YXJ0SW5kZXggKGluY2x1c2l2ZSknXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUb3BpY05hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCd0b3BpYyBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlV2ViaG9va05hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCd3ZWJob29rIG5hbWUgbXVzdCBub3QgYmUgZW1wdHknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVJbmRleE5hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdpbmRleCBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTnVtRGltZW5zaW9ucyhudW1EaW1lbnNpb25zOiBudW1iZXIpIHtcbiAgaWYgKG51bURpbWVuc2lvbnMgPD0gMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignbnVtRGltZW5zaW9ucyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVG9wSyh0b3BLOiBudW1iZXIpIHtcbiAgaWYgKHRvcEsgPD0gMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndG9wSyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVHRsTWludXRlcyh0dGxNaW51dGVzOiBudW1iZXIpIHtcbiAgaWYgKHR0bE1pbnV0ZXMgPCAwIHx8ICFOdW1iZXIuaXNTYWZlSW50ZWdlcih0dGxNaW51dGVzKSkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigndHRsTWludXRlcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICB9XG59XG5cbi8vIEN1cnJlbnRseSBhY2NlcHRpbmcgdHRsIGluIHNlY29uZHMsIGJ1dCBpZiBzb21lb25lIHJlcXVlc3RzIHN1cHBvcnQgZm9yIG1pbGxpcyxcbi8vIHRoZSB2YWxpZGF0b3Igd2lsbCBuZWVkIHRvIGNoZWNrIGZvciBOdW1iZXIuaXNTYWZlSW50ZWdlcih0dGwgKiAxMDAwKS5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVR0bFNlY29uZHModHRsOiBudW1iZXIpIHtcbiAgaWYgKHR0bCA8IDAgfHwgIU51bWJlci5pc1NhZmVJbnRlZ2VyKHR0bCkpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICBgdHRsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCByZWNlaXZlZCAke3R0bH1gXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVWYWxpZEZvclNlY29uZHModmFsaWRGb3JTZWNvbmRzOiBudW1iZXIpIHtcbiAgaWYgKHZhbGlkRm9yU2Vjb25kcyA8IDApIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ3ZhbGlkRm9yU2Vjb25kcyBtdXN0IGJlIHBvc2l0aXZlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVGltZW91dCh0aW1lb3V0OiBudW1iZXIpIHtcbiAgaWYgKHRpbWVvdXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCd0aW1lb3V0IG11c3QgYmUgcG9zaXRpdmUnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEaXNwb3NhYmxlVG9rZW5FeHBpcnkoZXhwaXJlc0luOiBFeHBpcmVzSW4pIHtcbiAgaWYgKCFleHBpcmVzSW4uZG9lc0V4cGlyZSgpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdkaXNwb3NhYmxlIHRva2VucyBtdXN0IGhhdmUgYW4gZXhwaXJ5Jyk7XG4gIH1cbiAgaWYgKGV4cGlyZXNJbi5zZWNvbmRzKCkgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdkaXNwb3NhYmxlIHRva2VuIGV4cGlyeSBtdXN0IGJlIHBvc2l0aXZlJyk7XG4gIH1cbiAgaWYgKGV4cGlyZXNJbi5zZWNvbmRzKCkgPiA2MCAqIDYwKSB7XG4gICAgLy8gNjAgc2Vjb25kcyAqIDYwIG1pbnV0ZXNcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAnZGlzcG9zYWJsZSB0b2tlbnMgbXVzdCBleHBpcmUgd2l0aGluIDEgaG91cidcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZURpc3Bvc2FibGVUb2tlblRva2VuSUQodG9rZW5JZDogc3RyaW5nKSB7XG4gIGlmICh0b2tlbklkLmxlbmd0aCA+IDY0KSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ1Rva2VuSUQgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gNjQgY2hhcmFjdGVycy4nXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAhc3RyLnRyaW0oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFzZTY0KHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVRvQmFzZTY0KGRlY29kZUZyb21CYXNlNjQoc3RyKSkgPT09IHN0cjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVMZWFkZXJib2FyZE5hbWUobmFtZTogc3RyaW5nKSB7XG4gIGlmIChpc0VtcHR5KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdsZWFkZXJib2FyZCBuYW1lIG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTGVhZGVyYm9hcmRSYW5rcyhzdGFydF9yYW5rOiBudW1iZXIsIGVuZF9yYW5rOiBudW1iZXIpIHtcbiAgaWYgKHN0YXJ0X3JhbmsgPiAwICYmIGVuZF9yYW5rID4gMCAmJiBzdGFydF9yYW5rID49IGVuZF9yYW5rKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdzdGFydCByYW5rIG11c3QgYmUgbGVzcyB0aGFuIGVuZCByYW5rJyk7XG4gIH1cbiAgaWYgKHN0YXJ0X3JhbmsgPCAwIHx8IGVuZF9yYW5rIDwgMCkge1xuICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcigncmFua3MgbXVzdCBiZSBwb3NpdGl2ZScpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUxlYWRlcmJvYXJkT2Zmc2V0KG9mZnNldDogbnVtYmVyKSB7XG4gIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdvZmZzZXQgbXVzdCBiZSBub24tbmVnYXRpdmUgKD49IDApJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlTGVhZGVyYm9hcmRDb3VudChjb3VudDogbnVtYmVyKSB7XG4gIGlmIChjb3VudCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ2NvdW50IG11c3QgYmUgc3RyaWN0bHkgcG9zaXRpdmUgKD4gMCknKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVMZWFkZXJib2FyZE51bWJlck9mRWxlbWVudHMobnVtRWxlbWVudHM6IG51bWJlcikge1xuICBpZiAobnVtRWxlbWVudHMgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdtdXN0IHByb3ZpZGUgYXQgbGVhc3Qgb25lIGVsZW1lbnQnKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVNYXhDb25jdXJyZW50UmVxdWVzdHMobGltaXQ6IG51bWJlcikge1xuICBpZiAobGltaXQgPCAxKSB7XG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgJ2NvbmN1cnJlbnQgcmVxdWVzdHMgbGltaXQgbXVzdCBiZSBzdHJpY3RseSBwb3NpdGl2ZSAoPiAwKSdcbiAgICApO1xuICB9XG59XG4iXX0=