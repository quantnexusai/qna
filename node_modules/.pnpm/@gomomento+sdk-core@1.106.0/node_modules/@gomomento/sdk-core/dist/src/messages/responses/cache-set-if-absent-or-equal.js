"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.NotStored = exports.Stored = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates the new value was set because the key did not exist or the existing item was equal to the supplied `equal` value.
 */
class Stored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfAbsentOrEqualResponse.Stored;
    }
}
exports.Stored = Stored;
/**
 * Indicates that no value was set because the existing item was not equal to the supplied `equal` value.
 */
class NotStored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfAbsentOrEqualResponse.NotStored;
    }
}
exports.NotStored = NotStored;
/**
 * Indicates that an error occurred during the setIfAbsentOrEqual request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetIfAbsentOrEqualResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWlmLWFic2VudC1vci1lcXVhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtc2V0LWlmLWFic2VudC1vci1lcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBZ0U7QUFDaEUsbUNBQXdEO0FBTXhEOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsNEJBQVk7SUFBeEM7O1FBQ1csU0FBSSxHQUNYLHVDQUErQixDQUFDLE1BQU0sQ0FBQztJQUMzQyxDQUFDO0NBQUE7QUFIRCx3QkFHQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUFBM0M7O1FBQ1csU0FBSSxHQUNYLHVDQUErQixDQUFDLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0NBQUE7QUFIRCw4QkFHQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUdoQixTQUFJLEdBQ1gsdUNBQStCLENBQUMsS0FBSyxDQUFDO0lBSHhDLENBQUM7Q0FJRjtBQVBELHNCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIFJlc3BvbnNlQmFzZX0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7Q2FjaGVTZXRJZkFic2VudE9yRXF1YWxSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmQWJzZW50T3JFcXVhbFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgbmV3IHZhbHVlIHdhcyBzZXQgYmVjYXVzZSB0aGUga2V5IGRpZCBub3QgZXhpc3Qgb3IgdGhlIGV4aXN0aW5nIGl0ZW0gd2FzIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBgZXF1YWxgIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmVkIGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZkFic2VudE9yRXF1YWxSZXNwb25zZS5TdG9yZWQgPVxuICAgIENhY2hlU2V0SWZBYnNlbnRPckVxdWFsUmVzcG9uc2UuU3RvcmVkO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IG5vIHZhbHVlIHdhcyBzZXQgYmVjYXVzZSB0aGUgZXhpc3RpbmcgaXRlbSB3YXMgbm90IGVxdWFsIHRvIHRoZSBzdXBwbGllZCBgZXF1YWxgIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgTm90U3RvcmVkIGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZkFic2VudE9yRXF1YWxSZXNwb25zZS5Ob3RTdG9yZWQgPVxuICAgIENhY2hlU2V0SWZBYnNlbnRPckVxdWFsUmVzcG9uc2UuTm90U3RvcmVkO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgc2V0SWZBYnNlbnRPckVxdWFsIHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZkFic2VudE9yRXF1YWxSZXNwb25zZS5FcnJvciA9XG4gICAgQ2FjaGVTZXRJZkFic2VudE9yRXF1YWxSZXNwb25zZS5FcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTdG9yZWQgfCBOb3RTdG9yZWQgfCBFcnJvcjtcbiJdfQ==