"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates a successful keys exist request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(keys, exists) {
        super();
        this.type = enums_1.CacheKeysExistResponse.Success;
        this._keys = keys;
        this._exists = exists;
    }
    /**
     * A list of booleans indicating whether each given key was found in the cache.
     * @returns {boolean[]}
     */
    exists() {
        return this._exists;
    }
    /**
     * A record of key-exists pairs indicating whether each given key was found in the cache.
     * @returns {Record<string, boolean>}
     */
    valueRecord() {
        return this._keys.reduce((acc, field, index) => {
            acc[TEXT_DECODER.decode(field)] = this._exists[index];
            return acc;
        }, {});
    }
    toString() {
        const booleans = this._exists.map(bool => bool);
        return super.toString() + ': exists: ' + booleans.join(', ');
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the keys exist request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheKeysExistResponse.Error;
    }
    exists() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUta2V5cy1leGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUta2V5cy1leGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBdUU7QUFDdkUsbUNBQStDO0FBRS9DLE1BQU0sWUFBWSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFPdkM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFPOUMsWUFBWSxJQUFrQixFQUFFLE1BQWlCO1FBQy9DLEtBQUssRUFBRSxDQUFDO1FBUEQsU0FBSSxHQUNYLDhCQUFzQixDQUFDLE9BQU8sQ0FBQztRQU8vQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUEwQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDdEUsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3RELE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVlLFFBQVE7UUFDdEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxZQUFZLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRCxDQUFDO0NBQ0Y7QUFwQ0QsMEJBb0NDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBRzFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSGhCLFNBQUksR0FBaUMsOEJBQXNCLENBQUMsS0FBSyxDQUFDO0lBSTNFLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBVkQsc0JBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtCYXNlUmVzcG9uc2VFcnJvciwgQmFzZVJlc3BvbnNlU3VjY2Vzc30gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7Q2FjaGVLZXlzRXhpc3RSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmNvbnN0IFRFWFRfREVDT0RFUiA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgZXhpc3RzKCk6IGJvb2xlYW5bXSB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVLZXlzRXhpc3RSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBzdWNjZXNzZnVsIGtleXMgZXhpc3QgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVLZXlzRXhpc3RSZXNwb25zZS5TdWNjZXNzID1cbiAgICBDYWNoZUtleXNFeGlzdFJlc3BvbnNlLlN1Y2Nlc3M7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfa2V5czogVWludDhBcnJheVtdO1xuICBwcml2YXRlIHJlYWRvbmx5IF9leGlzdHM6IGJvb2xlYW5bXTtcblxuICBjb25zdHJ1Y3RvcihrZXlzOiBVaW50OEFycmF5W10sIGV4aXN0czogYm9vbGVhbltdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9rZXlzID0ga2V5cztcbiAgICB0aGlzLl9leGlzdHMgPSBleGlzdHM7XG4gIH1cblxuICAvKipcbiAgICogQSBsaXN0IG9mIGJvb2xlYW5zIGluZGljYXRpbmcgd2hldGhlciBlYWNoIGdpdmVuIGtleSB3YXMgZm91bmQgaW4gdGhlIGNhY2hlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbltdfVxuICAgKi9cbiAgcHVibGljIGV4aXN0cygpOiBib29sZWFuW10ge1xuICAgIHJldHVybiB0aGlzLl9leGlzdHM7XG4gIH1cblxuICAvKipcbiAgICogQSByZWNvcmQgb2Yga2V5LWV4aXN0cyBwYWlycyBpbmRpY2F0aW5nIHdoZXRoZXIgZWFjaCBnaXZlbiBrZXkgd2FzIGZvdW5kIGluIHRoZSBjYWNoZS5cbiAgICogQHJldHVybnMge1JlY29yZDxzdHJpbmcsIGJvb2xlYW4+fVxuICAgKi9cbiAgcHVibGljIHZhbHVlUmVjb3JkKCk6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5fa2V5cy5yZWR1Y2U8UmVjb3JkPHN0cmluZywgYm9vbGVhbj4+KChhY2MsIGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgYWNjW1RFWFRfREVDT0RFUi5kZWNvZGUoZmllbGQpXSA9IHRoaXMuX2V4aXN0c1tpbmRleF07XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJvb2xlYW5zID0gdGhpcy5fZXhpc3RzLm1hcChib29sID0+IGJvb2wpO1xuICAgIHJldHVybiBzdXBlci50b1N0cmluZygpICsgJzogZXhpc3RzOiAnICsgYm9vbGVhbnMuam9pbignLCAnKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUga2V5cyBleGlzdCByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUtleXNFeGlzdFJlc3BvbnNlLkVycm9yID0gQ2FjaGVLZXlzRXhpc3RSZXNwb25zZS5FcnJvcjtcblxuICBjb25zdHJ1Y3RvcihfaW5uZXJFeGNlcHRpb246IFNka0Vycm9yKSB7XG4gICAgc3VwZXIoX2lubmVyRXhjZXB0aW9uKTtcbiAgfVxuXG4gIGV4aXN0cygpOiB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTdWNjZXNzIHwgRXJyb3I7XG4iXX0=