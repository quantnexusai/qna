"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("../response-base");
const enums_1 = require("../enums");
/**
 * Indicates a Successful leaderboard fetch request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(elements) {
        super();
        this.type = enums_1.LeaderboardFetchResponse.Success;
        this._elements = elements;
    }
    /**
     * Returns the elements as an array of objects, each containing an `id`, `score`, and `rank` field.
     * @returns {{id: number, score: number, rank: number}[]}
     */
    values() {
        return this._elements.map(item => {
            return {
                id: item.id,
                score: item.score,
                rank: item.rank,
            };
        });
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the leaderboard fetch by rank or by score request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.LeaderboardFetchResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZGVyYm9hcmQtZmV0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2xlYWRlcmJvYXJkL2xlYWRlcmJvYXJkLWZldGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLG9EQUF3RTtBQUN4RSxvQ0FBa0Q7QUFNbEQ7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFLOUMsWUFBWSxRQUEwQjtRQUNwQyxLQUFLLEVBQUUsQ0FBQztRQUxELFNBQUksR0FDWCxnQ0FBd0IsQ0FBQyxPQUFPLENBQUM7UUFLakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE9BQU87Z0JBQ0wsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNYLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2hCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXZCRCwwQkF1QkM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFJMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFKaEIsU0FBSSxHQUNYLGdDQUF3QixDQUFDLEtBQUssQ0FBQztJQUlqQyxDQUFDO0NBQ0Y7QUFQRCxzQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge19SYW5rZWRFbGVtZW50fSBmcm9tICcuLi9ncnBjLXJlc3BvbnNlLXR5cGVzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIEJhc2VSZXNwb25zZVN1Y2Nlc3N9IGZyb20gJy4uL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtMZWFkZXJib2FyZEZldGNoUmVzcG9uc2V9IGZyb20gJy4uL2VudW1zJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExlYWRlcmJvYXJkRmV0Y2hSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBTdWNjZXNzZnVsIGxlYWRlcmJvYXJkIGZldGNoIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWNjZXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlU3VjY2VzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExlYWRlcmJvYXJkRmV0Y2hSZXNwb25zZS5TdWNjZXNzID1cbiAgICBMZWFkZXJib2FyZEZldGNoUmVzcG9uc2UuU3VjY2VzcztcbiAgcHJpdmF0ZSByZWFkb25seSBfZWxlbWVudHM6IF9SYW5rZWRFbGVtZW50W107XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudHM6IF9SYW5rZWRFbGVtZW50W10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2VsZW1lbnRzID0gZWxlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZWxlbWVudHMgYXMgYW4gYXJyYXkgb2Ygb2JqZWN0cywgZWFjaCBjb250YWluaW5nIGFuIGBpZGAsIGBzY29yZWAsIGFuZCBgcmFua2AgZmllbGQuXG4gICAqIEByZXR1cm5zIHt7aWQ6IG51bWJlciwgc2NvcmU6IG51bWJlciwgcmFuazogbnVtYmVyfVtdfVxuICAgKi9cbiAgcHVibGljIHZhbHVlcygpOiB7aWQ6IG51bWJlcjsgc2NvcmU6IG51bWJlcjsgcmFuazogbnVtYmVyfVtdIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudHMubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHNjb3JlOiBpdGVtLnNjb3JlLFxuICAgICAgICByYW5rOiBpdGVtLnJhbmssXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBsZWFkZXJib2FyZCBmZXRjaCBieSByYW5rIG9yIGJ5IHNjb3JlIHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExlYWRlcmJvYXJkRmV0Y2hSZXNwb25zZS5FcnJvciA9XG4gICAgTGVhZGVyYm9hcmRGZXRjaFJlc3BvbnNlLkVycm9yO1xuXG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19