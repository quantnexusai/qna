"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.NotStored = exports.Stored = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates the new value was set because the key already exists and the existing item was not equal to the supplied `notEqual` value.
 */
class Stored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfPresentAndNotEqualResponse.Stored;
    }
}
exports.Stored = Stored;
/**
 * Indicates that no value was set because the key did not exist or the existing item was equal to the supplied `notEqual` value.
 */
class NotStored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfPresentAndNotEqualResponse.NotStored;
    }
}
exports.NotStored = NotStored;
/**
 * Indicates that an error occurred during the setIfPresentAndNotEqual request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetIfPresentAndNotEqualResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWlmLXByZXNlbnQtYW5kLW5vdC1lcXVhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtc2V0LWlmLXByZXNlbnQtYW5kLW5vdC1lcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBZ0U7QUFDaEUsbUNBQTZEO0FBTTdEOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsNEJBQVk7SUFBeEM7O1FBQ1csU0FBSSxHQUNYLDRDQUFvQyxDQUFDLE1BQU0sQ0FBQztJQUNoRCxDQUFDO0NBQUE7QUFIRCx3QkFHQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUFBM0M7O1FBQ1csU0FBSSxHQUNYLDRDQUFvQyxDQUFDLFNBQVMsQ0FBQztJQUNuRCxDQUFDO0NBQUE7QUFIRCw4QkFHQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUdoQixTQUFJLEdBQ1gsNENBQW9DLENBQUMsS0FBSyxDQUFDO0lBSDdDLENBQUM7Q0FJRjtBQVBELHNCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIFJlc3BvbnNlQmFzZX0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7Q2FjaGVTZXRJZlByZXNlbnRBbmROb3RFcXVhbFJlc3BvbnNlfSBmcm9tICcuL2VudW1zJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU2V0SWZQcmVzZW50QW5kTm90RXF1YWxSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhlIG5ldyB2YWx1ZSB3YXMgc2V0IGJlY2F1c2UgdGhlIGtleSBhbHJlYWR5IGV4aXN0cyBhbmQgdGhlIGV4aXN0aW5nIGl0ZW0gd2FzIG5vdCBlcXVhbCB0byB0aGUgc3VwcGxpZWQgYG5vdEVxdWFsYCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JlZCBleHRlbmRzIFJlc3BvbnNlQmFzZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU2V0SWZQcmVzZW50QW5kTm90RXF1YWxSZXNwb25zZS5TdG9yZWQgPVxuICAgIENhY2hlU2V0SWZQcmVzZW50QW5kTm90RXF1YWxSZXNwb25zZS5TdG9yZWQ7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgbm8gdmFsdWUgd2FzIHNldCBiZWNhdXNlIHRoZSBrZXkgZGlkIG5vdCBleGlzdCBvciB0aGUgZXhpc3RpbmcgaXRlbSB3YXMgZXF1YWwgdG8gdGhlIHN1cHBsaWVkIGBub3RFcXVhbGAgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RTdG9yZWQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmUHJlc2VudEFuZE5vdEVxdWFsUmVzcG9uc2UuTm90U3RvcmVkID1cbiAgICBDYWNoZVNldElmUHJlc2VudEFuZE5vdEVxdWFsUmVzcG9uc2UuTm90U3RvcmVkO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgc2V0SWZQcmVzZW50QW5kTm90RXF1YWwgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmUHJlc2VudEFuZE5vdEVxdWFsUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlU2V0SWZQcmVzZW50QW5kTm90RXF1YWxSZXNwb25zZS5FcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTdG9yZWQgfCBOb3RTdG9yZWQgfCBFcnJvcjtcbiJdfQ==