"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a successful item get type request.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(keyType) {
        super();
        this.type = enums_1.CacheItemGetTypeResponse.Hit;
        this.keyType = keyType;
    }
    /**
     * Returns the type of key.
     * @returns {ItemType}
     */
    itemType() {
        return this.keyType;
    }
    toString() {
        return `${super.toString()}: item type: ${this.keyType}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested item was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super();
        this.type = enums_1.CacheItemGetTypeResponse.Miss;
    }
    itemType() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the item get type request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheItemGetTypeResponse.Error;
    }
    itemType() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtaXRlbS1nZXQtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtaXRlbS1nZXQtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFJeUI7QUFDekIsbUNBQWlEO0FBUWpEOztHQUVHO0FBQ0gsTUFBYSxHQUFJLFNBQVEsNEJBQVk7SUFJbkMsWUFBWSxPQUFpQjtRQUMzQixLQUFLLEVBQUUsQ0FBQztRQUpELFNBQUksR0FBaUMsZ0NBQXdCLENBQUMsR0FBRyxDQUFDO1FBS3pFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxRQUFRO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLGdCQUFnQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBcEJELGtCQW9CQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsZ0NBQWdCO0lBR3hDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFIRCxTQUFJLEdBQWtDLGdDQUF3QixDQUFDLElBQUksQ0FBQztJQUk3RSxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQVZELG9CQVVDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBSTFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSmhCLFNBQUksR0FDWCxnQ0FBd0IsQ0FBQyxLQUFLLENBQUM7SUFJakMsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFYRCxzQkFXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge1xuICBCYXNlUmVzcG9uc2VFcnJvcixcbiAgQmFzZVJlc3BvbnNlTWlzcyxcbiAgUmVzcG9uc2VCYXNlLFxufSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZUl0ZW1HZXRUeXBlUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuaW1wb3J0IHtJdGVtVHlwZX0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgaXRlbVR5cGUoKTogSXRlbVR5cGUgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlSXRlbUdldFR5cGVSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBzdWNjZXNzZnVsIGl0ZW0gZ2V0IHR5cGUgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEhpdCBleHRlbmRzIFJlc3BvbnNlQmFzZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlSXRlbUdldFR5cGVSZXNwb25zZS5IaXQgPSBDYWNoZUl0ZW1HZXRUeXBlUmVzcG9uc2UuSGl0O1xuICBwcml2YXRlIHJlYWRvbmx5IGtleVR5cGU6IEl0ZW1UeXBlO1xuXG4gIGNvbnN0cnVjdG9yKGtleVR5cGU6IEl0ZW1UeXBlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmtleVR5cGUgPSBrZXlUeXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHR5cGUgb2Yga2V5LlxuICAgKiBAcmV0dXJucyB7SXRlbVR5cGV9XG4gICAqL1xuICBwdWJsaWMgaXRlbVR5cGUoKTogSXRlbVR5cGUge1xuICAgIHJldHVybiB0aGlzLmtleVR5cGU7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IGl0ZW0gdHlwZTogJHt0aGlzLmtleVR5cGV9YDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgaXRlbSB3YXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNaXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlTWlzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlSXRlbUdldFR5cGVSZXNwb25zZS5NaXNzID0gQ2FjaGVJdGVtR2V0VHlwZVJlc3BvbnNlLk1pc3M7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGl0ZW1UeXBlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgaXRlbSBnZXQgdHlwZSByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUl0ZW1HZXRUeXBlUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlSXRlbUdldFR5cGVSZXNwb25zZS5FcnJvcjtcblxuICBjb25zdHJ1Y3RvcihfaW5uZXJFeGNlcHRpb246IFNka0Vycm9yKSB7XG4gICAgc3VwZXIoX2lubmVyRXhjZXB0aW9uKTtcbiAgfVxuXG4gIGl0ZW1UeXBlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IEhpdCB8IE1pc3MgfCBFcnJvcjtcbiJdfQ==