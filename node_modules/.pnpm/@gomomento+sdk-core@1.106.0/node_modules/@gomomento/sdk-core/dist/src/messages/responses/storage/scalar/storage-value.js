"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageValue = void 0;
/**
 * Represents a value stored in the cache, which can be an integer, double, string, or byte array.
 */
class StorageValue {
    /**
     * Creates an instance of the StorageValue class.
     * @param {number | undefined} valueInt - The integer value to be stored.
     * @param {number | undefined} valueDouble - The double value to be stored.
     * @param {string | undefined} valueString - The string value to be stored.
     * @param {Uint8Array | undefined} valueBytes - The byte array value to be stored.
     */
    constructor(valueInt, valueDouble, valueString, valueBytes) {
        this._valueInt = undefined;
        this._valueDouble = undefined;
        this._valueString = undefined;
        this._valueBytes = undefined;
        this._valueInt = valueInt;
        this._valueDouble = valueDouble;
        this._valueString = valueString;
        this._valueBytes = valueBytes;
    }
    /**
     * Creates a StorageValue instance with an integer value.
     * @param {number} value - The integer value to be stored.
     * @returns {StorageValue} - A StorageValue instance containing the integer value.
     */
    static ofInt(value) {
        return new StorageValue(value, undefined, undefined, undefined);
    }
    /**
     * Creates a StorageValue instance with a double value.
     * @param {number} value - The double value to be stored.
     * @returns {StorageValue} - A StorageValue instance containing the double value.
     */
    static ofDouble(value) {
        return new StorageValue(undefined, value, undefined, undefined);
    }
    /**
     * Creates a StorageValue instance with a string value.
     * @param {string} value - The string value to be stored.
     * @returns {StorageValue} - A StorageValue instance containing the string value.
     */
    static ofString(value) {
        return new StorageValue(undefined, undefined, value, undefined);
    }
    /**
     * Creates a StorageValue instance with a byte array value.
     * @param {Uint8Array} value - The byte array value to be stored.
     * @returns {StorageValue} - A StorageValue instance containing the byte array value.
     */
    static ofBytes(value) {
        return new StorageValue(undefined, undefined, undefined, value);
    }
    /**
     * Retrieves the integer value stored in this instance.
     * @returns {number | undefined} - The integer value, or undefined if no integer value is present.
     */
    int() {
        return this._valueInt;
    }
    /**
     * Retrieves the double value stored in this instance.
     * @returns {number | undefined} - The double value, or undefined if no double value is present.
     */
    double() {
        return this._valueDouble;
    }
    /**
     * Retrieves the string value stored in this instance.
     * @returns {string | undefined} - The string value, or undefined if no string value is present.
     */
    string() {
        return this._valueString;
    }
    /**
     * Retrieves the byte array value stored in this instance.
     * @returns {Uint8Array | undefined} - The byte array value, or undefined if no byte array value is present.
     */
    bytes() {
        return this._valueBytes;
    }
}
exports.StorageValue = StorageValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvc3RvcmFnZS9zY2FsYXIvc3RvcmFnZS12YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsWUFBWTtJQU12Qjs7Ozs7O09BTUc7SUFDSCxZQUNFLFFBQTRCLEVBQzVCLFdBQStCLEVBQy9CLFdBQStCLEVBQy9CLFVBQWtDO1FBaEJuQixjQUFTLEdBQXVCLFNBQVMsQ0FBQztRQUMxQyxpQkFBWSxHQUF1QixTQUFTLENBQUM7UUFDN0MsaUJBQVksR0FBdUIsU0FBUyxDQUFDO1FBQzdDLGdCQUFXLEdBQTJCLFNBQVMsQ0FBQztRQWUvRCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBYTtRQUN4QixPQUFPLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sSUFBSSxZQUFZLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQWE7UUFDM0IsT0FBTyxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBaUI7UUFDOUIsT0FBTyxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsR0FBRztRQUNELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0NBQ0Y7QUF6RkQsb0NBeUZDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXByZXNlbnRzIGEgdmFsdWUgc3RvcmVkIGluIHRoZSBjYWNoZSwgd2hpY2ggY2FuIGJlIGFuIGludGVnZXIsIGRvdWJsZSwgc3RyaW5nLCBvciBieXRlIGFycmF5LlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZVZhbHVlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWVJbnQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWVEb3VibGU6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWVTdHJpbmc6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWVCeXRlczogVWludDhBcnJheSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiB0aGUgU3RvcmFnZVZhbHVlIGNsYXNzLlxuICAgKiBAcGFyYW0ge251bWJlciB8IHVuZGVmaW5lZH0gdmFsdWVJbnQgLSBUaGUgaW50ZWdlciB2YWx1ZSB0byBiZSBzdG9yZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyIHwgdW5kZWZpbmVkfSB2YWx1ZURvdWJsZSAtIFRoZSBkb3VibGUgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gdmFsdWVTdHJpbmcgLSBUaGUgc3RyaW5nIHZhbHVlIHRvIGJlIHN0b3JlZC5cbiAgICogQHBhcmFtIHtVaW50OEFycmF5IHwgdW5kZWZpbmVkfSB2YWx1ZUJ5dGVzIC0gVGhlIGJ5dGUgYXJyYXkgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgdmFsdWVJbnQ6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICB2YWx1ZURvdWJsZTogbnVtYmVyIHwgdW5kZWZpbmVkLFxuICAgIHZhbHVlU3RyaW5nOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgdmFsdWVCeXRlczogVWludDhBcnJheSB8IHVuZGVmaW5lZFxuICApIHtcbiAgICB0aGlzLl92YWx1ZUludCA9IHZhbHVlSW50O1xuICAgIHRoaXMuX3ZhbHVlRG91YmxlID0gdmFsdWVEb3VibGU7XG4gICAgdGhpcy5fdmFsdWVTdHJpbmcgPSB2YWx1ZVN0cmluZztcbiAgICB0aGlzLl92YWx1ZUJ5dGVzID0gdmFsdWVCeXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU3RvcmFnZVZhbHVlIGluc3RhbmNlIHdpdGggYW4gaW50ZWdlciB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGludGVnZXIgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgKiBAcmV0dXJucyB7U3RvcmFnZVZhbHVlfSAtIEEgU3RvcmFnZVZhbHVlIGluc3RhbmNlIGNvbnRhaW5pbmcgdGhlIGludGVnZXIgdmFsdWUuXG4gICAqL1xuICBzdGF0aWMgb2ZJbnQodmFsdWU6IG51bWJlcik6IFN0b3JhZ2VWYWx1ZSB7XG4gICAgcmV0dXJuIG5ldyBTdG9yYWdlVmFsdWUodmFsdWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBTdG9yYWdlVmFsdWUgaW5zdGFuY2Ugd2l0aCBhIGRvdWJsZSB2YWx1ZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIGRvdWJsZSB2YWx1ZSB0byBiZSBzdG9yZWQuXG4gICAqIEByZXR1cm5zIHtTdG9yYWdlVmFsdWV9IC0gQSBTdG9yYWdlVmFsdWUgaW5zdGFuY2UgY29udGFpbmluZyB0aGUgZG91YmxlIHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIG9mRG91YmxlKHZhbHVlOiBudW1iZXIpOiBTdG9yYWdlVmFsdWUge1xuICAgIHJldHVybiBuZXcgU3RvcmFnZVZhbHVlKHVuZGVmaW5lZCwgdmFsdWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgU3RvcmFnZVZhbHVlIGluc3RhbmNlIHdpdGggYSBzdHJpbmcgdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSBzdHJpbmcgdmFsdWUgdG8gYmUgc3RvcmVkLlxuICAgKiBAcmV0dXJucyB7U3RvcmFnZVZhbHVlfSAtIEEgU3RvcmFnZVZhbHVlIGluc3RhbmNlIGNvbnRhaW5pbmcgdGhlIHN0cmluZyB2YWx1ZS5cbiAgICovXG4gIHN0YXRpYyBvZlN0cmluZyh2YWx1ZTogc3RyaW5nKTogU3RvcmFnZVZhbHVlIHtcbiAgICByZXR1cm4gbmV3IFN0b3JhZ2VWYWx1ZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdmFsdWUsIHVuZGVmaW5lZCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFN0b3JhZ2VWYWx1ZSBpbnN0YW5jZSB3aXRoIGEgYnl0ZSBhcnJheSB2YWx1ZS5cbiAgICogQHBhcmFtIHtVaW50OEFycmF5fSB2YWx1ZSAtIFRoZSBieXRlIGFycmF5IHZhbHVlIHRvIGJlIHN0b3JlZC5cbiAgICogQHJldHVybnMge1N0b3JhZ2VWYWx1ZX0gLSBBIFN0b3JhZ2VWYWx1ZSBpbnN0YW5jZSBjb250YWluaW5nIHRoZSBieXRlIGFycmF5IHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIG9mQnl0ZXModmFsdWU6IFVpbnQ4QXJyYXkpOiBTdG9yYWdlVmFsdWUge1xuICAgIHJldHVybiBuZXcgU3RvcmFnZVZhbHVlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGludGVnZXIgdmFsdWUgc3RvcmVkIGluIHRoaXMgaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtudW1iZXIgfCB1bmRlZmluZWR9IC0gVGhlIGludGVnZXIgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiBubyBpbnRlZ2VyIHZhbHVlIGlzIHByZXNlbnQuXG4gICAqL1xuICBpbnQoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVJbnQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZG91YmxlIHZhbHVlIHN0b3JlZCBpbiB0aGlzIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyIHwgdW5kZWZpbmVkfSAtIFRoZSBkb3VibGUgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiBubyBkb3VibGUgdmFsdWUgaXMgcHJlc2VudC5cbiAgICovXG4gIGRvdWJsZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZURvdWJsZTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBzdHJpbmcgdmFsdWUgc3RvcmVkIGluIHRoaXMgaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCB1bmRlZmluZWR9IC0gVGhlIHN0cmluZyB2YWx1ZSwgb3IgdW5kZWZpbmVkIGlmIG5vIHN0cmluZyB2YWx1ZSBpcyBwcmVzZW50LlxuICAgKi9cbiAgc3RyaW5nKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlU3RyaW5nO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGJ5dGUgYXJyYXkgdmFsdWUgc3RvcmVkIGluIHRoaXMgaW5zdGFuY2UuXG4gICAqIEByZXR1cm5zIHtVaW50OEFycmF5IHwgdW5kZWZpbmVkfSAtIFRoZSBieXRlIGFycmF5IHZhbHVlLCBvciB1bmRlZmluZWQgaWYgbm8gYnl0ZSBhcnJheSB2YWx1ZSBpcyBwcmVzZW50LlxuICAgKi9cbiAgYnl0ZXMoKTogVWludDhBcnJheSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlQnl0ZXM7XG4gIH1cbn1cbiJdfQ==