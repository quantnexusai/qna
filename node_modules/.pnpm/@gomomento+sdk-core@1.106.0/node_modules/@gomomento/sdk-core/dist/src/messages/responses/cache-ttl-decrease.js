"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.NotSet = exports.Set = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates the ttl was successfully decreased.
 */
class Set extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheDecreaseTtlResponse.Set;
    }
}
exports.Set = Set;
/**
 * Indicates the ttl was not updated due to a failed condition.
 */
class NotSet extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheDecreaseTtlResponse.NotSet;
    }
}
exports.NotSet = NotSet;
/**
 * Indicates the requested item was not found in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheDecreaseTtlResponse.Miss;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the decrease ttl request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheDecreaseTtlResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtdHRsLWRlY3JlYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS10dGwtZGVjcmVhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBSXlCO0FBQ3pCLG1DQUFpRDtBQU1qRDs7R0FFRztBQUNILE1BQWEsR0FBSSxTQUFRLDRCQUFZO0lBQXJDOztRQUNXLFNBQUksR0FBaUMsZ0NBQXdCLENBQUMsR0FBRyxDQUFDO0lBQzdFLENBQUM7Q0FBQTtBQUZELGtCQUVDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLE1BQU8sU0FBUSw0QkFBWTtJQUF4Qzs7UUFDVyxTQUFJLEdBQ1gsZ0NBQXdCLENBQUMsTUFBTSxDQUFDO0lBQ3BDLENBQUM7Q0FBQTtBQUhELHdCQUdDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLElBQUssU0FBUSxnQ0FBZ0I7SUFBMUM7O1FBQ1csU0FBSSxHQUFrQyxnQ0FBd0IsQ0FBQyxJQUFJLENBQUM7SUFDL0UsQ0FBQztDQUFBO0FBRkQsb0JBRUM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFDMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFHaEIsU0FBSSxHQUNYLGdDQUF3QixDQUFDLEtBQUssQ0FBQztJQUhqQyxDQUFDO0NBSUY7QUFQRCxzQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge1xuICBCYXNlUmVzcG9uc2VFcnJvcixcbiAgQmFzZVJlc3BvbnNlTWlzcyxcbiAgUmVzcG9uc2VCYXNlLFxufSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZURlY3JlYXNlVHRsUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVEZWNyZWFzZVR0bFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgdHRsIHdhcyBzdWNjZXNzZnVsbHkgZGVjcmVhc2VkLlxuICovXG5leHBvcnQgY2xhc3MgU2V0IGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVEZWNyZWFzZVR0bFJlc3BvbnNlLlNldCA9IENhY2hlRGVjcmVhc2VUdGxSZXNwb25zZS5TZXQ7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoZSB0dGwgd2FzIG5vdCB1cGRhdGVkIGR1ZSB0byBhIGZhaWxlZCBjb25kaXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RTZXQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZURlY3JlYXNlVHRsUmVzcG9uc2UuTm90U2V0ID1cbiAgICBDYWNoZURlY3JlYXNlVHRsUmVzcG9uc2UuTm90U2V0O1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGUgcmVxdWVzdGVkIGl0ZW0gd2FzIG5vdCBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNaXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlTWlzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlRGVjcmVhc2VUdGxSZXNwb25zZS5NaXNzID0gQ2FjaGVEZWNyZWFzZVR0bFJlc3BvbnNlLk1pc3M7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBkZWNyZWFzZSB0dGwgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBDYWNoZURlY3JlYXNlVHRsUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlRGVjcmVhc2VUdGxSZXNwb25zZS5FcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTZXQgfCBOb3RTZXQgfCBNaXNzIHwgRXJyb3I7XG4iXX0=