"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a Successful dictionary increment request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(value) {
        super();
        this.type = enums_1.CacheDictionaryIncrementResponse.Success;
        this._value = value;
    }
    /**
     * The new value of the element after incrementing.
     * @returns {number}
     */
    value() {
        return this._value;
    }
    valueNumber() {
        return this._value;
    }
    toString() {
        return `${super.toString()}: value: ${this.valueNumber()}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the dictionary increment request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheDictionaryIncrementResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtZGljdGlvbmFyeS1pbmNyZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2NhY2hlLWRpY3Rpb25hcnktaW5jcmVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1EQUF1RTtBQUN2RSxtQ0FBeUQ7QUFPekQ7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFLOUMsWUFBWSxLQUFhO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO1FBSkQsU0FBSSxHQUNYLHdDQUFnQyxDQUFDLE9BQU8sQ0FBQztRQUl6QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBQ00sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVlLFFBQVE7UUFDdEIsT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUF4QkQsMEJBd0JDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBRzFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSGhCLFNBQUksR0FDWCx3Q0FBZ0MsQ0FBQyxLQUFLLENBQUM7SUFHekMsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFWRCxzQkFVQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge0Jhc2VSZXNwb25zZUVycm9yLCBCYXNlUmVzcG9uc2VTdWNjZXNzfSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnRSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICB2YWx1ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlRGljdGlvbmFyeUluY3JlbWVudFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyBhIFN1Y2Nlc3NmdWwgZGljdGlvbmFyeSBpbmNyZW1lbnQgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWU6IG51bWJlcjtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50UmVzcG9uc2UuU3VjY2VzcyA9XG4gICAgQ2FjaGVEaWN0aW9uYXJ5SW5jcmVtZW50UmVzcG9uc2UuU3VjY2VzcztcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuZXcgdmFsdWUgb2YgdGhlIGVsZW1lbnQgYWZ0ZXIgaW5jcmVtZW50aW5nLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgcHVibGljIHZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHB1YmxpYyB2YWx1ZU51bWJlcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHtzdXBlci50b1N0cmluZygpfTogdmFsdWU6ICR7dGhpcy52YWx1ZU51bWJlcigpfWA7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIGRpY3Rpb25hcnkgaW5jcmVtZW50IHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlRGljdGlvbmFyeUluY3JlbWVudFJlc3BvbnNlLkVycm9yID1cbiAgICBDYWNoZURpY3Rpb25hcnlJbmNyZW1lbnRSZXNwb25zZS5FcnJvcjtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICBwdWJsaWMgdmFsdWUoKTogdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19