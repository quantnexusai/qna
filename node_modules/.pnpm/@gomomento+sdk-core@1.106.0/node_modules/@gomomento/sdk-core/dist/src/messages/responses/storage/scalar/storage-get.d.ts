import { StorageGetResponse } from '../../enums';
import { BaseResponseError, ResponseBase } from '../../response-base';
import { SdkError } from '../../../../errors';
import { StorageValue } from './storage-value';
interface IResponse {
    readonly type: StorageGetResponse;
    value(): StorageValue | undefined;
}
/**
 * Indicates that the item was fetched from the store.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the successful response:
 *
 * - `value()` - the value associated with the key that was retrieved from the cache.
 */
export declare class Found extends ResponseBase implements IResponse {
    readonly type: StorageGetResponse.Found;
    private readonly _value;
    /**
     * Creates an instance of the Found response.
     * @param {StorageValue} value - The value associated with the key that was retrieved from the cache.
     */
    constructor(value: StorageValue);
    /**
     * Creates a Found response with an integer value.
     * @param {number} value - The integer value to be stored.
     * @returns {Found} - A Found response object containing the integer value.
     */
    static ofInt(value: number): Found;
    /**
     * Creates a Found response with a double value.
     * @param {number} value - The double value to be stored.
     * @returns {Found} - A Found response object containing the double value.
     */
    static ofDouble(value: number): Found;
    /**
     * Creates a Found response with a string value.
     * @param {string} value - The string value to be stored.
     * @returns {Found} - A Found response object containing the string value.
     */
    static ofString(value: string): Found;
    /**
     * Creates a Found response with a byte array value.
     * @param {Uint8Array} value - The byte array value to be stored.
     * @returns {Found} - A Found response object containing the byte array value.
     */
    static ofBytes(value: Uint8Array): Found;
    /**
     * Retrieves the value associated with the key that was retrieved from the cache.
     * @returns {StorageValue} - The value associated with the key, or undefined if no value is present.
     */
    value(): StorageValue;
}
/**
 * Indicates that the item was not found in the store.
 */
export declare class NotFound extends ResponseBase implements IResponse {
    readonly type: StorageGetResponse.NotFound;
    constructor();
    value(): undefined;
}
/**
 * Indicates that an error occurred during the storage get request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: StorageGetResponse.Error;
    constructor(_innerException: SdkError);
    value(): undefined;
}
export type Response = Found | NotFound | Error;
export {};
