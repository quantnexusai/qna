"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeaderboardOrder = exports.SortedSetOrder = exports.ttlOrFromCacheTtl = void 0;
const collection_ttl_1 = require("./collection-ttl");
/**
 * Returns the TTL from the options or refresh with the cache TTL.
 *
 * @param options The options to get the TTL from.
 * @returns The TTL from the options or a default value.
 */
function ttlOrFromCacheTtl(options) {
    var _a;
    return (_a = options === null || options === void 0 ? void 0 : options.ttl) !== null && _a !== void 0 ? _a : collection_ttl_1.CollectionTtl.fromCacheTtl();
}
exports.ttlOrFromCacheTtl = ttlOrFromCacheTtl;
var SortedSetOrder;
(function (SortedSetOrder) {
    SortedSetOrder["Ascending"] = "ASC";
    SortedSetOrder["Descending"] = "DESC";
})(SortedSetOrder = exports.SortedSetOrder || (exports.SortedSetOrder = {}));
var LeaderboardOrder;
(function (LeaderboardOrder) {
    LeaderboardOrder["Ascending"] = "ASC";
    LeaderboardOrder["Descending"] = "DESC";
})(LeaderboardOrder = exports.LeaderboardOrder || (exports.LeaderboardOrder = {}));
//# sourceMappingURL=data:application/json;base64,