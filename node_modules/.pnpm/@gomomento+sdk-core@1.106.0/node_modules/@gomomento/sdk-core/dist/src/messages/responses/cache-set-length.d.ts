import { BaseResponseError, BaseResponseMiss, ResponseBase } from './response-base';
import { CacheSetLengthResponse } from './enums';
import { SdkError } from '../../errors';
interface IResponse {
    length(): number | undefined;
    readonly type: CacheSetLengthResponse;
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.
 */
export declare class Hit extends ResponseBase implements IResponse {
    private readonly _length;
    readonly type: CacheSetLengthResponse.Hit;
    constructor(length: number);
    /**
     * Returns the length of the set
     * @returns {number}
     */
    length(): number;
    toString(): string;
}
/**
 * Indicates that the requested data was not available in the cache.
 */
export declare class Miss extends BaseResponseMiss implements IResponse {
    readonly type: CacheSetLengthResponse.Miss;
    constructor();
    length(): undefined;
}
/**
 * Indicates that an error occurred during the set length request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: CacheSetLengthResponse.Error;
    constructor(error: SdkError);
    length(): undefined;
}
export type Response = Hit | Miss | Error;
export {};
