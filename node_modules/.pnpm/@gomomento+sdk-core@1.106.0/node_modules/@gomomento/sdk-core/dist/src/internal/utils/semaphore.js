"use strict";
// Source: https://gist.github.com/gregkorossy/e33be1f201cf242197d9c4d0a1fa7335
Object.defineProperty(exports, "__esModule", { value: true });
exports.Semaphore = void 0;
class Semaphore {
    constructor(max) {
        this.counter = 0;
        this.waiting = [];
        this.max = max;
    }
    take() {
        if (this.waiting.length > 0 && this.counter < this.max) {
            this.counter += 1;
            const promise = this.waiting.shift();
            if (promise) {
                promise.resolve();
            }
        }
    }
    acquire() {
        if (this.counter < this.max) {
            this.counter += 1;
            return new Promise(resolve => {
                resolve(undefined);
            });
        }
        return new Promise((resolve, err) => {
            this.waiting.push({ resolve, err });
        });
    }
    release() {
        this.counter -= 1;
        this.take();
    }
    purge() {
        const unresolved = this.waiting.length;
        for (let i = 0; i < unresolved; i += 1) {
            this.waiting[i].err('Task has been purged.');
        }
        this.counter = 0;
        this.waiting = [];
        return unresolved;
    }
}
exports.Semaphore = Semaphore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtYXBob3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL3V0aWxzL3NlbWFwaG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0VBQStFOzs7QUFFL0UsTUFBYSxTQUFTO0lBUXBCLFlBQVksR0FBVztRQVBmLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixZQUFPLEdBR1QsRUFBRSxDQUFDO1FBSVAsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDdEQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7WUFDbEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQyxJQUFJLE9BQU8sRUFBRTtnQkFDWCxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDbkI7U0FDRjtJQUNILENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7WUFDbEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLO1FBQ1YsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUVsQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0NBQ0Y7QUFuREQsOEJBbURDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU291cmNlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmVna29yb3NzeS9lMzNiZTFmMjAxY2YyNDIxOTdkOWM0ZDBhMWZhNzMzNVxuXG5leHBvcnQgY2xhc3MgU2VtYXBob3JlIHtcbiAgcHJpdmF0ZSBjb3VudGVyID0gMDtcbiAgcHJpdmF0ZSB3YWl0aW5nOiB7XG4gICAgcmVzb2x2ZTogKHZhbHVlPzogdW5rbm93bikgPT4gdm9pZDtcbiAgICBlcnI6IChyZWFzb24/OiBzdHJpbmcpID0+IHZvaWQ7XG4gIH1bXSA9IFtdO1xuICBwcml2YXRlIG1heDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG1heDogbnVtYmVyKSB7XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cblxuICBwdWJsaWMgdGFrZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy53YWl0aW5nLmxlbmd0aCA+IDAgJiYgdGhpcy5jb3VudGVyIDwgdGhpcy5tYXgpIHtcbiAgICAgIHRoaXMuY291bnRlciArPSAxO1xuICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMud2FpdGluZy5zaGlmdCgpO1xuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFjcXVpcmUoKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgaWYgKHRoaXMuY291bnRlciA8IHRoaXMubWF4KSB7XG4gICAgICB0aGlzLmNvdW50ZXIgKz0gMTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgZXJyKSA9PiB7XG4gICAgICB0aGlzLndhaXRpbmcucHVzaCh7cmVzb2x2ZSwgZXJyfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcbiAgICB0aGlzLmNvdW50ZXIgLT0gMTtcbiAgICB0aGlzLnRha2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBwdXJnZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHVucmVzb2x2ZWQgPSB0aGlzLndhaXRpbmcubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bnJlc29sdmVkOyBpICs9IDEpIHtcbiAgICAgIHRoaXMud2FpdGluZ1tpXS5lcnIoJ1Rhc2sgaGFzIGJlZW4gcHVyZ2VkLicpO1xuICAgIH1cblxuICAgIHRoaXMuY291bnRlciA9IDA7XG4gICAgdGhpcy53YWl0aW5nID0gW107XG5cbiAgICByZXR1cm4gdW5yZXNvbHZlZDtcbiAgfVxufVxuIl19