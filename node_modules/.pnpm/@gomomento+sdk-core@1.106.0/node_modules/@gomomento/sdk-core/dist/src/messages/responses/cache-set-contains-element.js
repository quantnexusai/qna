"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates that the requested set was in the cache.
 * Provides a `containsElement` accessor that returns a boolean indicating whether the element was found.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(found) {
        super();
        this.type = enums_1.CacheSetContainsElementResponse.Hit;
        this._containsElement = found;
    }
    /**
     * Returns a boolean indicating whether the element was found in the cache.
     * @returns {boolean}
     */
    containsElement() {
        return this._containsElement;
    }
    toString() {
        return `${super.toString()}: Hit - ${this._containsElement ? 'true' : 'false'}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested set was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super();
        this.type = enums_1.CacheSetContainsElementResponse.Miss;
    }
    containsElement() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the set contains element request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetContainsElementResponse.Error;
    }
    containsElement() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWNvbnRhaW5zLWVsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2NhY2hlLXNldC1jb250YWlucy1lbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1EQUl5QjtBQUN6QixtQ0FBd0Q7QUFZeEQ7OztHQUdHO0FBQ0gsTUFBYSxHQUFJLFNBQVEsNEJBQVk7SUFLbkMsWUFBWSxLQUFjO1FBQ3hCLEtBQUssRUFBRSxDQUFDO1FBSkQsU0FBSSxHQUNYLHVDQUErQixDQUFDLEdBQUcsQ0FBQztRQUlwQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQy9CLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLFdBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUNuQyxFQUFFLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF2QkQsa0JBdUJDO0FBRUQ7O0dBRUc7QUFDSCxNQUFhLElBQUssU0FBUSxnQ0FBZ0I7SUFJeEM7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUpELFNBQUksR0FDWCx1Q0FBK0IsQ0FBQyxJQUFJLENBQUM7SUFJdkMsQ0FBQztJQUVNLGVBQWU7UUFDcEIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBWEQsb0JBV0M7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFJMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFKaEIsU0FBSSxHQUNYLHVDQUErQixDQUFDLEtBQUssQ0FBQztJQUl4QyxDQUFDO0lBRU0sZUFBZTtRQUNwQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFYRCxzQkFXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge1xuICBCYXNlUmVzcG9uc2VFcnJvcixcbiAgQmFzZVJlc3BvbnNlTWlzcyxcbiAgUmVzcG9uc2VCYXNlLFxufSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZVNldENvbnRhaW5zRWxlbWVudFJlc3BvbnNlfSBmcm9tICcuL2VudW1zJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGVsZW1lbnQgd2FzIGZvdW5kIGluIHRoZSBjYWNoZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW4gfCB1bmRlZmluZWR9IEEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGVsZW1lbnQgd2FzIGZvdW5kIGluIHRoZSBjYWNoZS5cbiAgICogSWYgdGhlIHNldCBpdHNlbGYgd2FzIG5vdCBmb3VuZCwgKGllIHRoZSByZXNwb25zZSB3YXMgYSBgTWlzc2Agb3IgYEVycm9yYCksIHRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBjb250YWluc0VsZW1lbnQoKTogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRDb250YWluc0VsZW1lbnRSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdGVkIHNldCB3YXMgaW4gdGhlIGNhY2hlLlxuICogUHJvdmlkZXMgYSBgY29udGFpbnNFbGVtZW50YCBhY2Nlc3NvciB0aGF0IHJldHVybnMgYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgZWxlbWVudCB3YXMgZm91bmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBIaXQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb250YWluc0VsZW1lbnQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU2V0Q29udGFpbnNFbGVtZW50UmVzcG9uc2UuSGl0ID1cbiAgICBDYWNoZVNldENvbnRhaW5zRWxlbWVudFJlc3BvbnNlLkhpdDtcblxuICBjb25zdHJ1Y3Rvcihmb3VuZDogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY29udGFpbnNFbGVtZW50ID0gZm91bmQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBlbGVtZW50IHdhcyBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgcHVibGljIGNvbnRhaW5zRWxlbWVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGFpbnNFbGVtZW50O1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3N1cGVyLnRvU3RyaW5nKCl9OiBIaXQgLSAke1xuICAgICAgdGhpcy5fY29udGFpbnNFbGVtZW50ID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgIH1gO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgdGhlIHJlcXVlc3RlZCBzZXQgd2FzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWlzcyBleHRlbmRzIEJhc2VSZXNwb25zZU1pc3MgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldENvbnRhaW5zRWxlbWVudFJlc3BvbnNlLk1pc3MgPVxuICAgIENhY2hlU2V0Q29udGFpbnNFbGVtZW50UmVzcG9uc2UuTWlzcztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIGNvbnRhaW5zRWxlbWVudCgpOiB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHNldCBjb250YWlucyBlbGVtZW50IHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU2V0Q29udGFpbnNFbGVtZW50UmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlU2V0Q29udGFpbnNFbGVtZW50UmVzcG9uc2UuRXJyb3I7XG5cbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICBwdWJsaWMgY29udGFpbnNFbGVtZW50KCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IEhpdCB8IE1pc3MgfCBFcnJvcjtcbiJdfQ==