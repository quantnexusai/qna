"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
const __1 = require("../..");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.
 * Provides `value*` accessors to retrieve the data in the appropriate format.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(body, keys) {
        super();
        this.type = enums_1.CacheGetBatchResponse.Success;
        this.body = body;
        this.keys = keys;
    }
    /**
     * Returns the status for each request in the batch as a list of CacheGet.Response objects.
     * @returns {CacheGet.Response[]}
     */
    results() {
        return this.body;
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    values() {
        return this.valuesRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    valuesRecord() {
        return this.valuesRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, string>}
     */
    valuesRecordStringString() {
        return this.body.reduce((acc, item, index) => {
            if (item instanceof __1.CacheGet.Hit) {
                acc[TEXT_DECODER.decode(this.keys[index])] = item.valueString();
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys are utf-8 strings, decoded from the underlying byte array, and whose
     * values are byte arrays.  This can be used in most places where an Object is desired.
     * @returns {Record<string, Uint8Array>}
     */
    valuesRecordStringUint8Array() {
        return this.body.reduce((acc, item, index) => {
            if (item instanceof __1.CacheGet.Hit) {
                acc[TEXT_DECODER.decode(this.keys[index])] = item.valueUint8Array();
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, string>}
     */
    valuesMap() {
        return this.valuesMapStringString();
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Map<string, string>}
     */
    valuesMapStringString() {
        return this.body.reduce((acc, item, index) => {
            if (item instanceof __1.CacheGet.Hit) {
                acc.set(TEXT_DECODER.decode(this.keys[index]), item.valueString());
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys are strings and whose values are byte arrays.
     * @returns {Map<string, Uint8Array>}
     */
    valuesMapStringUint8Array() {
        return this.body.reduce((acc, item, index) => {
            if (item instanceof __1.CacheGet.Hit) {
                acc.set(TEXT_DECODER.decode(this.keys[index]), item.valueUint8Array());
            }
            return acc;
        }, new Map());
    }
    toString() {
        const display = this.results()
            .map(result => result.toString())
            .toString();
        return `${super.toString()}: ${display}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the cache get batch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheGetBatchResponse.Error;
    }
    values() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,