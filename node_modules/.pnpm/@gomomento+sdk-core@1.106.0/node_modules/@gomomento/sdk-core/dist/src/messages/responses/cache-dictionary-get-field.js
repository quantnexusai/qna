"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(body, field) {
        super();
        this.type = enums_1.CacheDictionaryGetFieldResponse.Hit;
        this.body = body;
        this.field = field;
    }
    /**
     * Returns the data as a utf-8 string, decoded from the underlying byte array.
     * @returns string
     */
    value() {
        return this.valueString();
    }
    /**
     * Returns the data as a utf-8 string, decoded from the underlying byte array.
     * @returns string
     */
    valueString() {
        return TEXT_DECODER.decode(this.body);
    }
    /**
     * Returns the data as a byte array.
     * @returns {Uint8Array}
     */
    valueUint8Array() {
        return this.body;
    }
    toString() {
        const display = (0, utils_1.truncateString)(this.valueString());
        return `${super.toString()}: ${display}`;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor(field) {
        super();
        this.type = enums_1.CacheDictionaryGetFieldResponse.Miss;
        this.field = field;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the dictionary get field request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException, field) {
        super(_innerException);
        this.type = enums_1.CacheDictionaryGetFieldResponse.Error;
        this.field = field;
    }
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString() {
        return TEXT_DECODER.decode(this.field);
    }
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array() {
        return this.field;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,