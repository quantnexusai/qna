"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a successful list caches request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(caches) {
        super();
        this.type = enums_1.ListCachesResponse.Success;
        this.caches = caches;
    }
    /**
     * An array of CacheInfo, containing information about each cache.
     * @returns {CacheInfo[]}
     */
    getCaches() {
        return this.caches;
    }
    toString() {
        const caches = this.caches.map(cacheInfo => cacheInfo.getName());
        return super.toString() + ': ' + caches.join(', ');
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the list caches request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.ListCachesResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1jYWNoZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2xpc3QtY2FjaGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG1EQUF1RTtBQUN2RSxtQ0FBMkM7QUFPM0M7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFJOUMsWUFBWSxNQUFtQjtRQUM3QixLQUFLLEVBQUUsQ0FBQztRQUpELFNBQUksR0FBK0IsMEJBQWtCLENBQUMsT0FBTyxDQUFDO1FBS3JFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDakUsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBckJELDBCQXFCQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUdoQixTQUFJLEdBQTZCLDBCQUFrQixDQUFDLEtBQUssQ0FBQztJQUZuRSxDQUFDO0NBR0Y7QUFORCxzQkFNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge0Jhc2VSZXNwb25zZUVycm9yLCBCYXNlUmVzcG9uc2VTdWNjZXNzfSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtMaXN0Q2FjaGVzUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuaW1wb3J0IHtDYWNoZUluZm99IGZyb20gJy4uLy4uJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExpc3RDYWNoZXNSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBzdWNjZXNzZnVsIGxpc3QgY2FjaGVzIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWNjZXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlU3VjY2VzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExpc3RDYWNoZXNSZXNwb25zZS5TdWNjZXNzID0gTGlzdENhY2hlc1Jlc3BvbnNlLlN1Y2Nlc3M7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2FjaGVzOiBDYWNoZUluZm9bXTtcblxuICBjb25zdHJ1Y3RvcihjYWNoZXM6IENhY2hlSW5mb1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNhY2hlcyA9IGNhY2hlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBDYWNoZUluZm8sIGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgZWFjaCBjYWNoZS5cbiAgICogQHJldHVybnMge0NhY2hlSW5mb1tdfVxuICAgKi9cbiAgcHVibGljIGdldENhY2hlcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZXM7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgY2FjaGVzID0gdGhpcy5jYWNoZXMubWFwKGNhY2hlSW5mbyA9PiBjYWNoZUluZm8uZ2V0TmFtZSgpKTtcbiAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoKSArICc6ICcgKyBjYWNoZXMuam9pbignLCAnKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgbGlzdCBjYWNoZXMgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBMaXN0Q2FjaGVzUmVzcG9uc2UuRXJyb3IgPSBMaXN0Q2FjaGVzUmVzcG9uc2UuRXJyb3I7XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19