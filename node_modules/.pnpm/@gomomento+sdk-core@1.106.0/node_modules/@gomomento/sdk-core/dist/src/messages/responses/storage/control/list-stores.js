"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const enums_1 = require("../../enums");
const response_base_1 = require("../../response-base");
/**
 * Indicates a successful list stores request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(stores) {
        super();
        this.type = enums_1.ListStoresResponse.Success;
        this._stores = stores;
    }
    /**
     * An array of StoreInfo, containing information about each store.
     * @returns {StoreInfo[]}
     */
    stores() {
        return this._stores;
    }
    toString() {
        const _stores = this._stores.map(storeInfo => storeInfo.getName());
        return super.toString() + ': ' + _stores.join(', ');
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the list stores request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.ListStoresResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1zdG9yZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL3N0b3JhZ2UvY29udHJvbC9saXN0LXN0b3Jlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBK0M7QUFDL0MsdURBQTJFO0FBUTNFOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsbUNBQW1CO0lBSTlDLFlBQVksTUFBbUI7UUFDN0IsS0FBSyxFQUFFLENBQUM7UUFKRCxTQUFJLEdBQStCLDBCQUFrQixDQUFDLE9BQU8sQ0FBQztRQUtyRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRWUsUUFBUTtRQUN0QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQXJCRCwwQkFxQkM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFDMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFHaEIsU0FBSSxHQUE2QiwwQkFBa0IsQ0FBQyxLQUFLLENBQUM7SUFGbkUsQ0FBQztDQUdGO0FBTkQsc0JBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xpc3RTdG9yZXNSZXNwb25zZX0gZnJvbSAnLi4vLi4vZW51bXMnO1xuaW1wb3J0IHtCYXNlUmVzcG9uc2VFcnJvciwgQmFzZVJlc3BvbnNlU3VjY2Vzc30gZnJvbSAnLi4vLi4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge1N0b3JlSW5mb30gZnJvbSAnLi4vLi4vLi4vc3RvcmUtaW5mbyc7XG5pbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi8uLi8uLi9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogTGlzdFN0b3Jlc1Jlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyBhIHN1Y2Nlc3NmdWwgbGlzdCBzdG9yZXMgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogTGlzdFN0b3Jlc1Jlc3BvbnNlLlN1Y2Nlc3MgPSBMaXN0U3RvcmVzUmVzcG9uc2UuU3VjY2VzcztcbiAgcHJpdmF0ZSByZWFkb25seSBfc3RvcmVzOiBTdG9yZUluZm9bXTtcblxuICBjb25zdHJ1Y3RvcihzdG9yZXM6IFN0b3JlSW5mb1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zdG9yZXMgPSBzdG9yZXM7XG4gIH1cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgU3RvcmVJbmZvLCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggc3RvcmUuXG4gICAqIEByZXR1cm5zIHtTdG9yZUluZm9bXX1cbiAgICovXG4gIHB1YmxpYyBzdG9yZXMoKTogU3RvcmVJbmZvW10ge1xuICAgIHJldHVybiB0aGlzLl9zdG9yZXM7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgX3N0b3JlcyA9IHRoaXMuX3N0b3Jlcy5tYXAoc3RvcmVJbmZvID0+IHN0b3JlSW5mby5nZXROYW1lKCkpO1xuICAgIHJldHVybiBzdXBlci50b1N0cmluZygpICsgJzogJyArIF9zdG9yZXMuam9pbignLCAnKTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgbGlzdCBzdG9yZXMgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBMaXN0U3RvcmVzUmVzcG9uc2UuRXJyb3IgPSBMaXN0U3RvcmVzUmVzcG9uc2UuRXJyb3I7XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19