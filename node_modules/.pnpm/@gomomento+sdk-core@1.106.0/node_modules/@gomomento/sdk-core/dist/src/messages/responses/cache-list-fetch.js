"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested list was successfully retrieved from the cache.
 * Provides `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(values) {
        super();
        this.type = enums_1.CacheListFetchResponse.Hit;
        this._values = values;
    }
    /**
     * Returns the data as an array of byte arrays.
     * @returns {Uint8Array[]}
     */
    valueListUint8Array() {
        return this._values;
    }
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.
     * @returns {string[]}
     */
    valueListString() {
        return this._values.map(v => TEXT_DECODER.decode(v));
    }
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.  This is a convenience alias
     * for {valueListString}
     * @returns {string[]}
     */
    valueList() {
        return this.valueListString();
    }
    /**
     * Returns the data as an array of strings, decoded from the underlying byte array.
     * This is a convenience alias for {valueListString}
     * @returns {string[]}
     */
    value() {
        return this.valueListString();
    }
    toString() {
        const truncatedStringArray = (0, utils_1.truncateStringArray)(this.valueListString());
        return `${super.toString()}: [${truncatedStringArray.toString()}]`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested list was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super();
        this.type = enums_1.CacheListFetchResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the list fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheListFetchResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtbGlzdC1mZXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtbGlzdC1mZXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFJeUI7QUFDekIsZ0RBQXlEO0FBQ3pELG1DQUErQztBQUUvQyxNQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBT3ZDOzs7R0FHRztBQUNILE1BQWEsR0FBSSxTQUFRLDRCQUFZO0lBSW5DLFlBQVksTUFBb0I7UUFDOUIsS0FBSyxFQUFFLENBQUM7UUFKRCxTQUFJLEdBQStCLDhCQUFzQixDQUFDLEdBQUcsQ0FBQztRQUtyRSxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksbUJBQW1CO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZUFBZTtRQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE1BQU0sb0JBQW9CLEdBQUcsSUFBQSwyQkFBbUIsRUFBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUN6RSxPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7SUFDckUsQ0FBQztDQUNGO0FBL0NELGtCQStDQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsZ0NBQWdCO0lBR3hDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFIRCxTQUFJLEdBQWdDLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUl6RSxDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQVZELG9CQVVDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBRzFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSGhCLFNBQUksR0FBaUMsOEJBQXNCLENBQUMsS0FBSyxDQUFDO0lBSTNFLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBVkQsc0JBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgQmFzZVJlc3BvbnNlRXJyb3IsXG4gIEJhc2VSZXNwb25zZU1pc3MsXG4gIFJlc3BvbnNlQmFzZSxcbn0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7dHJ1bmNhdGVTdHJpbmdBcnJheX0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvdXRpbHMnO1xuaW1wb3J0IHtDYWNoZUxpc3RGZXRjaFJlc3BvbnNlfSBmcm9tICcuL2VudW1zJztcblxuY29uc3QgVEVYVF9ERUNPREVSID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICB2YWx1ZSgpOiBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVMaXN0RmV0Y2hSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdGVkIGxpc3Qgd2FzIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgZnJvbSB0aGUgY2FjaGUuXG4gKiBQcm92aWRlcyBgdmFsdWUqYCBhY2Nlc3NvcnMgdG8gcmV0cmlldmUgdGhlIGRhdGEgaW4gdGhlIGFwcHJvcHJpYXRlIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEhpdCBleHRlbmRzIFJlc3BvbnNlQmFzZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlTGlzdEZldGNoUmVzcG9uc2UuSGl0ID0gQ2FjaGVMaXN0RmV0Y2hSZXNwb25zZS5IaXQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3ZhbHVlczogVWludDhBcnJheVtdO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlczogVWludDhBcnJheVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl92YWx1ZXMgPSB2YWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhbiBhcnJheSBvZiBieXRlIGFycmF5cy5cbiAgICogQHJldHVybnMge1VpbnQ4QXJyYXlbXX1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZUxpc3RVaW50OEFycmF5KCk6IFVpbnQ4QXJyYXlbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIGFzIGFuIGFycmF5IG9mIHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBwdWJsaWMgdmFsdWVMaXN0U3RyaW5nKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzLm1hcCh2ID0+IFRFWFRfREVDT0RFUi5kZWNvZGUodikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgZGVjb2RlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ5dGUgYXJyYXkuICBUaGlzIGlzIGEgY29udmVuaWVuY2UgYWxpYXNcbiAgICogZm9yIHt2YWx1ZUxpc3RTdHJpbmd9XG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZUxpc3QoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlTGlzdFN0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgZGVjb2RlZCBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ5dGUgYXJyYXkuXG4gICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBhbGlhcyBmb3Ige3ZhbHVlTGlzdFN0cmluZ31cbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKi9cbiAgcHVibGljIHZhbHVlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZUxpc3RTdHJpbmcoKTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRydW5jYXRlZFN0cmluZ0FycmF5ID0gdHJ1bmNhdGVTdHJpbmdBcnJheSh0aGlzLnZhbHVlTGlzdFN0cmluZygpKTtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IFske3RydW5jYXRlZFN0cmluZ0FycmF5LnRvU3RyaW5nKCl9XWA7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdGVkIGxpc3Qgd2FzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWlzcyBleHRlbmRzIEJhc2VSZXNwb25zZU1pc3MgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RGZXRjaFJlc3BvbnNlLk1pc3MgPSBDYWNoZUxpc3RGZXRjaFJlc3BvbnNlLk1pc3M7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHZhbHVlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgbGlzdCBmZXRjaCByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RGZXRjaFJlc3BvbnNlLkVycm9yID0gQ2FjaGVMaXN0RmV0Y2hSZXNwb25zZS5FcnJvcjtcblxuICBjb25zdHJ1Y3RvcihfaW5uZXJFeGNlcHRpb246IFNka0Vycm9yKSB7XG4gICAgc3VwZXIoX2lubmVyRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHZhbHVlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IEhpdCB8IE1pc3MgfCBFcnJvcjtcbiJdfQ==