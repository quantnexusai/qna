"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(elements) {
        super();
        this._displayListSizeLimit = 5;
        this.type = enums_1.CacheSortedSetFetchResponse.Hit;
        this.elements = elements;
    }
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a byte array, and the score is a number.
     * @returns {{value: Uint8Array; score: number}[]}
     */
    valueArrayUint8Elements() {
        return this.elements.map(item => {
            return {
                value: item.value,
                score: item.score,
            };
        });
    }
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * @returns {{value: string; score: number}[]}
     */
    valueArrayStringElements() {
        return this.elements.map(item => {
            return {
                value: TEXT_DECODER.decode(item.value),
                score: item.score,
            };
        });
    }
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * This is a convenience alias for {valueArrayStringNumber}.
     * @returns {value: string; score: number}[]
     */
    valueArray() {
        return this.valueArrayStringElements();
    }
    /**
     * Returns the elements as an array of objects, each containing a `value` and `score` field.
     * The value is a utf-8 string, decoded from the underlying byte array, and the score is a number.
     * This is a convenience alias for {valueArrayStringNumber}.
     * @returns {value: string; score: number}[]
     */
    value() {
        return this.valueArrayStringElements();
    }
    truncateValueStrings() {
        const keyValueArray = this.valueArrayStringElements();
        const elements = [];
        if (keyValueArray.length <= this._displayListSizeLimit) {
            keyValueArray.forEach(element => {
                elements.push(`${element.value}: ${element.score}`);
            });
        }
        else {
            const slicedArray = keyValueArray.slice(0, this._displayListSizeLimit);
            slicedArray.forEach(element => {
                elements.push(`${element.value}: ${element.score}`);
            });
        }
        return elements.join(', ');
    }
    toString() {
        return `${super.toString()}: valueArrayStringElements: ${this.truncateValueStrings()}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSortedSetFetchResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the dictionary fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(error) {
        super(error);
        this.type = enums_1.CacheSortedSetFetchResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,