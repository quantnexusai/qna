"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a Successful sorted set IncrementScore request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(score) {
        super();
        this.type = enums_1.CacheSortedSetIncrementScoreResponse.Success;
        this._score = score;
    }
    /**
     * The new score of the element after incrementing.
     * @returns {number}
     */
    score() {
        return this._score;
    }
    toString() {
        return `${super.toString()}: value: ${this.score()}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the sorted set IncrementScore request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(error) {
        super(error);
        this.type = enums_1.CacheSortedSetIncrementScoreResponse.Error;
    }
    score() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc29ydGVkLXNldC1pbmNyZW1lbnQtc2NvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2NhY2hlLXNvcnRlZC1zZXQtaW5jcmVtZW50LXNjb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUF1RTtBQUN2RSxtQ0FBNkQ7QUFRN0Q7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFLOUMsWUFBWSxLQUFhO1FBQ3ZCLEtBQUssRUFBRSxDQUFDO1FBSkQsU0FBSSxHQUNYLDRDQUFvQyxDQUFDLE9BQU8sQ0FBQztRQUk3QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRWUsUUFBUTtRQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFZLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0lBQ3ZELENBQUM7Q0FDRjtBQXJCRCwwQkFxQkM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFJMUMsWUFBWSxLQUFlO1FBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUpOLFNBQUksR0FDWCw0Q0FBb0MsQ0FBQyxLQUFLLENBQUM7SUFJN0MsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFYRCxzQkFXQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIEJhc2VSZXNwb25zZVN1Y2Nlc3N9IGZyb20gJy4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge0NhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmVSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5pbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgc2NvcmUoKTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlUmVzcG9uc2U7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIGEgU3VjY2Vzc2Z1bCBzb3J0ZWQgc2V0IEluY3JlbWVudFNjb3JlIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWNjZXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlU3VjY2VzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3Njb3JlOiBudW1iZXI7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmVSZXNwb25zZS5TdWNjZXNzID1cbiAgICBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlUmVzcG9uc2UuU3VjY2VzcztcblxuICBjb25zdHJ1Y3RvcihzY29yZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zY29yZSA9IHNjb3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuZXcgc2NvcmUgb2YgdGhlIGVsZW1lbnQgYWZ0ZXIgaW5jcmVtZW50aW5nLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgcHVibGljIHNjb3JlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3JlO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3N1cGVyLnRvU3RyaW5nKCl9OiB2YWx1ZTogJHt0aGlzLnNjb3JlKCl9YDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgc29ydGVkIHNldCBJbmNyZW1lbnRTY29yZSByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNvcnRlZFNldEluY3JlbWVudFNjb3JlUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlU29ydGVkU2V0SW5jcmVtZW50U2NvcmVSZXNwb25zZS5FcnJvcjtcblxuICBjb25zdHJ1Y3RvcihlcnJvcjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgc2NvcmUoKTogdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19