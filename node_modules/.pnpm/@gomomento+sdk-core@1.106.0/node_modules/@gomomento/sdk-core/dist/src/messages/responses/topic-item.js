"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicItem = void 0;
const utils_1 = require("../../internal/utils");
/**
 * Represents the data received from a topic subscription.
 *
 * @remarks A subscription is created by calling {@link TopicClient.subscribe}.
 * The value is guaranteed to be either a {@link string} or a {@link Uint8Array}.
 * Call the appropriate accessor if you know the type of the value.
 */
class TopicItem {
    constructor(_value, _sequenceNumber, options) {
        this._value = _value;
        this._tokenId = options === null || options === void 0 ? void 0 : options.tokenId;
        this._sequenceNumber = _sequenceNumber;
    }
    /**
     * Returns the data read from the stream.
     * @returns string | Uint8Array
     */
    value() {
        return this._value;
    }
    /**
     * Returns the data read from the stream as a {@link string}.
     * @returns string
     */
    valueString() {
        return this.value().toString();
    }
    /**
     * Returns the data read from the stream as a {@link Uint8Array}.
     * @returns Uint8Array
     */
    valueUint8Array() {
        return this.value();
    }
    /**
     * Optionally returns the publisher ID from the steam if it exists.
     * @returns string | undefined
     */
    tokenId() {
        return this._tokenId;
    }
    /**
     * Returns the sequence number of the item.
     * @returns number
     */
    sequenceNumber() {
        return this._sequenceNumber;
    }
    toString() {
        const displayValue = (0, utils_1.truncateString)(this.value().toString());
        let displayString = `${this.constructor.name}: ${displayValue}`;
        if (this._tokenId !== undefined) {
            displayString += `; Token Id: ${this._tokenId}`;
        }
        return displayString;
    }
}
exports.TopicItem = TopicItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9waWMtaXRlbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvdG9waWMtaXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnREFBb0Q7QUFNcEQ7Ozs7OztHQU1HO0FBQ0gsTUFBYSxTQUFTO0lBS3BCLFlBQ0UsTUFBMkIsRUFDM0IsZUFBdUIsRUFDdkIsT0FBMEI7UUFFMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsT0FBTyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBZ0IsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksY0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVNLFFBQVE7UUFDYixNQUFNLFlBQVksR0FBRyxJQUFBLHNCQUFjLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDN0QsSUFBSSxhQUFhLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUUsQ0FBQztRQUVoRSxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1lBQy9CLGFBQWEsSUFBSSxlQUFlLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNqRDtRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQWpFRCw4QkFpRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RydW5jYXRlU3RyaW5nfSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9waWNJdGVtT3B0aW9ucyB7XG4gIHRva2VuSWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIGEgdG9waWMgc3Vic2NyaXB0aW9uLlxuICpcbiAqIEByZW1hcmtzIEEgc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYnkgY2FsbGluZyB7QGxpbmsgVG9waWNDbGllbnQuc3Vic2NyaWJlfS5cbiAqIFRoZSB2YWx1ZSBpcyBndWFyYW50ZWVkIHRvIGJlIGVpdGhlciBhIHtAbGluayBzdHJpbmd9IG9yIGEge0BsaW5rIFVpbnQ4QXJyYXl9LlxuICogQ2FsbCB0aGUgYXBwcm9wcmlhdGUgYWNjZXNzb3IgaWYgeW91IGtub3cgdGhlIHR5cGUgb2YgdGhlIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgVG9waWNJdGVtIHtcbiAgcHJpdmF0ZSByZWFkb25seSBfdmFsdWU6IHN0cmluZyB8IFVpbnQ4QXJyYXk7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3Rva2VuSWQ/OiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3NlcXVlbmNlTnVtYmVyOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgX3ZhbHVlOiBzdHJpbmcgfCBVaW50OEFycmF5LFxuICAgIF9zZXF1ZW5jZU51bWJlcjogbnVtYmVyLFxuICAgIG9wdGlvbnM/OiBUb3BpY0l0ZW1PcHRpb25zXG4gICkge1xuICAgIHRoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgIHRoaXMuX3Rva2VuSWQgPSBvcHRpb25zPy50b2tlbklkO1xuICAgIHRoaXMuX3NlcXVlbmNlTnVtYmVyID0gX3NlcXVlbmNlTnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgcmVhZCBmcm9tIHRoZSBzdHJlYW0uXG4gICAqIEByZXR1cm5zIHN0cmluZyB8IFVpbnQ4QXJyYXlcbiAgICovXG4gIHB1YmxpYyB2YWx1ZSgpOiBzdHJpbmcgfCBVaW50OEFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSByZWFkIGZyb20gdGhlIHN0cmVhbSBhcyBhIHtAbGluayBzdHJpbmd9LlxuICAgKiBAcmV0dXJucyBzdHJpbmdcbiAgICovXG4gIHB1YmxpYyB2YWx1ZVN0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnZhbHVlKCkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkYXRhIHJlYWQgZnJvbSB0aGUgc3RyZWFtIGFzIGEge0BsaW5rIFVpbnQ4QXJyYXl9LlxuICAgKiBAcmV0dXJucyBVaW50OEFycmF5XG4gICAqL1xuICBwdWJsaWMgdmFsdWVVaW50OEFycmF5KCk6IFVpbnQ4QXJyYXkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlKCkgYXMgVWludDhBcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPcHRpb25hbGx5IHJldHVybnMgdGhlIHB1Ymxpc2hlciBJRCBmcm9tIHRoZSBzdGVhbSBpZiBpdCBleGlzdHMuXG4gICAqIEByZXR1cm5zIHN0cmluZyB8IHVuZGVmaW5lZFxuICAgKi9cbiAgcHVibGljIHRva2VuSWQoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5JZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGl0ZW0uXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgcHVibGljIHNlcXVlbmNlTnVtYmVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcXVlbmNlTnVtYmVyO1xuICB9XG5cbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgY29uc3QgZGlzcGxheVZhbHVlID0gdHJ1bmNhdGVTdHJpbmcodGhpcy52YWx1ZSgpLnRvU3RyaW5nKCkpO1xuICAgIGxldCBkaXNwbGF5U3RyaW5nID0gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfTogJHtkaXNwbGF5VmFsdWV9YDtcblxuICAgIGlmICh0aGlzLl90b2tlbklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGRpc3BsYXlTdHJpbmcgKz0gYDsgVG9rZW4gSWQ6ICR7dGhpcy5fdG9rZW5JZH1gO1xuICAgIH1cblxuICAgIHJldHVybiBkaXNwbGF5U3RyaW5nO1xuICB9XG59XG4iXX0=