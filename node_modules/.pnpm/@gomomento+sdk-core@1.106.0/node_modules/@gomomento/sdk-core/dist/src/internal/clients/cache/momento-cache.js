"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MomentoCache = void 0;
class MomentoCache {
    constructor(cacheClient, cacheName) {
        this.cacheClient = cacheClient;
        this.cacheName = cacheName;
    }
    get(key) {
        return this.cacheClient.get(this.cacheName, key);
    }
    set(key, value, options) {
        return this.cacheClient.set(this.cacheName, key, value, options);
    }
    delete(key) {
        return this.cacheClient.delete(this.cacheName, key);
    }
    increment(field, amount, options) {
        return this.cacheClient.increment(this.cacheName, field, amount, options);
    }
    setIfNotExists(key, field, options) {
        return this.cacheClient.setIfNotExists(this.cacheName, key, field, options);
    }
    setIfAbsent(key, field, options) {
        return this.cacheClient.setIfAbsent(this.cacheName, key, field, options);
    }
    setIfPresent(key, value, options) {
        return this.cacheClient.setIfPresent(this.cacheName, key, value, options);
    }
    setIfEqual(key, value, equal, options) {
        return this.cacheClient.setIfEqual(this.cacheName, key, value, equal, options);
    }
    setIfNotEqual(key, value, notEqual, options) {
        return this.cacheClient.setIfNotEqual(this.cacheName, key, value, notEqual, options);
    }
    setIfPresentAndNotEqual(key, value, notEqual, options) {
        return this.cacheClient.setIfPresentAndNotEqual(this.cacheName, key, value, notEqual, options);
    }
    setIfAbsentOrEqual(key, value, equal, options) {
        return this.cacheClient.setIfAbsentOrEqual(this.cacheName, key, value, equal, options);
    }
    getBatch(keys) {
        return this.cacheClient.getBatch(this.cacheName, keys);
    }
    setBatch(items, options) {
        return this.cacheClient.setBatch(this.cacheName, items, options);
    }
    setFetch(setName) {
        return this.cacheClient.setFetch(this.cacheName, setName);
    }
    setAddElement(setName, element, options) {
        return this.cacheClient.setAddElement(this.cacheName, setName, element, options);
    }
    setAddElements(setName, elements, options) {
        return this.cacheClient.setAddElements(this.cacheName, setName, elements, options);
    }
    setContainsElement(setName, element) {
        return this.cacheClient.setContainsElement(this.cacheName, setName, element);
    }
    setContainsElements(setName, elements) {
        return this.cacheClient.setContainsElements(this.cacheName, setName, elements);
    }
    setRemoveElement(setName, element) {
        return this.cacheClient.setRemoveElement(this.cacheName, setName, element);
    }
    setRemoveElements(setName, elements) {
        return this.cacheClient.setRemoveElements(this.cacheName, setName, elements);
    }
    setSample(setName, limit) {
        return this.cacheClient.setSample(this.cacheName, setName, limit);
    }
    setPop(setName, count) {
        return this.cacheClient.setPop(this.cacheName, setName, count);
    }
    setLength(setName) {
        return this.cacheClient.setLength(this.cacheName, setName);
    }
    listFetch(listName, options) {
        return this.cacheClient.listFetch(this.cacheName, listName, options);
    }
    listLength(listName) {
        return this.cacheClient.listLength(this.cacheName, listName);
    }
    listPushFront(listName, value, options) {
        return this.cacheClient.listPushFront(this.cacheName, listName, value, options);
    }
    listPushBack(listName, value, options) {
        return this.cacheClient.listPushBack(this.cacheName, listName, value, options);
    }
    listConcatenateBack(listName, values, options) {
        return this.cacheClient.listConcatenateBack(this.cacheName, listName, values, options);
    }
    listConcatenateFront(listName, values, options) {
        return this.cacheClient.listConcatenateFront(this.cacheName, listName, values, options);
    }
    listPopBack(listName) {
        return this.cacheClient.listPopBack(this.cacheName, listName);
    }
    listPopFront(listName) {
        return this.cacheClient.listPopFront(this.cacheName, listName);
    }
    listRemoveValue(listName, value) {
        return this.cacheClient.listRemoveValue(this.cacheName, listName, value);
    }
    listRetain(listName, options) {
        return this.cacheClient.listRetain(this.cacheName, listName, options);
    }
    dictionarySetField(dictionaryName, field, value, options) {
        return this.cacheClient.dictionarySetField(this.cacheName, dictionaryName, field, value, options);
    }
    dictionarySetFields(dictionaryName, elements, options) {
        return this.cacheClient.dictionarySetFields(this.cacheName, dictionaryName, elements, options);
    }
    dictionaryGetField(dictionaryName, field) {
        return this.cacheClient.dictionaryGetField(this.cacheName, dictionaryName, field);
    }
    dictionaryGetFields(dictionaryName, fields) {
        return this.cacheClient.dictionaryGetFields(this.cacheName, dictionaryName, fields);
    }
    dictionaryFetch(dictionaryName) {
        return this.cacheClient.dictionaryFetch(this.cacheName, dictionaryName);
    }
    dictionaryIncrement(dictionaryName, field, amount, options) {
        return this.cacheClient.dictionaryIncrement(this.cacheName, dictionaryName, field, amount, options);
    }
    dictionaryRemoveField(dictionaryName, field) {
        return this.cacheClient.dictionaryRemoveField(this.cacheName, dictionaryName, field);
    }
    dictionaryRemoveFields(dictionaryName, fields) {
        return this.cacheClient.dictionaryRemoveFields(this.cacheName, dictionaryName, fields);
    }
    dictionaryLength(dictionaryName) {
        return this.cacheClient.dictionaryLength(this.cacheName, dictionaryName);
    }
    sortedSetFetchByRank(sortedSetName, options) {
        return this.cacheClient.sortedSetFetchByRank(this.cacheName, sortedSetName, options);
    }
    sortedSetFetchByScore(sortedSetName, options) {
        return this.cacheClient.sortedSetFetchByScore(this.cacheName, sortedSetName, options);
    }
    sortedSetPutElement(sortedSetName, value, score, options) {
        return this.cacheClient.sortedSetPutElement(this.cacheName, sortedSetName, value, score, options);
    }
    sortedSetPutElements(sortedSetName, elements, options) {
        return this.cacheClient.sortedSetPutElements(this.cacheName, sortedSetName, elements, options);
    }
    sortedSetGetRank(sortedSetName, value) {
        return this.cacheClient.sortedSetGetRank(this.cacheName, sortedSetName, value);
    }
    sortedSetGetScore(sortedSetName, value) {
        return this.cacheClient.sortedSetGetScore(this.cacheName, sortedSetName, value);
    }
    sortedSetGetScores(sortedSetName, values) {
        return this.cacheClient.sortedSetGetScores(this.cacheName, sortedSetName, values);
    }
    sortedSetIncrementScore(sortedSetName, value, amount, options) {
        return this.cacheClient.sortedSetIncrementScore(this.cacheName, sortedSetName, value, amount, options);
    }
    sortedSetRemoveElement(sortedSetName, value) {
        return this.cacheClient.sortedSetRemoveElement(this.cacheName, sortedSetName, value);
    }
    sortedSetRemoveElements(sortedSetName, values) {
        return this.cacheClient.sortedSetRemoveElements(this.cacheName, sortedSetName, values);
    }
    sortedSetLength(sortedSetName) {
        return this.cacheClient.sortedSetLength(this.cacheName, sortedSetName);
    }
    sortedSetLengthByScore(sortedSetName, options) {
        return this.cacheClient.sortedSetLengthByScore(this.cacheName, sortedSetName, options);
    }
    itemGetType(key) {
        return this.cacheClient.itemGetType(this.cacheName, key);
    }
    itemGetTtl(key) {
        return this.cacheClient.itemGetTtl(this.cacheName, key);
    }
    keyExists(key) {
        return this.cacheClient.keyExists(this.cacheName, key);
    }
    keysExist(keys) {
        return this.cacheClient.keysExist(this.cacheName, keys);
    }
    updateTtl(key, ttlMilliseconds) {
        return this.cacheClient.updateTtl(this.cacheName, key, ttlMilliseconds);
    }
    increaseTtl(key, ttlMilliseconds) {
        return this.cacheClient.increaseTtl(this.cacheName, key, ttlMilliseconds);
    }
    decreaseTtl(key, ttlMilliseconds) {
        return this.cacheClient.decreaseTtl(this.cacheName, key, ttlMilliseconds);
    }
    close() {
        this.cacheClient.close();
    }
}
exports.MomentoCache = MomentoCache;
//# sourceMappingURL=data:application/json;base64,