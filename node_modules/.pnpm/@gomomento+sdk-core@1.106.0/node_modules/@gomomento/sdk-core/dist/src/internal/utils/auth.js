"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalSuperUserPermissions = exports.decodeAuthToken = exports.populateAllEndpointsFromBaseEndpoint = void 0;
const errors_1 = require("../../errors");
const jwt_decode_1 = require("jwt-decode");
const validators_1 = require("./validators");
const string_1 = require("./string");
const permission_scope_1 = require("../../auth/tokens/permission-scope");
function decodeAuthTokenClaims(authToken) {
    return (0, jwt_decode_1.default)(authToken);
}
function populateAllEndpointsFromBaseEndpoint(endpointOverride) {
    let prefix = '';
    if (endpointOverride.endpointPrefix) {
        prefix = `${endpointOverride.endpointPrefix}.`;
    }
    return {
        controlEndpoint: {
            endpoint: `${prefix}control.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection,
        },
        cacheEndpoint: {
            endpoint: `${prefix}cache.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection,
        },
        tokenEndpoint: {
            endpoint: `${prefix}token.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection,
        },
        storageEndpoint: {
            endpoint: `${prefix}storage.${endpointOverride.baseEndpoint}`,
            secureConnection: endpointOverride.secureConnection,
        },
    };
}
exports.populateAllEndpointsFromBaseEndpoint = populateAllEndpointsFromBaseEndpoint;
/**
 * @param {string} token
 * @returns TokenAndEndpoints
 */
const decodeAuthToken = (token) => {
    if (!token) {
        throw new errors_1.InvalidArgumentError('malformed auth token');
    }
    try {
        // v1 api tokens don't have an endpoint as part of their claims. Instead, when the SDK returns tokens, we
        // give it to them as a base64 encoded string of '{ "api_key": "<the key>", "endpoint": "prod.momentohq.com" }'.
        // Since in the near future, most customers are going to be using these newer tokens, we are first checking to see if
        // they are base64 encoded, which will tell us that they are our v1 api tokens. If its not, we will fall back to decoding
        // it as one of our legacy jwts.
        if ((0, validators_1.isBase64)(token)) {
            const base64DecodedToken = JSON.parse((0, string_1.decodeFromBase64)(token));
            if (!base64DecodedToken.endpoint || !base64DecodedToken.api_key) {
                throw new errors_1.InvalidArgumentError('failed to parse token');
            }
            const endpoints = populateAllEndpointsFromBaseEndpoint({
                baseEndpoint: base64DecodedToken.endpoint,
            });
            return {
                controlEndpoint: endpoints.controlEndpoint.endpoint,
                cacheEndpoint: endpoints.cacheEndpoint.endpoint,
                tokenEndpoint: endpoints.tokenEndpoint.endpoint,
                storageEndpoint: endpoints.storageEndpoint.endpoint,
                authToken: base64DecodedToken.api_key,
            };
        }
        else {
            // This decode function uses generics to advertise that we will usually expect to find the LegacyClaims.  However,
            // if the token is a valid JWT but not actually one of our legacy tokens, the endpoint claims will be undefined,
            // which is why the return type for this function specifies that the controlEndpoint/cacheEndpoint may be undefined.
            const decodedLegacyToken = decodeAuthTokenClaims(token);
            return {
                controlEndpoint: decodedLegacyToken.cp,
                cacheEndpoint: decodedLegacyToken.c,
                tokenEndpoint: decodedLegacyToken.c,
                storageEndpoint: decodedLegacyToken.c,
                authToken: token,
            };
        }
    }
    catch (e) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        throw new errors_1.InvalidArgumentError(`failed to parse token: ${e}`);
    }
};
exports.decodeAuthToken = decodeAuthToken;
class InternalSuperUserPermissions extends permission_scope_1.PredefinedScope {
}
exports.InternalSuperUserPermissions = InternalSuperUserPermissions;
//# sourceMappingURL=data:application/json;base64,