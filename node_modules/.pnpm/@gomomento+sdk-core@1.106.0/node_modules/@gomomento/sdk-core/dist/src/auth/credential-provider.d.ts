import { AllEndpoints } from '../internal/utils';
export interface BaseEndpointOverride {
    baseEndpoint: string;
    endpointPrefix?: string;
    secureConnection?: boolean;
}
export type EndpointOverrides = BaseEndpointOverride | AllEndpoints;
/**
 * Encapsulates arguments for instantiating an EnvMomentoTokenProvider
 */
interface CredentialProviderProps {
    endpointOverrides?: EndpointOverrides;
}
/**
 * Provides information that the CacheClient needs in order to establish a connection to and authenticate with
 * the Momento service.
 * @export
 * @interface CredentialProvider
 */
export declare abstract class CredentialProvider {
    /**
     * @returns {string} Auth token provided by user, required to authenticate with the service
     */
    abstract getAuthToken(): string;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento control plane operations
     */
    abstract getControlEndpoint(): string;
    /**
     * @returns {boolean} true if connecting to the control plane endpoint connection with TLS; false if not using TLS
     */
    abstract isControlEndpointSecure(): boolean;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento data plane operations
     */
    abstract getCacheEndpoint(): string;
    /**
     * @returns {boolean} true if connecting to the data plane endpoint connection with TLS; false if not using TLS
     */
    abstract isCacheEndpointSecure(): boolean;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento storage operations
     */
    abstract getStorageEndpoint(): string;
    /**
     * @returns {boolean} true if connecting to the storage endpoint connection with TLS; false if not using TLS
     */
    abstract isStorageEndpointSecure(): boolean;
    /**
     * @returns {string} The host which the Momento client will connect to for Momento token operations
     */
    abstract getTokenEndpoint(): string;
    /**
     * @returns {boolean} true if connecting to the token endpoint connection with TLS; false if not using TLS
     */
    abstract isTokenEndpointSecure(): boolean;
    /**
     * @deprecated - use the static method forMomentoLocal instead
     *
     * Modifies the instance of the credential provider to override endpoints to
     * allow insecure connections to the momento-local service for testing purposes
     */
    abstract withMomentoLocal(): CredentialProvider;
    /**
     * @returns {boolean} true if the endpoints were manually overridden at construction time; false otherwise
     */
    abstract areEndpointsOverridden(): boolean;
    static fromEnvironmentVariable(props: EnvMomentoTokenProviderProps | string): CredentialProvider;
    static fromEnvVar(props: EnvMomentoTokenProviderProps | string): CredentialProvider;
    static fromString(props: StringMomentoTokenProviderProps | string): CredentialProvider;
    /**
     * Allow insecure connections to momento-local service for testing purposes.
     * Does not require a Momento API key.
     * @param props configuration options for connecting to momento-local
     * @returns CredentialProvider
     */
    static forMomentoLocal(props: MomentoLocalProviderProps): CredentialProvider;
}
declare abstract class CredentialProviderBase implements CredentialProvider {
    abstract getAuthToken(): string;
    abstract getCacheEndpoint(): string;
    abstract isCacheEndpointSecure(): boolean;
    abstract getControlEndpoint(): string;
    abstract isControlEndpointSecure(): boolean;
    abstract getStorageEndpoint(): string;
    abstract isStorageEndpointSecure(): boolean;
    abstract getTokenEndpoint(): string;
    abstract isTokenEndpointSecure(): boolean;
    abstract areEndpointsOverridden(): boolean;
    abstract withMomentoLocal(): CredentialProvider;
    valueOf(): object;
}
export interface StringMomentoApiKeyProviderProps extends CredentialProviderProps {
    /**
     * apiKey the momento API key
     */
    apiKey: string;
}
export interface StringMomentoAuthTokenProviderProps extends CredentialProviderProps {
    /**
     * authToken the momento auth token
     */
    authToken: string;
}
export type StringMomentoTokenProviderProps = StringMomentoApiKeyProviderProps | StringMomentoAuthTokenProviderProps;
/**
 * Reads and parses a momento auth token stored in a String
 * @export
 * @class StringMomentoTokenProvider
 */
export declare class StringMomentoTokenProvider extends CredentialProviderBase {
    private readonly apiKey;
    private readonly allEndpoints;
    private readonly endpointsOverridden;
    /**
     * @param {StringMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props: StringMomentoTokenProviderProps | string);
    getAuthToken(): string;
    getCacheEndpoint(): string;
    isCacheEndpointSecure(): boolean;
    getControlEndpoint(): string;
    isControlEndpointSecure(): boolean;
    getTokenEndpoint(): string;
    isTokenEndpointSecure(): boolean;
    getStorageEndpoint(): string;
    isStorageEndpointSecure(): boolean;
    areEndpointsOverridden(): boolean;
    withMomentoLocal(): CredentialProvider;
}
export interface EnvMomentoTokenProviderProps extends CredentialProviderProps {
    /**
     * the name of the environment variable from which the auth token will be read
     */
    environmentVariableName: string;
}
/**
 * Reads and parses a momento auth token stored as an environment variable.
 * @export
 * @class EnvMomentoTokenProvider
 */
export declare class EnvMomentoTokenProvider extends StringMomentoTokenProvider {
    environmentVariableName: string;
    /**
     * @param {EnvMomentoTokenProviderProps} props configuration options for the token provider
     */
    constructor(props: EnvMomentoTokenProviderProps | string);
}
export declare function getDefaultCredentialProvider(): CredentialProvider;
export interface MomentoLocalProviderProps extends CredentialProviderProps {
    /**
     * The hostname of the momento-local service
     */
    hostname?: string;
    /**
     * The port of the momento-local service
     */
    port?: number;
}
export declare class MomentoLocalProvider implements CredentialProvider {
    private readonly allEndpoints;
    private readonly endpointsOverridden;
    /**
     * @param {MomentoLocalProviderProps} props configuration options for connecting to momento-local
     */
    constructor(props?: MomentoLocalProviderProps);
    getAuthToken(): string;
    getCacheEndpoint(): string;
    isCacheEndpointSecure(): boolean;
    getControlEndpoint(): string;
    isControlEndpointSecure(): boolean;
    getTokenEndpoint(): string;
    isTokenEndpointSecure(): boolean;
    getStorageEndpoint(): string;
    isStorageEndpointSecure(): boolean;
    areEndpointsOverridden(): boolean;
    withMomentoLocal(): CredentialProvider;
}
export {};
