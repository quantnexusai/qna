"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("../response-base");
const enums_1 = require("../enums");
/**
 * Indicates a Successful list webhooks request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(webhooks) {
        super();
        this.type = enums_1.ListWebhooksResponse.Success;
        this.webhooks = webhooks;
    }
    /**
     * An array of webhooks.
     * @returns {Webhook[]}
     */
    getWebhooks() {
        return this.webhooks;
    }
    toString() {
        return (super.toString() +
            ': ' +
            this.webhooks.map(webhook => webhook.id.webhookName).join(', '));
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the list webhooks request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.ListWebhooksResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC13ZWJob29rcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvd2ViaG9vay9saXN0LXdlYmhvb2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLG9EQUF3RTtBQUV4RSxvQ0FBOEM7QUFNOUM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFJOUMsWUFBWSxRQUFtQjtRQUM3QixLQUFLLEVBQUUsQ0FBQztRQUhELFNBQUksR0FBRyw0QkFBb0IsQ0FBQyxPQUFPLENBQUM7UUFJM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE9BQU8sQ0FDTCxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2hCLElBQUk7WUFDSixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUNoRSxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBeEJELDBCQXdCQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUUxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUZoQixTQUFJLEdBQStCLDRCQUFvQixDQUFDLEtBQUssQ0FBQztJQUd2RSxDQUFDO0NBQ0Y7QUFMRCxzQkFLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge0Jhc2VSZXNwb25zZUVycm9yLCBCYXNlUmVzcG9uc2VTdWNjZXNzfSBmcm9tICcuLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7V2ViaG9va30gZnJvbSAnLi4vLi4vd2ViaG9vayc7XG5pbXBvcnQge0xpc3RXZWJob29rc1Jlc3BvbnNlfSBmcm9tICcuLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBMaXN0V2ViaG9va3NSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBTdWNjZXNzZnVsIGxpc3Qgd2ViaG9va3MgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSB3ZWJob29rczogV2ViaG9va1tdO1xuICByZWFkb25seSB0eXBlID0gTGlzdFdlYmhvb2tzUmVzcG9uc2UuU3VjY2VzcztcblxuICBjb25zdHJ1Y3Rvcih3ZWJob29rczogV2ViaG9va1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLndlYmhvb2tzID0gd2ViaG9va3M7XG4gIH1cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2Ygd2ViaG9va3MuXG4gICAqIEByZXR1cm5zIHtXZWJob29rW119XG4gICAqL1xuICBwdWJsaWMgZ2V0V2ViaG9va3MoKSB7XG4gICAgcmV0dXJuIHRoaXMud2ViaG9va3M7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN1cGVyLnRvU3RyaW5nKCkgK1xuICAgICAgJzogJyArXG4gICAgICB0aGlzLndlYmhvb2tzLm1hcCh3ZWJob29rID0+IHdlYmhvb2suaWQud2ViaG9va05hbWUpLmpvaW4oJywgJylcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBsaXN0IHdlYmhvb2tzIHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IExpc3RXZWJob29rc1Jlc3BvbnNlLkVycm9yID0gTGlzdFdlYmhvb2tzUmVzcG9uc2UuRXJyb3I7XG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19