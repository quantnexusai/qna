"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseNotFound = exports.ResponseFound = exports.ResponseSuccess = exports.BaseResponseSubscription = exports.BaseResponseSuccess = exports.ResponseMiss = exports.BaseResponseMiss = exports.ResponseHit = exports.ResponseError = exports.BaseResponseError = exports.ResponseBase = void 0;
class ResponseBase {
    toString() {
        return this.constructor.name;
    }
}
exports.ResponseBase = ResponseBase;
class BaseResponseError extends ResponseBase {
    constructor(innerException) {
        super();
        this._innerException = innerException;
    }
    message() {
        return this._innerException.wrappedErrorMessage();
    }
    innerException() {
        return this._innerException;
    }
    errorCode() {
        return this._innerException.errorCode();
    }
    toString() {
        return this.message();
    }
}
exports.BaseResponseError = BaseResponseError;
function ResponseError(Base) {
    return class ResponseError extends Base {
        message() {
            return this._innerException.wrappedErrorMessage();
        }
        innerException() {
            return this._innerException;
        }
        errorCode() {
            return this._innerException.errorCode();
        }
        toString() {
            return this.message();
        }
    };
}
exports.ResponseError = ResponseError;
function ResponseHit(Base) {
    return class ResponseHit extends Base {
    };
}
exports.ResponseHit = ResponseHit;
class BaseResponseMiss extends ResponseBase {
    constructor() {
        super(...arguments);
        this.is_miss = true;
    }
}
exports.BaseResponseMiss = BaseResponseMiss;
function ResponseMiss(Base) {
    return class ResponseMiss extends Base {
        constructor() {
            super(...arguments);
            this.is_miss = true;
        }
    };
}
exports.ResponseMiss = ResponseMiss;
class BaseResponseSuccess extends ResponseBase {
    constructor() {
        super(...arguments);
        this.is_success = true;
    }
}
exports.BaseResponseSuccess = BaseResponseSuccess;
class BaseResponseSubscription extends ResponseBase {
    constructor() {
        super(...arguments);
        this.is_subscribed = true;
    }
}
exports.BaseResponseSubscription = BaseResponseSubscription;
function ResponseSuccess(Base) {
    return class ResponseSuccess extends Base {
        constructor() {
            super(...arguments);
            this.is_success = true;
        }
    };
}
exports.ResponseSuccess = ResponseSuccess;
function ResponseFound(Base) {
    return class ResponseFound extends Base {
    };
}
exports.ResponseFound = ResponseFound;
function ResponseNotFound(Base) {
    return class ResponseNotFound extends Base {
    };
}
exports.ResponseNotFound = ResponseNotFound;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvcmVzcG9uc2UtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFzQixZQUFZO0lBQ3pCLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUM7Q0FDRjtBQUpELG9DQUlDO0FBK0JELE1BQXNCLGlCQUFrQixTQUFRLFlBQVk7SUFHMUQsWUFBc0IsY0FBd0I7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFTSxjQUFjO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRU0sU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRWUsUUFBUTtRQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBQ0Y7QUF2QkQsOENBdUJDO0FBRUQsU0FBZ0IsYUFBYSxDQUE0QixJQUFXO0lBQ2xFLE9BQU8sTUFBTSxhQUFjLFNBQVEsSUFBSTtRQUc5QixPQUFPO1lBQ1osT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDcEQsQ0FBQztRQUVNLGNBQWM7WUFDbkIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzlCLENBQUM7UUFFTSxTQUFTO1lBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzFDLENBQUM7UUFFZSxRQUFRO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQXBCRCxzQ0FvQkM7QUFFRCxTQUFnQixXQUFXLENBQTRCLElBQVc7SUFDaEUsT0FBTyxNQUFNLFdBQVksU0FBUSxJQUFJO0tBQUcsQ0FBQztBQUMzQyxDQUFDO0FBRkQsa0NBRUM7QUFFRCxNQUFzQixnQkFBaUIsU0FBUSxZQUFZO0lBQTNEOztRQUNrQixZQUFPLEdBQVksSUFBSSxDQUFDO0lBQzFDLENBQUM7Q0FBQTtBQUZELDRDQUVDO0FBRUQsU0FBZ0IsWUFBWSxDQUE0QixJQUFXO0lBQ2pFLE9BQU8sTUFBTSxZQUFhLFNBQVEsSUFBSTtRQUEvQjs7WUFDVyxZQUFPLEdBQVksSUFBSSxDQUFDO1FBQzFDLENBQUM7S0FBQSxDQUFDO0FBQ0osQ0FBQztBQUpELG9DQUlDO0FBRUQsTUFBc0IsbUJBQW9CLFNBQVEsWUFBWTtJQUE5RDs7UUFDa0IsZUFBVSxHQUFZLElBQUksQ0FBQztJQUM3QyxDQUFDO0NBQUE7QUFGRCxrREFFQztBQUVELE1BQXNCLHdCQUF5QixTQUFRLFlBQVk7SUFBbkU7O1FBQ2tCLGtCQUFhLEdBQVksSUFBSSxDQUFDO0lBQ2hELENBQUM7Q0FBQTtBQUZELDREQUVDO0FBRUQsU0FBZ0IsZUFBZSxDQUE0QixJQUFXO0lBQ3BFLE9BQU8sTUFBTSxlQUFnQixTQUFRLElBQUk7UUFBbEM7O1lBQ1csZUFBVSxHQUFZLElBQUksQ0FBQztRQUM3QyxDQUFDO0tBQUEsQ0FBQztBQUNKLENBQUM7QUFKRCwwQ0FJQztBQUVELFNBQWdCLGFBQWEsQ0FBNEIsSUFBVztJQUNsRSxPQUFPLE1BQU0sYUFBYyxTQUFRLElBQUk7S0FBRyxDQUFDO0FBQzdDLENBQUM7QUFGRCxzQ0FFQztBQUVELFNBQWdCLGdCQUFnQixDQUE0QixJQUFXO0lBQ3JFLE9BQU8sTUFBTSxnQkFBaUIsU0FBUSxJQUFJO0tBQUcsQ0FBQztBQUNoRCxDQUFDO0FBRkQsNENBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vbWVudG9FcnJvckNvZGUsIFNka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVzcG9uc2VCYXNlIHtcbiAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xudHlwZSBDb25zdHJ1Y3RvciA9IG5ldyAoLi4uYXJnczogYW55W10pID0+IHt9O1xuXG4vLyBUaGVzZSBpbnRlcmZhY2VzIGFsbG93IHVzIHRvIGlkZW50aWZ5IHJlc3BvbnNlcyBieSB0aGVpciBtaXhpbnMuXG4vLyBUaGV5IGFyZSBvbmx5IHVzZWQgdG8gbWFrZSBzaGFyZWQgdGVzdHMgd29yay5cbi8vIFRoZXkgYXJlIG5vdCBmb3IgcHVibGljIGNvbnN1bXB0aW9uLlxuZXhwb3J0IGludGVyZmFjZSBJUmVzcG9uc2VFcnJvciB7XG4gIG1lc3NhZ2UoKTogc3RyaW5nO1xuICBpbm5lckV4Y2VwdGlvbigpOiBTZGtFcnJvcjtcbiAgZXJyb3JDb2RlKCk6IE1vbWVudG9FcnJvckNvZGU7XG4gIHRvU3RyaW5nKCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVzcG9uc2VTdWNjZXNzIHtcbiAgaXNfc3VjY2VzczogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUmVzcG9uc2VNaXNzIHtcbiAgaXNfbWlzczogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdFJlc3BvbnNlU3VjY2VzcyB7XG4gIGxpc3RMZW5ndGgoKTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSZXNwb25zZVN1YnNjcmlwdGlvbiB7XG4gIGlzX3N1YnNjcmliZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlUmVzcG9uc2VFcnJvciBleHRlbmRzIFJlc3BvbnNlQmFzZSB7XG4gIHByb3RlY3RlZCByZWFkb25seSBfaW5uZXJFeGNlcHRpb246IFNka0Vycm9yO1xuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihpbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2lubmVyRXhjZXB0aW9uID0gaW5uZXJFeGNlcHRpb247XG4gIH1cblxuICBwdWJsaWMgbWVzc2FnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pbm5lckV4Y2VwdGlvbi53cmFwcGVkRXJyb3JNZXNzYWdlKCk7XG4gIH1cblxuICBwdWJsaWMgaW5uZXJFeGNlcHRpb24oKTogU2RrRXJyb3Ige1xuICAgIHJldHVybiB0aGlzLl9pbm5lckV4Y2VwdGlvbjtcbiAgfVxuXG4gIHB1YmxpYyBlcnJvckNvZGUoKTogTW9tZW50b0Vycm9yQ29kZSB7XG4gICAgcmV0dXJuIHRoaXMuX2lubmVyRXhjZXB0aW9uLmVycm9yQ29kZSgpO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZUVycm9yPFRCYXNlIGV4dGVuZHMgQ29uc3RydWN0b3I+KEJhc2U6IFRCYXNlKSB7XG4gIHJldHVybiBjbGFzcyBSZXNwb25zZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgcHVibGljIF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3I7XG5cbiAgICBwdWJsaWMgbWVzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIHRoaXMuX2lubmVyRXhjZXB0aW9uLndyYXBwZWRFcnJvck1lc3NhZ2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaW5uZXJFeGNlcHRpb24oKTogU2RrRXJyb3Ige1xuICAgICAgcmV0dXJuIHRoaXMuX2lubmVyRXhjZXB0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvckNvZGUoKTogTW9tZW50b0Vycm9yQ29kZSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5uZXJFeGNlcHRpb24uZXJyb3JDb2RlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gdGhpcy5tZXNzYWdlKCk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2VIaXQ8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlSGl0IGV4dGVuZHMgQmFzZSB7fTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXNwb25zZU1pc3MgZXh0ZW5kcyBSZXNwb25zZUJhc2Uge1xuICBwdWJsaWMgcmVhZG9ubHkgaXNfbWlzczogYm9vbGVhbiA9IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZU1pc3M8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlTWlzcyBleHRlbmRzIEJhc2Uge1xuICAgIHB1YmxpYyByZWFkb25seSBpc19taXNzOiBib29sZWFuID0gdHJ1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VSZXNwb25zZVN1Y2Nlc3MgZXh0ZW5kcyBSZXNwb25zZUJhc2Uge1xuICBwdWJsaWMgcmVhZG9ubHkgaXNfc3VjY2VzczogYm9vbGVhbiA9IHRydWU7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlUmVzcG9uc2VTdWJzY3JpcHRpb24gZXh0ZW5kcyBSZXNwb25zZUJhc2Uge1xuICBwdWJsaWMgcmVhZG9ubHkgaXNfc3Vic2NyaWJlZDogYm9vbGVhbiA9IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZVN1Y2Nlc3M8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlU3VjY2VzcyBleHRlbmRzIEJhc2Uge1xuICAgIHB1YmxpYyByZWFkb25seSBpc19zdWNjZXNzOiBib29sZWFuID0gdHJ1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlc3BvbnNlRm91bmQ8VEJhc2UgZXh0ZW5kcyBDb25zdHJ1Y3Rvcj4oQmFzZTogVEJhc2UpIHtcbiAgcmV0dXJuIGNsYXNzIFJlc3BvbnNlRm91bmQgZXh0ZW5kcyBCYXNlIHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVzcG9uc2VOb3RGb3VuZDxUQmFzZSBleHRlbmRzIENvbnN0cnVjdG9yPihCYXNlOiBUQmFzZSkge1xuICByZXR1cm4gY2xhc3MgUmVzcG9uc2VOb3RGb3VuZCBleHRlbmRzIEJhc2Uge307XG59XG4iXX0=