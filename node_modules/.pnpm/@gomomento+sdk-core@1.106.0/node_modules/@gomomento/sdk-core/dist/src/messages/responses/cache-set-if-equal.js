"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.NotStored = exports.Stored = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates the new value was set because the key already exists and the existing item was equal to the supplied `equal` value.
 */
class Stored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfEqualResponse.Stored;
    }
}
exports.Stored = Stored;
/**
 * Indicates that no value was set because the key did not exist or because the existing item was not equal to the supplied `equal` value.
 */
class NotStored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfEqualResponse.NotStored;
    }
}
exports.NotStored = NotStored;
/**
 * Indicates that an error occurred during the setIfEqual request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetIfEqualResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWlmLWVxdWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS1zZXQtaWYtZXF1YWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQWdFO0FBQ2hFLG1DQUFnRDtBQU1oRDs7R0FFRztBQUNILE1BQWEsTUFBTyxTQUFRLDRCQUFZO0lBQXhDOztRQUNXLFNBQUksR0FDWCwrQkFBdUIsQ0FBQyxNQUFNLENBQUM7SUFDbkMsQ0FBQztDQUFBO0FBSEQsd0JBR0M7QUFFRDs7R0FFRztBQUNILE1BQWEsU0FBVSxTQUFRLDRCQUFZO0lBQTNDOztRQUNXLFNBQUksR0FDWCwrQkFBdUIsQ0FBQyxTQUFTLENBQUM7SUFDdEMsQ0FBQztDQUFBO0FBSEQsOEJBR0M7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFDMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFHaEIsU0FBSSxHQUFrQywrQkFBdUIsQ0FBQyxLQUFLLENBQUM7SUFGN0UsQ0FBQztDQUdGO0FBTkQsc0JBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtCYXNlUmVzcG9uc2VFcnJvciwgUmVzcG9uc2VCYXNlfSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZVNldElmRXF1YWxSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmRXF1YWxSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhlIG5ldyB2YWx1ZSB3YXMgc2V0IGJlY2F1c2UgdGhlIGtleSBhbHJlYWR5IGV4aXN0cyBhbmQgdGhlIGV4aXN0aW5nIGl0ZW0gd2FzIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBgZXF1YWxgIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgU3RvcmVkIGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZkVxdWFsUmVzcG9uc2UuU3RvcmVkID1cbiAgICBDYWNoZVNldElmRXF1YWxSZXNwb25zZS5TdG9yZWQ7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgbm8gdmFsdWUgd2FzIHNldCBiZWNhdXNlIHRoZSBrZXkgZGlkIG5vdCBleGlzdCBvciBiZWNhdXNlIHRoZSBleGlzdGluZyBpdGVtIHdhcyBub3QgZXF1YWwgdG8gdGhlIHN1cHBsaWVkIGBlcXVhbGAgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RTdG9yZWQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmRXF1YWxSZXNwb25zZS5Ob3RTdG9yZWQgPVxuICAgIENhY2hlU2V0SWZFcXVhbFJlc3BvbnNlLk5vdFN0b3JlZDtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHNldElmRXF1YWwgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmRXF1YWxSZXNwb25zZS5FcnJvciA9IENhY2hlU2V0SWZFcXVhbFJlc3BvbnNlLkVycm9yO1xufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IFN0b3JlZCB8IE5vdFN0b3JlZCB8IEVycm9yO1xuIl19