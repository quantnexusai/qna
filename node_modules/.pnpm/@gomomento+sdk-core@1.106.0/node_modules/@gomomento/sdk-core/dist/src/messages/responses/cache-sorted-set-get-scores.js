"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const errors_1 = require("../../errors");
const response_base_1 = require("./response-base");
const grpc_response_types_1 = require("./grpc-response-types");
const enums_1 = require("./enums");
const index_1 = require("../../index");
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(scores, values) {
        super();
        this._responses = [];
        this.type = enums_1.CacheSortedSetGetScoresResponse.Hit;
        scores.forEach((score, index) => {
            if (score.result === grpc_response_types_1._ECacheResult.Hit) {
                this._responses.push(new index_1.CacheSortedSetGetScore.Hit(score.score, values[index]));
            }
            else if (score.result === grpc_response_types_1._ECacheResult.Miss) {
                this._responses.push(new index_1.CacheSortedSetGetScore.Miss(values[index]));
            }
            else {
                this._responses.push(new index_1.CacheSortedSetGetScore.Error(new errors_1.UnknownError(score.result.toString()), values[index]));
            }
        });
    }
    responses() {
        return this._responses;
    }
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte arrays and values are numbers.
     * @returns {Map<string, number>}
     */
    valueMapString() {
        return this._responses.reduce((acc, response) => {
            if (response instanceof index_1.CacheSortedSetGetScore.Hit) {
                acc.set(response.valueString(), response.score());
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, number>}
     */
    valueMap() {
        return this.valueMapString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, number>}
     */
    valueRecordString() {
        return this._responses.reduce((acc, response) => {
            if (response instanceof index_1.CacheSortedSetGetScore.Hit) {
                acc[response.valueString()] = response.score();
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    valueRecord() {
        return this.valueRecordString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    value() {
        return this.valueRecord();
    }
    toString() {
        let stringRepresentation = '';
        this.valueMapString().forEach((value, key) => {
            const keyValue = `${key}: ${value}, `;
            stringRepresentation = stringRepresentation + keyValue;
        });
        return `${super.toString()}: valueMapString: ${stringRepresentation.slice(0, -2)}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSortedSetGetScoresResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSortedSetGetScoresResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,