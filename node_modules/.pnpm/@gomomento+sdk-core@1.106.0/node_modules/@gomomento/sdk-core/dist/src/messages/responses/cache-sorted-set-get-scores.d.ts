import { SdkError } from '../../errors';
import { ResponseBase, BaseResponseMiss, BaseResponseError } from './response-base';
import { _SortedSetGetScoreResponsePart } from './grpc-response-types';
import { CacheSortedSetGetScoresResponse } from './enums';
import { CacheSortedSetGetScore } from '../../index';
interface IResponse {
    value(): Record<string, number> | undefined;
    readonly type: CacheSortedSetGetScoresResponse;
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Hit extends ResponseBase implements IResponse {
    private readonly _responses;
    readonly type: CacheSortedSetGetScoresResponse.Hit;
    constructor(scores: _SortedSetGetScoreResponsePart[], values: Uint8Array[]);
    responses(): CacheSortedSetGetScore.Response[];
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte arrays and values are numbers.
     * @returns {Map<string, number>}
     */
    valueMapString(): Map<string, number>;
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, number>}
     */
    valueMap(): Map<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, number>}
     */
    valueRecordString(): Record<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    valueRecord(): Record<string, number>;
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, number>}
     */
    value(): Record<string, number>;
    toString(): string;
}
/**
 * Indicates that the requested data was not available in the cache.
 */
export declare class Miss extends BaseResponseMiss implements IResponse {
    readonly type: CacheSortedSetGetScoresResponse.Miss;
    value(): undefined;
}
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: CacheSortedSetGetScoresResponse.Error;
    constructor(_innerException: SdkError);
    value(): undefined;
}
export type Response = Hit | Miss | Error;
export {};
