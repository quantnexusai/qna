import { SdkError } from '../../errors';
import { BaseResponseError, BaseResponseMiss, ResponseBase } from './response-base';
import { CacheDictionaryGetFieldResponse } from './enums';
interface IResponse {
    value(): string | undefined;
    readonly type: CacheDictionaryGetFieldResponse;
}
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
export declare class Hit extends ResponseBase implements IResponse {
    private readonly body;
    private readonly field;
    readonly type: CacheDictionaryGetFieldResponse.Hit;
    constructor(body: Uint8Array, field: Uint8Array);
    /**
     * Returns the data as a utf-8 string, decoded from the underlying byte array.
     * @returns string
     */
    value(): string;
    /**
     * Returns the data as a utf-8 string, decoded from the underlying byte array.
     * @returns string
     */
    valueString(): string;
    /**
     * Returns the data as a byte array.
     * @returns {Uint8Array}
     */
    valueUint8Array(): Uint8Array;
    toString(): string;
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString(): string;
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array(): Uint8Array;
}
/**
 * Indicates that the requested data was not available in the cache.
 */
export declare class Miss extends BaseResponseMiss implements IResponse {
    private readonly field;
    readonly type: CacheDictionaryGetFieldResponse.Miss;
    constructor(field: Uint8Array);
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString(): string;
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array(): Uint8Array;
    value(): string | undefined;
}
/**
 * Indicates that an error occurred during the dictionary get field request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    private readonly field;
    readonly type: CacheDictionaryGetFieldResponse.Error;
    constructor(_innerException: SdkError, field: Uint8Array);
    /**
     * Returns the field name for the retrieved element, as a utf-8 string decoded from the underlying byte array.
     * @returns {string}
     */
    fieldString(): string;
    /**
     * Returns the field name for the retrieved element, as a byte array.
     * @returns {Uint8Array}
     */
    fieldUint8Array(): Uint8Array;
    value(): string | undefined;
}
export type Response = Hit | Miss | Error;
export {};
