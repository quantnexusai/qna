"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractPubsubClient = void 0;
const utils_1 = require("../../utils");
const errors_1 = require("../../../errors");
const index_1 = require("../../../index");
const subscription_state_1 = require("../../subscription-state");
class AbstractPubsubClient {
    constructor(loggerFactory, logger, cacheServiceErrorMapper) {
        this.loggerFactory = loggerFactory;
        this.logger = logger;
        this.cacheServiceErrorMapper = cacheServiceErrorMapper;
    }
    getLogger() {
        return this.logger;
    }
    getCacheServiceErrorMapper() {
        return this.cacheServiceErrorMapper;
    }
    async publish(cacheName, topicName, value) {
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new index_1.TopicPublish.Error(err));
            // )  new TopicPublish.Error(normalizeSdkError(err as Error));
        }
        this.logger.trace('Issuing publish request; topic: %s, message length: %s', (0, utils_1.truncateString)(topicName), value.length);
        return await this.sendPublish(cacheName, topicName, value);
    }
    async subscribe(cacheName, topicName, options) {
        var _a, _b, _c, _d;
        try {
            (0, utils_1.validateCacheName)(cacheName);
            (0, utils_1.validateTopicName)(topicName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new index_1.TopicSubscribe.Error(err));
        }
        this.logger.trace('Issuing subscribe request; topic: %s', (0, utils_1.truncateString)(topicName));
        const onItem = (_a = options.onItem) !== null && _a !== void 0 ? _a : (() => {
            return;
        });
        const onError = (_b = options.onError) !== null && _b !== void 0 ? _b : (() => {
            return;
        });
        const onDiscontinuity = (_c = options.onDiscontinuity) !== null && _c !== void 0 ? _c : (() => {
            return;
        });
        const onHeartbeat = (_d = options.onHeartbeat) !== null && _d !== void 0 ? _d : (() => {
            return;
        });
        const subscriptionState = new subscription_state_1.SubscriptionState();
        const subscription = new index_1.TopicSubscribe.Subscription(this.loggerFactory, subscriptionState);
        return await this.sendSubscribe({
            cacheName: cacheName,
            topicName: topicName,
            onItem: onItem,
            onError: onError,
            onDiscontinuity: onDiscontinuity,
            onHeartbeat: onHeartbeat,
            subscriptionState: subscriptionState,
            subscription: subscription,
            restartedDueToError: false,
            firstMessage: true,
        });
    }
    prepareEndCallback(options) {
        return () => {
            // We want to restart on stream end, except if:
            // 1. The stream was cancelled by the caller.
            // 2. The stream was restarted following an error.
            if (options.restartedDueToError) {
                this.logger.trace('Stream ended after error but was restarted on topic: %s', options.topicName);
                return;
            }
            else if (!options.subscriptionState.isSubscribed) {
                this.logger.trace('Stream ended after unsubscribe on topic: %s', options.topicName);
                return;
            }
            this.logger.trace('Stream ended on topic: %s; restarting.', options.topicName);
            // When restarting the stream we do not do anything with the promises,
            // because we should have already returned the subscription object to the user.
            this.sendSubscribe(options)
                .then(() => {
                return;
            })
                .catch(() => {
                return;
            });
        };
    }
    handleSubscribeError(options, momentoError, shouldReconnectSubscription) {
        this.logger.trace('Handling subscribe error');
        // When the first message is an error, an irrecoverable error has happened,
        // eg the cache does not exist. The user should not receive a subscription
        // object but an error.
        if (options.firstMessage) {
            this.logger.trace('First message on subscription was an error; topic: %s, error: %s', (0, utils_1.truncateString)(options.topicName), momentoError.toString());
            options.resolve(momentoError);
            options.subscription.unsubscribe();
            return;
        }
        this.logger.trace('Subscribe error was not the first message on the stream.');
        // Another special case is when the cache is not found.
        // This happens here if the user deletes the cache in the middle of
        // a subscription.
        if (momentoError.errorCode() === errors_1.MomentoErrorCode.CACHE_NOT_FOUND_ERROR) {
            this.logger.trace('Stream ended due to cache not found error on topic: %s', options.topicName);
            options.subscription.unsubscribe();
            options.onError(momentoError, options.subscription);
            return;
        }
        this.logger.trace('Checking to see if we should attempt to reconnect subscription.');
        // For several types of errors having to with network interruptions, we wish to
        // transparently restart the stream instead of propagating an error.
        if (shouldReconnectSubscription) {
            options.restartedDueToError = true;
            const reconnectDelayMillis = 500;
            this.logger.trace('Error occurred on subscription, possibly a network interruption. Will attempt to restart stream in %s ms.', reconnectDelayMillis);
            (0, utils_1.sleep)(reconnectDelayMillis)
                .then(() => {
                // When restarting the stream we do not do anything with the promises,
                // because we should have already returned the subscription object to the user.
                this.sendSubscribe(options)
                    .then(() => {
                    return;
                })
                    .catch(e => {
                    this.logger.trace('Error when calling sendSubscribe to reconnect: %s', e);
                    return;
                });
                return;
            })
                .catch(e => {
                this.logger.trace('Error when sleeping prior to sendSubscribe to reconnect: %s', e);
                return;
            });
            return;
        }
        this.logger.trace('Subscribe error was not a re-connectable error.');
        this.logger.trace('Subscribe error was not one of the known error types; calling error handler.');
        options.onError(momentoError, options.subscription);
    }
}
exports.AbstractPubsubClient = AbstractPubsubClient;
//# sourceMappingURL=data:application/json;base64,