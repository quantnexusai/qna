"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `score()` accessor to retrieve score.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(score, value) {
        super();
        this.type = enums_1.CacheSortedSetGetScoreResponse.Hit;
        this._value = value;
        this._score = score;
    }
    /**
     * Returns the value of the element in the sorted set as a Uint8Array.
     * @returns {number}
     */
    valueUint8Array() {
        return this._value;
    }
    /**
     * Returns the value of the element in the sorted set as a string.
     * @returns {string}
     */
    valueString() {
        return new TextDecoder().decode(this._value);
    }
    /**
     * Returns the score of the element in the sorted set.
     * @return {*}  {number}
     */
    score() {
        return this._score;
    }
    toString() {
        return `${super.toString()}: value: ${this.valueString()}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor(value) {
        super();
        this.type = enums_1.CacheSortedSetGetScoreResponse.Miss;
        this._value = value;
    }
    /**
     * Returns the value of the element in the sorted set as a Uint8Array.
     * @returns {number}
     */
    valueUint8Array() {
        return this._value;
    }
    /**
     * Returns the score of the element in the sorted set as a string.
     * @returns {string}
     */
    valueString() {
        return new TextDecoder().decode(this._value);
    }
    score() {
        return undefined;
    }
    toString() {
        return `${super.toString()}: value: ${this.valueString()}`;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the sorted set get score request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException, value) {
        super(_innerException);
        this.type = enums_1.CacheSortedSetGetScoreResponse.Error;
        this._value = value;
    }
    /**
     * Returns the value of the element in the sorted set as a Uint8Array.
     * @returns {number}
     */
    valueUint8Array() {
        return this._value;
    }
    /**
     * Returns the score of the element in the sorted set as a string.
     * @returns {string}
     */
    valueString() {
        return new TextDecoder().decode(this._value);
    }
    score() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc29ydGVkLXNldC1nZXQtc2NvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbWVzc2FnZXMvcmVzcG9uc2VzL2NhY2hlLXNvcnRlZC1zZXQtZ2V0LXNjb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1EQUl5QjtBQUV6QixtQ0FBdUQ7QUFPdkQ7OztHQUdHO0FBQ0gsTUFBYSxHQUFJLFNBQVEsNEJBQVk7SUFNbkMsWUFBWSxLQUFhLEVBQUUsS0FBaUI7UUFDMUMsS0FBSyxFQUFFLENBQUM7UUFKRCxTQUFJLEdBQ1gsc0NBQThCLENBQUMsR0FBRyxDQUFDO1FBSW5DLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRWUsUUFBUTtRQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFZLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQzdELENBQUM7Q0FDRjtBQXZDRCxrQkF1Q0M7QUFFRDs7R0FFRztBQUNILE1BQWEsSUFBSyxTQUFRLGdDQUFnQjtJQUt4QyxZQUFZLEtBQWlCO1FBQzNCLEtBQUssRUFBRSxDQUFDO1FBSkQsU0FBSSxHQUNYLHNDQUE4QixDQUFDLElBQUksQ0FBQztRQUlwQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksZUFBZTtRQUNwQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLEtBQUs7UUFDVixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRWUsUUFBUTtRQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxZQUFZLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0lBQzdELENBQUM7Q0FDRjtBQWpDRCxvQkFpQ0M7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFLMUMsWUFBWSxlQUF5QixFQUFFLEtBQWlCO1FBQ3RELEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUpoQixTQUFJLEdBQ1gsc0NBQThCLENBQUMsS0FBSyxDQUFDO1FBSXJDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxlQUFlO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sS0FBSztRQUNWLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQTdCRCxzQkE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSZXNwb25zZUJhc2UsXG4gIEJhc2VSZXNwb25zZU1pc3MsXG4gIEJhc2VSZXNwb25zZUVycm9yLFxufSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7Q2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlfSBmcm9tICcuL2VudW1zJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHNjb3JlKCk6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgZGF0YSB3YXMgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBmcm9tIHRoZSBjYWNoZS4gIFByb3ZpZGVzXG4gKiBgc2NvcmUoKWAgYWNjZXNzb3IgdG8gcmV0cmlldmUgc2NvcmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBIaXQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZTogVWludDhBcnJheTtcbiAgcHJpdmF0ZSByZWFkb25seSBfc2NvcmU6IG51bWJlcjtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlLkhpdCA9XG4gICAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlLkhpdDtcblxuICBjb25zdHJ1Y3RvcihzY29yZTogbnVtYmVyLCB2YWx1ZTogVWludDhBcnJheSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLl9zY29yZSA9IHNjb3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzb3J0ZWQgc2V0IGFzIGEgVWludDhBcnJheS5cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZVVpbnQ4QXJyYXkoKTogVWludDhBcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGluIHRoZSBzb3J0ZWQgc2V0IGFzIGEgc3RyaW5nLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgcHVibGljIHZhbHVlU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZSh0aGlzLl92YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NvcmUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNvcnRlZCBzZXQuXG4gICAqIEByZXR1cm4geyp9ICB7bnVtYmVyfVxuICAgKi9cbiAgcHVibGljIHNjb3JlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3JlO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3N1cGVyLnRvU3RyaW5nKCl9OiB2YWx1ZTogJHt0aGlzLnZhbHVlU3RyaW5nKCl9YDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgZGF0YSB3YXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgY2FjaGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBNaXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlTWlzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX3ZhbHVlOiBVaW50OEFycmF5O1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNvcnRlZFNldEdldFNjb3JlUmVzcG9uc2UuTWlzcyA9XG4gICAgQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlLk1pc3M7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IFVpbnQ4QXJyYXkpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNvcnRlZCBzZXQgYXMgYSBVaW50OEFycmF5LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgcHVibGljIHZhbHVlVWludDhBcnJheSgpOiBVaW50OEFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NvcmUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNvcnRlZCBzZXQgYXMgYSBzdHJpbmcuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBwdWJsaWMgdmFsdWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBzY29yZSgpOiB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IHZhbHVlOiAke3RoaXMudmFsdWVTdHJpbmcoKX1gO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBzb3J0ZWQgc2V0IGdldCBzY29yZSByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IF92YWx1ZTogVWludDhBcnJheTtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTb3J0ZWRTZXRHZXRTY29yZVJlc3BvbnNlLkVycm9yID1cbiAgICBDYWNoZVNvcnRlZFNldEdldFNjb3JlUmVzcG9uc2UuRXJyb3I7XG5cbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvciwgdmFsdWU6IFVpbnQ4QXJyYXkpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNvcnRlZCBzZXQgYXMgYSBVaW50OEFycmF5LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgcHVibGljIHZhbHVlVWludDhBcnJheSgpOiBVaW50OEFycmF5IHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc2NvcmUgb2YgdGhlIGVsZW1lbnQgaW4gdGhlIHNvcnRlZCBzZXQgYXMgYSBzdHJpbmcuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBwdWJsaWMgdmFsdWVTdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHRoaXMuX3ZhbHVlKTtcbiAgfVxuXG4gIHB1YmxpYyBzY29yZSgpOiB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBIaXQgfCBNaXNzIHwgRXJyb3I7XG4iXX0=