"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.NotStored = exports.Stored = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates the new value was set because the key did not exist or because the existing item was not equal to the supplied `notEqual` value.
 */
class Stored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfNotEqualResponse.Stored;
    }
}
exports.Stored = Stored;
/**
 * Indicates that no value was set because the existing item was equal to the supplied `notEqual` value.
 */
class NotStored extends response_base_1.ResponseBase {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetIfNotEqualResponse.NotStored;
    }
}
exports.NotStored = NotStored;
/**
 * Indicates that an error occurred during the setIfNotEqual request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetIfNotEqualResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LWlmLW5vdC1lcXVhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtc2V0LWlmLW5vdC1lcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBZ0U7QUFDaEUsbUNBQW1EO0FBTW5EOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsNEJBQVk7SUFBeEM7O1FBQ1csU0FBSSxHQUNYLGtDQUEwQixDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0NBQUE7QUFIRCx3QkFHQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxTQUFVLFNBQVEsNEJBQVk7SUFBM0M7O1FBQ1csU0FBSSxHQUNYLGtDQUEwQixDQUFDLFNBQVMsQ0FBQztJQUN6QyxDQUFDO0NBQUE7QUFIRCw4QkFHQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUdoQixTQUFJLEdBQ1gsa0NBQTBCLENBQUMsS0FBSyxDQUFDO0lBSG5DLENBQUM7Q0FJRjtBQVBELHNCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIFJlc3BvbnNlQmFzZX0gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7Q2FjaGVTZXRJZk5vdEVxdWFsUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZk5vdEVxdWFsUmVzcG9uc2U7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoZSBuZXcgdmFsdWUgd2FzIHNldCBiZWNhdXNlIHRoZSBrZXkgZGlkIG5vdCBleGlzdCBvciBiZWNhdXNlIHRoZSBleGlzdGluZyBpdGVtIHdhcyBub3QgZXF1YWwgdG8gdGhlIHN1cHBsaWVkIGBub3RFcXVhbGAgdmFsdWUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdG9yZWQgZXh0ZW5kcyBSZXNwb25zZUJhc2UgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldElmTm90RXF1YWxSZXNwb25zZS5TdG9yZWQgPVxuICAgIENhY2hlU2V0SWZOb3RFcXVhbFJlc3BvbnNlLlN0b3JlZDtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBubyB2YWx1ZSB3YXMgc2V0IGJlY2F1c2UgdGhlIGV4aXN0aW5nIGl0ZW0gd2FzIGVxdWFsIHRvIHRoZSBzdXBwbGllZCBgbm90RXF1YWxgIHZhbHVlLlxuICovXG5leHBvcnQgY2xhc3MgTm90U3RvcmVkIGV4dGVuZHMgUmVzcG9uc2VCYXNlIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZk5vdEVxdWFsUmVzcG9uc2UuTm90U3RvcmVkID1cbiAgICBDYWNoZVNldElmTm90RXF1YWxSZXNwb25zZS5Ob3RTdG9yZWQ7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBzZXRJZk5vdEVxdWFsIHJlcXVlc3QuXG4gKlxuICogVGhpcyByZXNwb25zZSBvYmplY3QgaW5jbHVkZXMgdGhlIGZvbGxvd2luZyBmaWVsZHMgdGhhdCB5b3UgY2FuIHVzZSB0byBkZXRlcm1pbmVcbiAqIGhvdyB5b3Ugd291bGQgbGlrZSB0byBoYW5kbGUgdGhlIGVycm9yOlxuICpcbiAqIC0gYGVycm9yQ29kZSgpYCAtIGEgdW5pcXVlIE1vbWVudG8gZXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXQgb2NjdXJyZWQuXG4gKiAtIGBtZXNzYWdlKClgIC0gYSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3JcbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRJZk5vdEVxdWFsUmVzcG9uc2UuRXJyb3IgPVxuICAgIENhY2hlU2V0SWZOb3RFcXVhbFJlc3BvbnNlLkVycm9yO1xufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IFN0b3JlZCB8IE5vdFN0b3JlZCB8IEVycm9yO1xuIl19