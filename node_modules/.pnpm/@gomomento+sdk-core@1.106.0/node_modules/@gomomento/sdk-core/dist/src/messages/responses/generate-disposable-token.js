"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
const utils_1 = require("../../internal/utils");
class Success extends response_base_1.BaseResponseSuccess {
    constructor(apiKey, endpoint, expiresAt) {
        super();
        this.type = enums_1.GenerateDisposableTokenResponse.Success;
        this.authToken = (0, utils_1.encodeToBase64)(JSON.stringify({ endpoint: endpoint, api_key: apiKey }));
        this.endpoint = endpoint;
        this.expiresAt = expiresAt;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the generate disposable token request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(innerException) {
        super(innerException);
        this.type = enums_1.GenerateDisposableTokenResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtZGlzcG9zYWJsZS10b2tlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvZ2VuZXJhdGUtZGlzcG9zYWJsZS10b2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBdUU7QUFDdkUsbUNBQXdEO0FBRXhELGdEQUFvRDtBQU9wRCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFROUMsWUFBWSxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxTQUFvQjtRQUNoRSxLQUFLLEVBQUUsQ0FBQztRQVJELFNBQUksR0FDWCx1Q0FBK0IsQ0FBQyxPQUFPLENBQUM7UUFReEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFBLHNCQUFjLEVBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUN0RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBaEJELDBCQWdCQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGNBQXdCO1FBQ2xDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUdmLFNBQUksR0FDWCx1Q0FBK0IsQ0FBQyxLQUFLLENBQUM7SUFIeEMsQ0FBQztDQUlGO0FBUEQsc0JBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Jhc2VSZXNwb25zZVN1Y2Nlc3MsIEJhc2VSZXNwb25zZUVycm9yfSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtHZW5lcmF0ZURpc3Bvc2FibGVUb2tlblJlc3BvbnNlfSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge2VuY29kZVRvQmFzZTY0fSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQge0V4cGlyZXNBdH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5pbnRlcmZhY2UgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogR2VuZXJhdGVEaXNwb3NhYmxlVG9rZW5SZXNwb25zZTtcbn1cblxuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogR2VuZXJhdGVEaXNwb3NhYmxlVG9rZW5SZXNwb25zZS5TdWNjZXNzID1cbiAgICBHZW5lcmF0ZURpc3Bvc2FibGVUb2tlblJlc3BvbnNlLlN1Y2Nlc3M7XG5cbiAgcmVhZG9ubHkgYXV0aFRva2VuOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGVuZHBvaW50OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGV4cGlyZXNBdDogRXhwaXJlc0F0O1xuXG4gIGNvbnN0cnVjdG9yKGFwaUtleTogc3RyaW5nLCBlbmRwb2ludDogc3RyaW5nLCBleHBpcmVzQXQ6IEV4cGlyZXNBdCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hdXRoVG9rZW4gPSBlbmNvZGVUb0Jhc2U2NChcbiAgICAgIEpTT04uc3RyaW5naWZ5KHtlbmRwb2ludDogZW5kcG9pbnQsIGFwaV9rZXk6IGFwaUtleX0pXG4gICAgKTtcbiAgICB0aGlzLmVuZHBvaW50ID0gZW5kcG9pbnQ7XG4gICAgdGhpcy5leHBpcmVzQXQgPSBleHBpcmVzQXQ7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIGdlbmVyYXRlIGRpc3Bvc2FibGUgdG9rZW4gcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoaW5uZXJFeGNlcHRpb246IFNka0Vycm9yKSB7XG4gICAgc3VwZXIoaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgcmVhZG9ubHkgdHlwZTogR2VuZXJhdGVEaXNwb3NhYmxlVG9rZW5SZXNwb25zZS5FcnJvciA9XG4gICAgR2VuZXJhdGVEaXNwb3NhYmxlVG9rZW5SZXNwb25zZS5FcnJvcjtcbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTdWNjZXNzIHwgRXJyb3I7XG4iXX0=