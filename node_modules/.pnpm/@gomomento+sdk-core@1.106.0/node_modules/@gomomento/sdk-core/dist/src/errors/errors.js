"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownServiceError = exports.UnknownError = exports.TimeoutError = exports.ServerUnavailableError = exports.PermissionError = exports.StoreItemNotFoundError = exports.StoreNotFoundError = exports.CacheNotFoundError = exports.LimitExceededError = exports.InvalidArgumentError = exports.InternalServerError = exports.FailedPreconditionError = exports.ConnectionError = exports.CancelledError = exports.BadRequestError = exports.AuthenticationError = exports.StoreAlreadyExistsError = exports.CacheAlreadyExistsError = exports.SdkError = exports.MomentoErrorTransportDetails = exports.MomentoGrpcErrorDetails = exports.MomentoErrorCode = void 0;
var MomentoErrorCode;
(function (MomentoErrorCode) {
    // Invalid argument passed to Momento client
    MomentoErrorCode["INVALID_ARGUMENT_ERROR"] = "INVALID_ARGUMENT_ERROR";
    // Service returned an unknown response
    MomentoErrorCode["UNKNOWN_SERVICE_ERROR"] = "UNKNOWN_SERVICE_ERROR";
    // Cache with specified name already exists
    MomentoErrorCode["CACHE_ALREADY_EXISTS_ERROR"] = "ALREADY_EXISTS_ERROR";
    /** @deprecated use CACHE_ALREADY_EXISTS_ERROR instead */
    MomentoErrorCode["ALREADY_EXISTS_ERROR"] = "ALREADY_EXISTS_ERROR";
    // Store with specified name already exists
    MomentoErrorCode["STORE_ALREADY_EXISTS_ERROR"] = "ALREADY_EXISTS_ERROR";
    // Cache with specified name doesn't exist
    MomentoErrorCode["CACHE_NOT_FOUND_ERROR"] = "NOT_FOUND_ERROR";
    /** @deprecated use CACHE_NOT_FOUND_ERROR instead */
    MomentoErrorCode["NOT_FOUND_ERROR"] = "NOT_FOUND_ERROR";
    // Store with specified name doesn't exist
    MomentoErrorCode["STORE_NOT_FOUND_ERROR"] = "STORE_NOT_FOUND_ERROR";
    // Item with specified key doesn't exist
    MomentoErrorCode["STORE_ITEM_NOT_FOUND_ERROR"] = "STORE_ITEM_NOT_FOUND_ERROR";
    // An unexpected error occurred while trying to fulfill the request
    MomentoErrorCode["INTERNAL_SERVER_ERROR"] = "INTERNAL_SERVER_ERROR";
    // Insufficient permissions to perform operation
    MomentoErrorCode["PERMISSION_ERROR"] = "PERMISSION_ERROR";
    // Invalid authentication credentials to connect to cache service
    MomentoErrorCode["AUTHENTICATION_ERROR"] = "AUTHENTICATION_ERROR";
    // Request was cancelled by the server
    MomentoErrorCode["CANCELLED_ERROR"] = "CANCELLED_ERROR";
    // Error connecting to Momento servers
    MomentoErrorCode["CONNECTION_ERROR"] = "CONNECTION_ERROR";
    // Request rate, bandwidth, or object size exceeded the limits for the account
    MomentoErrorCode["LIMIT_EXCEEDED_ERROR"] = "LIMIT_EXCEEDED_ERROR";
    // Request was invalid
    MomentoErrorCode["BAD_REQUEST_ERROR"] = "BAD_REQUEST_ERROR";
    // Client's configured timeout was exceeded
    MomentoErrorCode["TIMEOUT_ERROR"] = "TIMEOUT_ERROR";
    // Server was unable to handle the request
    MomentoErrorCode["SERVER_UNAVAILABLE"] = "SERVER_UNAVAILABLE";
    // A client resource (most likely memory) was exhausted
    MomentoErrorCode["CLIENT_RESOURCE_EXHAUSTED"] = "CLIENT_RESOURCE_EXHAUSTED";
    // System is not in a state required for the operation's execution
    MomentoErrorCode["FAILED_PRECONDITION_ERROR"] = "FAILED_PRECONDITION_ERROR";
    // Unknown error has occurred
    MomentoErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
})(MomentoErrorCode = exports.MomentoErrorCode || (exports.MomentoErrorCode = {}));
class MomentoGrpcErrorDetails {
    constructor(code, details, metadata) {
        this.code = code;
        this.details = details;
        this.metadata = metadata;
    }
}
exports.MomentoGrpcErrorDetails = MomentoGrpcErrorDetails;
class MomentoErrorTransportDetails {
    constructor(grpc) {
        this.grpc = grpc;
    }
}
exports.MomentoErrorTransportDetails = MomentoErrorTransportDetails;
/**
 * Base class for all errors thrown by the sdk
 */
class SdkError extends Error {
    constructor(message, code = 0, metadata = undefined, stack = undefined) {
        super(message);
        const grpcDetails = new MomentoGrpcErrorDetails(code, message, metadata);
        this._transportDetails = new MomentoErrorTransportDetails(grpcDetails);
        this.stack = stack !== null && stack !== void 0 ? stack : undefined;
    }
    wrappedErrorMessage() {
        return `${this._messageWrapper}: ${this.message}`;
    }
    errorCode() {
        return this._errorCode;
    }
    transportDetails() {
        return this._transportDetails;
    }
}
exports.SdkError = SdkError;
/**
 * Error that occurs when trying to create a cache with the same name as an existing cache. To resolve this error,
 * either delete the existing cache and make a new one, or change the name of the cache you are trying to create to
 * one that doesn't already exist
 */
class CacheAlreadyExistsError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.CACHE_ALREADY_EXISTS_ERROR;
        this._messageWrapper = 'A cache with the specified name already exists.  To resolve this error, either delete the existing cache and make a new one, or use a different name';
    }
}
exports.CacheAlreadyExistsError = CacheAlreadyExistsError;
/**
 * Error that occurs when trying to create a store with the same name as an existing cache. To resolve this error,
 * either delete the existing store and make a new one, or change the name of the store you are trying to create to
 * one that doesn't already exist
 */
class StoreAlreadyExistsError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.STORE_ALREADY_EXISTS_ERROR;
        this._messageWrapper = 'A store with the specified name already exists.  To resolve this error, either delete the existing store and make a new one, or use a different name';
    }
}
exports.StoreAlreadyExistsError = StoreAlreadyExistsError;
/**
 * Error when authentication with Cache Service fails
 */
class AuthenticationError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.AUTHENTICATION_ERROR;
        this._messageWrapper = 'Invalid authentication credentials to connect to cache service';
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Error raised in response to an invalid request
 */
class BadRequestError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.BAD_REQUEST_ERROR;
        this._messageWrapper = 'The request was invalid; please contact us at support@momentohq.com';
    }
}
exports.BadRequestError = BadRequestError;
/**
 * Error when an operation with Cache Service was cancelled
 */
class CancelledError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.CANCELLED_ERROR;
        this._messageWrapper = 'The request was cancelled; please contact us if this was unexpected at support@momentohq.com';
    }
}
exports.CancelledError = CancelledError;
/**
 * Error when there's a failure to connect to Momento servers.
 */
class ConnectionError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.CONNECTION_ERROR;
    }
}
exports.ConnectionError = ConnectionError;
/**
 * Error raised when system in not in a state required for the operation's success
 */
class FailedPreconditionError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.FAILED_PRECONDITION_ERROR;
        this._messageWrapper = "System is not in a state required for the operation's execution";
    }
}
exports.FailedPreconditionError = FailedPreconditionError;
/**
 * Cache Service encountered an unexpected exception while trying to fulfill the request
 */
class InternalServerError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.INTERNAL_SERVER_ERROR;
        this._messageWrapper = 'An unexpected error occurred while trying to fulfill the request; please contact us at support@momentohq.com';
    }
}
exports.InternalServerError = InternalServerError;
/**
 * Represents errors thrown when invalid parameters are passed to the Momento Cache
 */
class InvalidArgumentError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.INVALID_ARGUMENT_ERROR;
        this._messageWrapper = 'Invalid argument passed to Momento client';
    }
}
exports.InvalidArgumentError = InvalidArgumentError;
var LimitExceededMessageWrapper;
(function (LimitExceededMessageWrapper) {
    LimitExceededMessageWrapper["TOPIC_SUBSCRIPTIONS_LIMIT_EXCEEDED"] = "Topic subscriptions limit exceeded for this account";
    LimitExceededMessageWrapper["OPERATIONS_RATE_LIMIT_EXCEEDED"] = "Request rate limit exceeded for this account";
    LimitExceededMessageWrapper["THROUGHPUT_RATE_LIMIT_EXCEEDED"] = "Bandwidth limit exceeded for this account";
    LimitExceededMessageWrapper["REQUEST_SIZE_LIMIT_EXCEEDED"] = "Request size limit exceeded for this account";
    LimitExceededMessageWrapper["ITEM_SIZE_LIMIT_EXCEEDED"] = "Item size limit exceeded for this account";
    LimitExceededMessageWrapper["ELEMENT_SIZE_LIMIT_EXCEEDED"] = "Element size limit exceeded for this account";
    LimitExceededMessageWrapper["UNKNOWN_LIMIT_EXCEEDED"] = "Limit exceeded for this account";
})(LimitExceededMessageWrapper || (LimitExceededMessageWrapper = {}));
/**
 * Error when calls are throttled due to request limit rate
 */
class LimitExceededError extends SdkError {
    constructor(message, code = 0, metadata = undefined, stack = undefined, errCause) {
        super(message, code, metadata, stack);
        this._errorCode = MomentoErrorCode.LIMIT_EXCEEDED_ERROR;
        this._messageWrapper = this.determineMessageWrapper();
        this.errCause = errCause;
    }
    determineMessageWrapper() {
        // If provided, we use the `err` metadata value to determine the most
        // appropriate error message to return.
        if (this.errCause !== undefined) {
            switch (this.errCause) {
                case 'topic_subscriptions_limit_exceeded':
                    return LimitExceededMessageWrapper.TOPIC_SUBSCRIPTIONS_LIMIT_EXCEEDED;
                case 'operations_rate_limit_exceeded':
                    return LimitExceededMessageWrapper.OPERATIONS_RATE_LIMIT_EXCEEDED;
                case 'throughput_rate_limit_exceeded':
                    return LimitExceededMessageWrapper.THROUGHPUT_RATE_LIMIT_EXCEEDED;
                case 'request_size_limit_exceeded':
                    return LimitExceededMessageWrapper.REQUEST_SIZE_LIMIT_EXCEEDED;
                case 'item_size_limit_exceeded':
                    return LimitExceededMessageWrapper.ITEM_SIZE_LIMIT_EXCEEDED;
                case 'element_size_limit_exceeded':
                    return LimitExceededMessageWrapper.ELEMENT_SIZE_LIMIT_EXCEEDED;
                default:
                    return LimitExceededMessageWrapper.UNKNOWN_LIMIT_EXCEEDED;
            }
        }
        // If `err` metadata is unavailable, try to use the error details field
        // to return the an appropriate error message.
        if (this._transportDetails.grpc.details !== undefined) {
            const details = this._transportDetails.grpc.details.toLowerCase();
            if (details.includes('subscribers')) {
                return LimitExceededMessageWrapper.TOPIC_SUBSCRIPTIONS_LIMIT_EXCEEDED;
            }
            else if (details.includes('operations')) {
                return LimitExceededMessageWrapper.OPERATIONS_RATE_LIMIT_EXCEEDED;
            }
            else if (details.includes('throughput')) {
                return LimitExceededMessageWrapper.THROUGHPUT_RATE_LIMIT_EXCEEDED;
            }
            else if (details.includes('request limit')) {
                return LimitExceededMessageWrapper.REQUEST_SIZE_LIMIT_EXCEEDED;
            }
            else if (details.includes('item size')) {
                return LimitExceededMessageWrapper.ITEM_SIZE_LIMIT_EXCEEDED;
            }
            else if (details.includes('element size')) {
                return LimitExceededMessageWrapper.ELEMENT_SIZE_LIMIT_EXCEEDED;
            }
        }
        // If all else fails, return a generic "limit exceeded" message
        return LimitExceededMessageWrapper.UNKNOWN_LIMIT_EXCEEDED;
    }
}
exports.LimitExceededError = LimitExceededError;
/**
 * Error that occurs when trying to get a cache that doesn't exist. To resolve, make sure that the cache you are trying
 * to get exists. If it doesn't create it first and then try again
 */
class CacheNotFoundError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.CACHE_NOT_FOUND_ERROR;
        this._messageWrapper = 'A cache with the specified name does not exist.  To resolve this error, make sure you have created the cache before attempting to use it';
    }
}
exports.CacheNotFoundError = CacheNotFoundError;
/**
 * Error that occurs when trying to get a store that doesn't exist. To resolve, make sure that the store you are trying
 * to get exists. If it doesn't create it first and then try again.
 */
class StoreNotFoundError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.STORE_NOT_FOUND_ERROR;
        this._messageWrapper = 'A store with the specified name does not exist.  To resolve this error, make sure you have created the store before attempting to use it';
    }
}
exports.StoreNotFoundError = StoreNotFoundError;
/**
 * Error that occurs when trying to get an item from store that doesn't exist. To resolve, make sure that the item you are trying
 * to get exists. If it doesn't create it first and then try again.
 */
class StoreItemNotFoundError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.STORE_ITEM_NOT_FOUND_ERROR;
        this._messageWrapper = 'An item with the specified key does not exist';
    }
}
exports.StoreItemNotFoundError = StoreItemNotFoundError;
/**
 * Insufficient permissions to perform an operation on Cache Service
 */
class PermissionError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.PERMISSION_ERROR;
        this._messageWrapper = 'Insufficient permissions to perform an operation on a cache';
    }
}
exports.PermissionError = PermissionError;
/**
 * Server was unable to handle the request.
 */
class ServerUnavailableError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.SERVER_UNAVAILABLE;
        this._messageWrapper = 'The server was unable to handle the request; consider retrying.  If the error persists, please contact us at support@momentohq.com';
    }
}
exports.ServerUnavailableError = ServerUnavailableError;
/**
 * Error when an operation did not complete in time
 */
class TimeoutError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.TIMEOUT_ERROR;
        this._messageWrapper = "The client's configured timeout was exceeded; you may need to use a Configuration with more lenient timeouts";
    }
}
exports.TimeoutError = TimeoutError;
/**
 * Error raised when the underlying cause in unknown
 */
class UnknownError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.UNKNOWN_ERROR;
        this._messageWrapper = 'Unknown error has occurred';
    }
}
exports.UnknownError = UnknownError;
/**
 * Error raised when the service returns an unknown response
 */
class UnknownServiceError extends SdkError {
    constructor() {
        super(...arguments);
        this._errorCode = MomentoErrorCode.UNKNOWN_SERVICE_ERROR;
        this._messageWrapper = 'Service returned an unknown response; please contact us at support@momentohq.com';
    }
}
exports.UnknownServiceError = UnknownServiceError;
//# sourceMappingURL=data:application/json;base64,