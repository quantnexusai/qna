"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("../response-base");
const enums_1 = require("../enums");
/**
 * Indicates a Successful GetWebhookSecret request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(props) {
        super();
        this.type = enums_1.GetWebhookSecretResponse.Success;
        this._secret = props.secret;
        this._cacheName = props.cacheName;
        this._webhookName = props.webhookName;
    }
    secret() {
        return this._secret;
    }
    webhookName() {
        return this._webhookName;
    }
    cacheName() {
        return this._cacheName;
    }
    toString() {
        return super.toString() + ': ' + this._webhookName;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the GetWebhookSecret request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.GetWebhookSecretResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LXdlYmhvb2stc2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy93ZWJob29rL2dldC13ZWJob29rLXNlY3JldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxvREFBd0U7QUFDeEUsb0NBQWtEO0FBWWxEOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsbUNBQW1CO0lBTTlDLFlBQVksS0FBWTtRQUN0QixLQUFLLEVBQUUsQ0FBQztRQU5ELFNBQUksR0FDWCxnQ0FBd0IsQ0FBQyxPQUFPLENBQUM7UUFNakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVlLFFBQVE7UUFDdEIsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBNUJELDBCQTRCQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUcxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUhoQixTQUFJLEdBQ1gsZ0NBQXdCLENBQUMsS0FBSyxDQUFDO0lBR2pDLENBQUM7Q0FDRjtBQU5ELHNCQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIEJhc2VSZXNwb25zZVN1Y2Nlc3N9IGZyb20gJy4uL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtHZXRXZWJob29rU2VjcmV0UmVzcG9uc2V9IGZyb20gJy4uL2VudW1zJztcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IEdldFdlYmhvb2tTZWNyZXRSZXNwb25zZTtcbn1cblxudHlwZSBQcm9wcyA9IHtcbiAgc2VjcmV0OiBzdHJpbmc7XG4gIGNhY2hlTmFtZTogc3RyaW5nO1xuICB3ZWJob29rTmFtZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBTdWNjZXNzZnVsIEdldFdlYmhvb2tTZWNyZXQgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1Y2Nlc3MgZXh0ZW5kcyBCYXNlUmVzcG9uc2VTdWNjZXNzIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgcmVhZG9ubHkgdHlwZTogR2V0V2ViaG9va1NlY3JldFJlc3BvbnNlLlN1Y2Nlc3MgPVxuICAgIEdldFdlYmhvb2tTZWNyZXRSZXNwb25zZS5TdWNjZXNzO1xuICBwcml2YXRlIHJlYWRvbmx5IF9zZWNyZXQ6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBfd2ViaG9va05hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSByZWFkb25seSBfY2FjaGVOYW1lOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc2VjcmV0ID0gcHJvcHMuc2VjcmV0O1xuICAgIHRoaXMuX2NhY2hlTmFtZSA9IHByb3BzLmNhY2hlTmFtZTtcbiAgICB0aGlzLl93ZWJob29rTmFtZSA9IHByb3BzLndlYmhvb2tOYW1lO1xuICB9XG5cbiAgc2VjcmV0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY3JldDtcbiAgfVxuXG4gIHdlYmhvb2tOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3dlYmhvb2tOYW1lO1xuICB9XG5cbiAgY2FjaGVOYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlTmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoKSArICc6ICcgKyB0aGlzLl93ZWJob29rTmFtZTtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgR2V0V2ViaG9va1NlY3JldCByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBHZXRXZWJob29rU2VjcmV0UmVzcG9uc2UuRXJyb3IgPVxuICAgIEdldFdlYmhvb2tTZWNyZXRSZXNwb25zZS5FcnJvcjtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBTdWNjZXNzIHwgRXJyb3I7XG4iXX0=