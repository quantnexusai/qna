"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a successful list concatenate back request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(listLength) {
        super();
        this.type = enums_1.CacheListConcatenateBackResponse.Success;
        this._listLength = listLength;
    }
    /**
     * Returns the new length of the list after the concatenate operation.
     * @returns {number}
     */
    listLength() {
        return this._listLength;
    }
    toString() {
        return `${super.toString()}: listLength: ${this._listLength}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the list concatenate back request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheListConcatenateBackResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtbGlzdC1jb25jYXRlbmF0ZS1iYWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS1saXN0LWNvbmNhdGVuYXRlLWJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQXVFO0FBQ3ZFLG1DQUF5RDtBQU16RDs7R0FFRztBQUNILE1BQWEsT0FBUSxTQUFRLG1DQUFtQjtJQU05QyxZQUFZLFVBQWtCO1FBQzVCLEtBQUssRUFBRSxDQUFDO1FBTkQsU0FBSSxHQUNYLHdDQUFnQyxDQUFDLE9BQU8sQ0FBQztRQU16QyxJQUFJLENBQUMsV0FBVyxHQUFHLFVBQVUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksVUFBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRWUsUUFBUTtRQUN0QixPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hFLENBQUM7Q0FDRjtBQXRCRCwwQkFzQkM7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFDMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFHaEIsU0FBSSxHQUNYLHdDQUFnQyxDQUFDLEtBQUssQ0FBQztJQUh6QyxDQUFDO0NBSUY7QUFQRCxzQkFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2RrRXJyb3J9IGZyb20gJy4uLy4uL2Vycm9ycyc7XG5pbXBvcnQge0Jhc2VSZXNwb25zZUVycm9yLCBCYXNlUmVzcG9uc2VTdWNjZXNzfSBmcm9tICcuL3Jlc3BvbnNlLWJhc2UnO1xuaW1wb3J0IHtDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2tSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2tSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgYSBzdWNjZXNzZnVsIGxpc3QgY29uY2F0ZW5hdGUgYmFjayByZXF1ZXN0LlxuICovXG5leHBvcnQgY2xhc3MgU3VjY2VzcyBleHRlbmRzIEJhc2VSZXNwb25zZVN1Y2Nlc3MgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2tSZXNwb25zZS5TdWNjZXNzID1cbiAgICBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2tSZXNwb25zZS5TdWNjZXNzO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2xpc3RMZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihsaXN0TGVuZ3RoOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xpc3RMZW5ndGggPSBsaXN0TGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5ldyBsZW5ndGggb2YgdGhlIGxpc3QgYWZ0ZXIgdGhlIGNvbmNhdGVuYXRlIG9wZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHB1YmxpYyBsaXN0TGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2xpc3RMZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IGxpc3RMZW5ndGg6ICR7dGhpcy5fbGlzdExlbmd0aH1gO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBsaXN0IGNvbmNhdGVuYXRlIGJhY2sgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RDb25jYXRlbmF0ZUJhY2tSZXNwb25zZS5FcnJvciA9XG4gICAgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVCYWNrUmVzcG9uc2UuRXJyb3I7XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19