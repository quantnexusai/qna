import { CreateStore, DeleteStore, ListStores, StorageGet, StoragePut, StorageDelete } from '../../../index';
import { IStorageDataClient } from './IStorageDataClient';
import { IStorageClient } from '../../../clients/IStorageClient';
import { IStorageControlClient } from './IStorageControlClient';
export declare abstract class AbstractStorageClient implements IStorageClient {
    protected readonly dataClients: IStorageDataClient[];
    protected readonly controlClient: IStorageControlClient;
    private nextDataClientIndex;
    protected constructor(dataClients: IStorageDataClient[], controlClient: IStorageControlClient);
    createStore(storeName: string): Promise<CreateStore.Response>;
    listStores(): Promise<ListStores.Response>;
    deleteStore(storeName: string): Promise<DeleteStore.Response>;
    get(storeName: string, key: string): Promise<StorageGet.Response>;
    putInt(storeName: string, key: string, value: number): Promise<StoragePut.Response>;
    putDouble(storeName: string, key: string, value: number): Promise<StoragePut.Response>;
    putString(storeName: string, key: string, value: string): Promise<StoragePut.Response>;
    putBytes(storeName: string, key: string, value: Uint8Array): Promise<StoragePut.Response>;
    delete(storeName: string, key: string): Promise<StorageDelete.Response>;
    private getNextDataClient;
    abstract close(): void;
}
