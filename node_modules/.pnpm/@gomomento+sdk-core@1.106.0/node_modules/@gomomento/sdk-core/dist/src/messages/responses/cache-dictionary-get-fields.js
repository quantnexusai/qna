"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const errors_1 = require("../../errors");
const response_base_1 = require("./response-base");
const cache_dictionary_get_field_1 = require("./cache-dictionary-get-field");
const grpc_response_types_1 = require("./grpc-response-types");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(items, fields) {
        super();
        this.type = enums_1.CacheDictionaryGetFieldsResponse.Hit;
        this.responses = [];
        this.items = items;
        this.fields = fields;
        items.forEach((item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                this.responses.push(new cache_dictionary_get_field_1.Hit(item.cacheBody, fields[index]));
            }
            else if (item.result === grpc_response_types_1._ECacheResult.Miss) {
                this.responses.push(new cache_dictionary_get_field_1.Miss(fields[index]));
            }
            else {
                this.responses.push(new cache_dictionary_get_field_1.Error(new errors_1.UnknownError(item.result.toString()), fields[index]));
            }
        });
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Map<string, string>}
     */
    valueMapStringString() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc.set(TEXT_DECODER.decode(this.fields[index]), TEXT_DECODER.decode(item.cacheBody));
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, string>}
     */
    valueMap() {
        return this.valueMapStringString();
    }
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte array, and whose values
     * are byte arrays.
     * @returns {Map<string, Uint8Array>}
     */
    valueMapStringUint8Array() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc.set(TEXT_DECODER.decode(this.fields[index]), item.cacheBody);
            }
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, string>}
     */
    valueRecordStringString() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc[TEXT_DECODER.decode(this.fields[index])] = TEXT_DECODER.decode(item.cacheBody);
            }
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    valueRecord() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    value() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys are utf-8 strings, decoded from the underlying byte array, and whose
     * values are byte arrays.  This can be used in most places where an Object is desired.
     * @returns {Record<string, Uint8Array>}
     */
    valueRecordStringUint8Array() {
        return this.items.reduce((acc, item, index) => {
            if (item.result === grpc_response_types_1._ECacheResult.Hit) {
                acc[TEXT_DECODER.decode(this.fields[index])] = item.cacheBody;
            }
            return acc;
        }, {});
    }
    toString() {
        let stringRepresentation = '';
        this.valueMapStringString().forEach((value, key) => {
            const keyValue = `${key}: ${value}, `;
            stringRepresentation = stringRepresentation + keyValue;
        });
        return `${super.toString()}: valueDictionaryStringString: ${stringRepresentation.slice(0, -2)}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheDictionaryGetFieldsResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the dictionary get fields request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheDictionaryGetFieldsResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,