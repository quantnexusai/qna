import { SdkError } from '../../errors';
import { BaseResponseError, BaseResponseSuccess } from './response-base';
import { CacheKeysExistResponse } from './enums';
interface IResponse {
    exists(): boolean[] | undefined;
    readonly type: CacheKeysExistResponse;
}
/**
 * Indicates a successful keys exist request.
 */
export declare class Success extends BaseResponseSuccess implements IResponse {
    readonly type: CacheKeysExistResponse.Success;
    private readonly _keys;
    private readonly _exists;
    constructor(keys: Uint8Array[], exists: boolean[]);
    /**
     * A list of booleans indicating whether each given key was found in the cache.
     * @returns {boolean[]}
     */
    exists(): boolean[];
    /**
     * A record of key-exists pairs indicating whether each given key was found in the cache.
     * @returns {Record<string, boolean>}
     */
    valueRecord(): Record<string, boolean>;
    toString(): string;
}
/**
 * Indicates that an error occurred during the keys exist request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: CacheKeysExistResponse.Error;
    constructor(_innerException: SdkError);
    exists(): undefined;
}
export type Response = Success | Error;
export {};
