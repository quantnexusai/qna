"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const utils_1 = require("../../internal/utils");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(elements) {
        super();
        this.type = enums_1.CacheSetPopResponse.Hit;
        this.elements = elements;
    }
    /**
     * Returns the data as a Set whose values are utf-8 strings, decoded from the underlying byte arrays.  This
     * is a convenience alias for {valueSetString}.
     * @returns {Set<string>}
     */
    valueSet() {
        return this.valueSetString();
    }
    /**
     * Returns the data as a Set whose values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Set<string>}
     */
    valueSetString() {
        return new Set(this.elements.map(e => TEXT_DECODER.decode(e)));
    }
    /**
     * Returns the data as a Set whose values are byte arrays.
     * @returns {Set<Uint8Array>}
     */
    valueSetUint8Array() {
        return new Set(this.elements);
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * This is a convenience alias for {valueArrayString}.
     * @returns {string[]}
     */
    value() {
        return this.valueArrayString();
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * This is a convenience alias for {valueArrayString}.
     * @returns {string[]}
     */
    valueArray() {
        return this.valueArrayString();
    }
    /**
     * Returns the data as an Array whose values are utf-8 strings, decoded from the underlying byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * @returns {string[]}
     */
    valueArrayString() {
        return this.elements.map(e => TEXT_DECODER.decode(e));
    }
    /**
     * Returns the data as an Array whose values are byte arrays.
     * This accessor is provided because Arrays are sometimes easier to work with in TypeScript/JavaScript than Sets are.
     * @returns {Uint8Array[]}
     */
    valueArrayUint8Array() {
        return this.elements;
    }
    toString() {
        const truncatedStringArray = (0, utils_1.truncateStringArray)(Array.from(this.valueSetString()));
        return `${super.toString()}: [${truncatedStringArray.toString()}]`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheSetPopResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the set pop request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheSetPopResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtc2V0LXBvcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtc2V0LXBvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFJeUI7QUFFekIsZ0RBQXlEO0FBQ3pELG1DQUE0QztBQUU1QyxNQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBT3ZDOzs7R0FHRztBQUNILE1BQWEsR0FBSSxTQUFRLDRCQUFZO0lBSW5DLFlBQVksUUFBc0I7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFIRCxTQUFJLEdBQTRCLDJCQUFtQixDQUFDLEdBQUcsQ0FBQztRQUkvRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksY0FBYztRQUNuQixPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGtCQUFrQjtRQUN2QixPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxLQUFLO1FBQ1YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGdCQUFnQjtRQUNyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksb0JBQW9CO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRWUsUUFBUTtRQUN0QixNQUFNLG9CQUFvQixHQUFHLElBQUEsMkJBQW1CLEVBQzlDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQ2xDLENBQUM7UUFDRixPQUFPLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUM7SUFDckUsQ0FBQztDQUNGO0FBOUVELGtCQThFQztBQUVEOztHQUVHO0FBQ0gsTUFBYSxJQUFLLFNBQVEsZ0NBQWdCO0lBQTFDOztRQUNXLFNBQUksR0FBNkIsMkJBQW1CLENBQUMsSUFBSSxDQUFDO0lBSXJFLENBQUM7SUFIUSxLQUFLO1FBQ1YsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBTEQsb0JBS0M7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLEtBQU0sU0FBUSxpQ0FBaUI7SUFDMUMsWUFBWSxlQUF5QjtRQUNuQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFHaEIsU0FBSSxHQUE4QiwyQkFBbUIsQ0FBQyxLQUFLLENBQUM7SUFGckUsQ0FBQztJQUdNLEtBQUs7UUFDVixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFURCxzQkFTQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFJlc3BvbnNlQmFzZSxcbiAgQmFzZVJlc3BvbnNlTWlzcyxcbiAgQmFzZVJlc3BvbnNlRXJyb3IsXG59IGZyb20gJy4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHt0cnVuY2F0ZVN0cmluZ0FycmF5fSBmcm9tICcuLi8uLi9pbnRlcm5hbC91dGlscyc7XG5pbXBvcnQge0NhY2hlU2V0UG9wUmVzcG9uc2V9IGZyb20gJy4vZW51bXMnO1xuXG5jb25zdCBURVhUX0RFQ09ERVIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuaW50ZXJmYWNlIElSZXNwb25zZSB7XG4gIHZhbHVlKCk6IHN0cmluZ1tdIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldFBvcFJlc3BvbnNlO1xufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSByZXF1ZXN0ZWQgZGF0YSB3YXMgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBmcm9tIHRoZSBjYWNoZS4gIFByb3ZpZGVzXG4gKiBgdmFsdWUqYCBhY2Nlc3NvcnMgdG8gcmV0cmlldmUgdGhlIGRhdGEgaW4gdGhlIGFwcHJvcHJpYXRlIGZvcm1hdC5cbiAqL1xuZXhwb3J0IGNsYXNzIEhpdCBleHRlbmRzIFJlc3BvbnNlQmFzZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudHM6IFVpbnQ4QXJyYXlbXTtcbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVTZXRQb3BSZXNwb25zZS5IaXQgPSBDYWNoZVNldFBvcFJlc3BvbnNlLkhpdDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50czogVWludDhBcnJheVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhIFNldCB3aG9zZSB2YWx1ZXMgYXJlIHV0Zi04IHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5cy4gIFRoaXNcbiAgICogaXMgYSBjb252ZW5pZW5jZSBhbGlhcyBmb3Ige3ZhbHVlU2V0U3RyaW5nfS5cbiAgICogQHJldHVybnMge1NldDxzdHJpbmc+fVxuICAgKi9cbiAgcHVibGljIHZhbHVlU2V0KCk6IFNldDxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVNldFN0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgYXMgYSBTZXQgd2hvc2UgdmFsdWVzIGFyZSB1dGYtOCBzdHJpbmdzLCBkZWNvZGVkIGZyb20gdGhlIHVuZGVybHlpbmcgYnl0ZSBhcnJheXMuXG4gICAqIEByZXR1cm5zIHtTZXQ8c3RyaW5nPn1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZVNldFN0cmluZygpOiBTZXQ8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBTZXQodGhpcy5lbGVtZW50cy5tYXAoZSA9PiBURVhUX0RFQ09ERVIuZGVjb2RlKGUpKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhIFNldCB3aG9zZSB2YWx1ZXMgYXJlIGJ5dGUgYXJyYXlzLlxuICAgKiBAcmV0dXJucyB7U2V0PFVpbnQ4QXJyYXk+fVxuICAgKi9cbiAgcHVibGljIHZhbHVlU2V0VWludDhBcnJheSgpOiBTZXQ8VWludDhBcnJheT4ge1xuICAgIHJldHVybiBuZXcgU2V0KHRoaXMuZWxlbWVudHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgYXMgYW4gQXJyYXkgd2hvc2UgdmFsdWVzIGFyZSB1dGYtOCBzdHJpbmdzLCBkZWNvZGVkIGZyb20gdGhlIHVuZGVybHlpbmcgYnl0ZSBhcnJheXMuXG4gICAqIFRoaXMgYWNjZXNzb3IgaXMgcHJvdmlkZWQgYmVjYXVzZSBBcnJheXMgYXJlIHNvbWV0aW1lcyBlYXNpZXIgdG8gd29yayB3aXRoIGluIFR5cGVTY3JpcHQvSmF2YVNjcmlwdCB0aGFuIFNldHMgYXJlLlxuICAgKiBUaGlzIGlzIGEgY29udmVuaWVuY2UgYWxpYXMgZm9yIHt2YWx1ZUFycmF5U3RyaW5nfS5cbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKi9cbiAgcHVibGljIHZhbHVlKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZUFycmF5U3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhbiBBcnJheSB3aG9zZSB2YWx1ZXMgYXJlIHV0Zi04IHN0cmluZ3MsIGRlY29kZWQgZnJvbSB0aGUgdW5kZXJseWluZyBieXRlIGFycmF5cy5cbiAgICogVGhpcyBhY2Nlc3NvciBpcyBwcm92aWRlZCBiZWNhdXNlIEFycmF5cyBhcmUgc29tZXRpbWVzIGVhc2llciB0byB3b3JrIHdpdGggaW4gVHlwZVNjcmlwdC9KYXZhU2NyaXB0IHRoYW4gU2V0cyBhcmUuXG4gICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBhbGlhcyBmb3Ige3ZhbHVlQXJyYXlTdHJpbmd9LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBwdWJsaWMgdmFsdWVBcnJheSgpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVBcnJheVN0cmluZygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgYXMgYW4gQXJyYXkgd2hvc2UgdmFsdWVzIGFyZSB1dGYtOCBzdHJpbmdzLCBkZWNvZGVkIGZyb20gdGhlIHVuZGVybHlpbmcgYnl0ZSBhcnJheXMuXG4gICAqIFRoaXMgYWNjZXNzb3IgaXMgcHJvdmlkZWQgYmVjYXVzZSBBcnJheXMgYXJlIHNvbWV0aW1lcyBlYXNpZXIgdG8gd29yayB3aXRoIGluIFR5cGVTY3JpcHQvSmF2YVNjcmlwdCB0aGFuIFNldHMgYXJlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBwdWJsaWMgdmFsdWVBcnJheVN0cmluZygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMubWFwKGUgPT4gVEVYVF9ERUNPREVSLmRlY29kZShlKSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGF0YSBhcyBhbiBBcnJheSB3aG9zZSB2YWx1ZXMgYXJlIGJ5dGUgYXJyYXlzLlxuICAgKiBUaGlzIGFjY2Vzc29yIGlzIHByb3ZpZGVkIGJlY2F1c2UgQXJyYXlzIGFyZSBzb21ldGltZXMgZWFzaWVyIHRvIHdvcmsgd2l0aCBpbiBUeXBlU2NyaXB0L0phdmFTY3JpcHQgdGhhbiBTZXRzIGFyZS5cbiAgICogQHJldHVybnMge1VpbnQ4QXJyYXlbXX1cbiAgICovXG4gIHB1YmxpYyB2YWx1ZUFycmF5VWludDhBcnJheSgpOiBVaW50OEFycmF5W10ge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgY29uc3QgdHJ1bmNhdGVkU3RyaW5nQXJyYXkgPSB0cnVuY2F0ZVN0cmluZ0FycmF5KFxuICAgICAgQXJyYXkuZnJvbSh0aGlzLnZhbHVlU2V0U3RyaW5nKCkpXG4gICAgKTtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IFske3RydW5jYXRlZFN0cmluZ0FycmF5LnRvU3RyaW5nKCl9XWA7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgcmVxdWVzdGVkIGRhdGEgd2FzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGNhY2hlLlxuICovXG5leHBvcnQgY2xhc3MgTWlzcyBleHRlbmRzIEJhc2VSZXNwb25zZU1pc3Mge1xuICByZWFkb25seSB0eXBlOiBDYWNoZVNldFBvcFJlc3BvbnNlLk1pc3MgPSBDYWNoZVNldFBvcFJlc3BvbnNlLk1pc3M7XG4gIHB1YmxpYyB2YWx1ZSgpOiB1bmRlZmluZWQge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgdGhlIHNldCBwb3AgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICogLSBgaW5uZXJFeGNlcHRpb24oKWAgLSB0aGUgb3JpZ2luYWwgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIGZhaWx1cmU7IGNhbiBiZSByZS10aHJvd24uXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvciBleHRlbmRzIEJhc2VSZXNwb25zZUVycm9yIGltcGxlbWVudHMgSVJlc3BvbnNlIHtcbiAgY29uc3RydWN0b3IoX2lubmVyRXhjZXB0aW9uOiBTZGtFcnJvcikge1xuICAgIHN1cGVyKF9pbm5lckV4Y2VwdGlvbik7XG4gIH1cblxuICByZWFkb25seSB0eXBlOiBDYWNoZVNldFBvcFJlc3BvbnNlLkVycm9yID0gQ2FjaGVTZXRQb3BSZXNwb25zZS5FcnJvcjtcbiAgcHVibGljIHZhbHVlKCk6IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IEhpdCB8IE1pc3MgfCBFcnJvcjtcbiJdfQ==