"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a successful list concatenate front request.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(listLength) {
        super();
        this.type = enums_1.CacheListConcatenateFrontResponse.Success;
        this._listLength = listLength;
    }
    /**
     * Returns the new length of the list after the concatenate operation.
     * @returns {number}
     */
    listLength() {
        return this._listLength;
    }
    toString() {
        return `${super.toString()}: listLength: ${this._listLength}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the list concatenate front request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheListConcatenateFrontResponse.Error;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtbGlzdC1jb25jYXRlbmF0ZS1mcm9udC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tZXNzYWdlcy9yZXNwb25zZXMvY2FjaGUtbGlzdC1jb25jYXRlbmF0ZS1mcm9udC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtREFBdUU7QUFDdkUsbUNBQTBEO0FBTTFEOztHQUVHO0FBQ0gsTUFBYSxPQUFRLFNBQVEsbUNBQW1CO0lBTTlDLFlBQVksVUFBa0I7UUFDNUIsS0FBSyxFQUFFLENBQUM7UUFORCxTQUFJLEdBQ1gseUNBQWlDLENBQUMsT0FBTyxDQUFDO1FBTTFDLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSSxVQUFVO1FBQ2YsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFZSxRQUFRO1FBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLGlCQUFpQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEUsQ0FBQztDQUNGO0FBdEJELDBCQXNCQztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQWEsS0FBTSxTQUFRLGlDQUFpQjtJQUMxQyxZQUFZLGVBQXlCO1FBQ25DLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUdoQixTQUFJLEdBQ1gseUNBQWlDLENBQUMsS0FBSyxDQUFDO0lBSDFDLENBQUM7Q0FJRjtBQVBELHNCQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTZGtFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7QmFzZVJlc3BvbnNlRXJyb3IsIEJhc2VSZXNwb25zZVN1Y2Nlc3N9IGZyb20gJy4vcmVzcG9uc2UtYmFzZSc7XG5pbXBvcnQge0NhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnRSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250UmVzcG9uc2U7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIGEgc3VjY2Vzc2Z1bCBsaXN0IGNvbmNhdGVuYXRlIGZyb250IHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBTdWNjZXNzIGV4dGVuZHMgQmFzZVJlc3BvbnNlU3VjY2VzcyBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnRSZXNwb25zZS5TdWNjZXNzID1cbiAgICBDYWNoZUxpc3RDb25jYXRlbmF0ZUZyb250UmVzcG9uc2UuU3VjY2VzcztcblxuICBwcml2YXRlIHJlYWRvbmx5IF9saXN0TGVuZ3RoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IobGlzdExlbmd0aDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9saXN0TGVuZ3RoID0gbGlzdExlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuZXcgbGVuZ3RoIG9mIHRoZSBsaXN0IGFmdGVyIHRoZSBjb25jYXRlbmF0ZSBvcGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBwdWJsaWMgbGlzdExlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9saXN0TGVuZ3RoO1xuICB9XG5cbiAgcHVibGljIG92ZXJyaWRlIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3N1cGVyLnRvU3RyaW5nKCl9OiBsaXN0TGVuZ3RoOiAke3RoaXMuX2xpc3RMZW5ndGh9YDtcbiAgfVxufVxuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgbGlzdCBjb25jYXRlbmF0ZSBmcm9udCByZXF1ZXN0LlxuICpcbiAqIFRoaXMgcmVzcG9uc2Ugb2JqZWN0IGluY2x1ZGVzIHRoZSBmb2xsb3dpbmcgZmllbGRzIHRoYXQgeW91IGNhbiB1c2UgdG8gZGV0ZXJtaW5lXG4gKiBob3cgeW91IHdvdWxkIGxpa2UgdG8gaGFuZGxlIHRoZSBlcnJvcjpcbiAqXG4gKiAtIGBlcnJvckNvZGUoKWAgLSBhIHVuaXF1ZSBNb21lbnRvIGVycm9yIGNvZGUgaW5kaWNhdGluZyB0aGUgdHlwZSBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuICogLSBgbWVzc2FnZSgpYCAtIGEgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yXG4gKiAtIGBpbm5lckV4Y2VwdGlvbigpYCAtIHRoZSBvcmlnaW5hbCBlcnJvciB0aGF0IGNhdXNlZCB0aGUgZmFpbHVyZTsgY2FuIGJlIHJlLXRocm93bi5cbiAqL1xuZXhwb3J0IGNsYXNzIEVycm9yIGV4dGVuZHMgQmFzZVJlc3BvbnNlRXJyb3IgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihfaW5uZXJFeGNlcHRpb246IFNka0Vycm9yKSB7XG4gICAgc3VwZXIoX2lubmVyRXhjZXB0aW9uKTtcbiAgfVxuXG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlTGlzdENvbmNhdGVuYXRlRnJvbnRSZXNwb25zZS5FcnJvciA9XG4gICAgQ2FjaGVMaXN0Q29uY2F0ZW5hdGVGcm9udFJlc3BvbnNlLkVycm9yO1xufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZSA9IFN1Y2Nlc3MgfCBFcnJvcjtcbiJdfQ==