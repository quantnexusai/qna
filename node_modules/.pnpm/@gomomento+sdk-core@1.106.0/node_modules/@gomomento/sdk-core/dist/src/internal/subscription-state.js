"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionState = void 0;
/**
 * Encapsulates a topic subscription stream state.
 */
class SubscriptionState {
    constructor() {
        this._unsubscribeFn = () => {
            return;
        };
        this._isSubscribed = false;
    }
    get resumeAtTopicSequenceNumber() {
        var _a;
        return ((_a = this.lastTopicSequenceNumber) !== null && _a !== void 0 ? _a : -1) + 1;
    }
    get resumeAtTopicSequencePage() {
        var _a;
        return (_a = this.lastTopicSequencePage) !== null && _a !== void 0 ? _a : 0;
    }
    setSubscribed() {
        this._isSubscribed = true;
    }
    setUnsubscribed() {
        this._isSubscribed = false;
    }
    get isSubscribed() {
        return this._isSubscribed;
    }
    set unsubscribeFn(unsubscribeFn) {
        this._unsubscribeFn = unsubscribeFn;
    }
    unsubscribe() {
        if (this.isSubscribed) {
            this._unsubscribeFn();
            this.setUnsubscribed();
        }
    }
    toString() {
        return JSON.stringify({
            lastTopicSequenceNumber: this.lastTopicSequenceNumber,
            lastTopicSequencePage: this.lastTopicSequencePage,
            isSubscribed: this._isSubscribed,
        }, null, 2);
    }
}
exports.SubscriptionState = SubscriptionState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Vic2NyaXB0aW9uLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ludGVybmFsL3N1YnNjcmlwdGlvbi1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7R0FFRztBQUNILE1BQWEsaUJBQWlCO0lBSzVCO1FBQ0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLEVBQUU7WUFDekIsT0FBTztRQUNULENBQUMsQ0FBQztRQUNGLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLDJCQUEyQjs7UUFDcEMsT0FBTyxDQUFDLE1BQUEsSUFBSSxDQUFDLHVCQUF1QixtQ0FBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBVyx5QkFBeUI7O1FBQ2xDLE9BQU8sTUFBQSxJQUFJLENBQUMscUJBQXFCLG1DQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sYUFBYTtRQUNsQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDO0lBRU0sZUFBZTtRQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBVyxhQUFhLENBQUMsYUFBeUI7UUFDaEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDbkI7WUFDRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1lBQ3JELHFCQUFxQixFQUFFLElBQUksQ0FBQyxxQkFBcUI7WUFDakQsWUFBWSxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQ2pDLEVBQ0QsSUFBSSxFQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBdERELDhDQXNEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRW5jYXBzdWxhdGVzIGEgdG9waWMgc3Vic2NyaXB0aW9uIHN0cmVhbSBzdGF0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvblN0YXRlIHtcbiAgcHJpdmF0ZSBfdW5zdWJzY3JpYmVGbjogKCkgPT4gdm9pZDtcbiAgcHVibGljIGxhc3RUb3BpY1NlcXVlbmNlTnVtYmVyPzogbnVtYmVyO1xuICBwdWJsaWMgbGFzdFRvcGljU2VxdWVuY2VQYWdlPzogbnVtYmVyO1xuICBwcml2YXRlIF9pc1N1YnNjcmliZWQ6IGJvb2xlYW47XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Vuc3Vic2NyaWJlRm4gPSAoKSA9PiB7XG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgICB0aGlzLl9pc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcmVzdW1lQXRUb3BpY1NlcXVlbmNlTnVtYmVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLmxhc3RUb3BpY1NlcXVlbmNlTnVtYmVyID8/IC0xKSArIDE7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlc3VtZUF0VG9waWNTZXF1ZW5jZVBhZ2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5sYXN0VG9waWNTZXF1ZW5jZVBhZ2UgPz8gMDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTdWJzY3JpYmVkKCk6IHZvaWQge1xuICAgIHRoaXMuX2lzU3Vic2NyaWJlZCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgc2V0VW5zdWJzY3JpYmVkKCk6IHZvaWQge1xuICAgIHRoaXMuX2lzU3Vic2NyaWJlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldCBpc1N1YnNjcmliZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3Vic2NyaWJlZDtcbiAgfVxuXG4gIHB1YmxpYyBzZXQgdW5zdWJzY3JpYmVGbih1bnN1YnNjcmliZUZuOiAoKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5fdW5zdWJzY3JpYmVGbiA9IHVuc3Vic2NyaWJlRm47XG4gIH1cblxuICBwdWJsaWMgdW5zdWJzY3JpYmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNTdWJzY3JpYmVkKSB7XG4gICAgICB0aGlzLl91bnN1YnNjcmliZUZuKCk7XG4gICAgICB0aGlzLnNldFVuc3Vic2NyaWJlZCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICAgIHtcbiAgICAgICAgbGFzdFRvcGljU2VxdWVuY2VOdW1iZXI6IHRoaXMubGFzdFRvcGljU2VxdWVuY2VOdW1iZXIsXG4gICAgICAgIGxhc3RUb3BpY1NlcXVlbmNlUGFnZTogdGhpcy5sYXN0VG9waWNTZXF1ZW5jZVBhZ2UsXG4gICAgICAgIGlzU3Vic2NyaWJlZDogdGhpcy5faXNTdWJzY3JpYmVkLFxuICAgICAgfSxcbiAgICAgIG51bGwsXG4gICAgICAyXG4gICAgKTtcbiAgfVxufVxuIl19