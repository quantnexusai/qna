"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Miss = exports.Hit = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
const TEXT_DECODER = new TextDecoder();
/**
 * Indicates that the requested data was successfully retrieved from the cache.  Provides
 * `value*` accessors to retrieve the data in the appropriate format.
 */
class Hit extends response_base_1.ResponseBase {
    constructor(items) {
        super();
        this._displayListSizeLimit = 5;
        this.type = enums_1.CacheDictionaryFetchResponse.Hit;
        this.items = items;
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This is a convenience alias for {valueMapStringString}.
     * @returns {Map<string, string>}
     */
    valueMap() {
        return this.valueMapStringString();
    }
    /**
     * Returns the data as a Map whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * @returns {Map<string, string>}
     */
    valueMapStringString() {
        return this.items.reduce((acc, item) => {
            acc.set(TEXT_DECODER.decode(item.field), TEXT_DECODER.decode(item.value));
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Map whose keys are utf-8 strings, decoded from the underlying byte array, and whose values
     * are byte arrays.
     * @returns {Map<string, Uint8Array>}
     */
    valueMapStringUint8Array() {
        return this.items.reduce((acc, item) => {
            acc.set(TEXT_DECODER.decode(item.field), item.value);
            return acc;
        }, new Map());
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    value() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.  This is a convenience alias for
     * {valueRecordStringString}.
     * @returns {Record<string, string>}
     */
    valueRecord() {
        return this.valueRecordStringString();
    }
    /**
     * Returns the data as a Record whose keys and values are utf-8 strings, decoded from the underlying byte arrays.
     * This can be used in most places where an Object is desired.
     * @returns {Record<string, string>}
     */
    valueRecordStringString() {
        return this.items.reduce((acc, item) => {
            acc[TEXT_DECODER.decode(item.field)] = TEXT_DECODER.decode(item.value);
            return acc;
        }, {});
    }
    /**
     * Returns the data as a Record whose keys are utf-8 strings, decoded from the underlying byte array, and whose
     * values are byte arrays.  This can be used in most places where an Object is desired.
     * @returns {Record<string, Uint8Array>}
     */
    valueRecordStringUint8Array() {
        return this.items.reduce((acc, item) => {
            acc[TEXT_DECODER.decode(item.field)] = item.value;
            return acc;
        }, {});
    }
    truncateValueStrings() {
        const keyValueIterable = this.valueMapStringString().entries();
        const keyValueArray = Array.from(keyValueIterable);
        if (keyValueArray.length <= this._displayListSizeLimit) {
            const pairs = [];
            keyValueArray.forEach(pair => {
                pairs.push(`${pair[0]}: ${pair[1]}`);
            });
            return pairs.join(',');
        }
        else {
            const slicedArray = keyValueArray.slice(0, this._displayListSizeLimit);
            const pairs = [];
            slicedArray.forEach(pair => {
                pairs.push(`${pair[0]}: ${pair[1]}`);
            });
            return pairs.join(',');
        }
    }
    toString() {
        return `${super.toString()}: valueDictionaryStringString: ${this.truncateValueStrings()}`;
    }
}
exports.Hit = Hit;
/**
 * Indicates that the requested data was not available in the cache.
 */
class Miss extends response_base_1.BaseResponseMiss {
    constructor() {
        super(...arguments);
        this.type = enums_1.CacheDictionaryFetchResponse.Miss;
    }
    value() {
        return undefined;
    }
}
exports.Miss = Miss;
/**
 * Indicates that an error occurred during the dictionary fetch request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheDictionaryFetchResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,