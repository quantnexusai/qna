"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Error = exports.Success = void 0;
const response_base_1 = require("./response-base");
const enums_1 = require("./enums");
/**
 * Indicates a successful cache increment request.
 * Provides `value*` accessors to retrieve the updated value in the appropriate format.
 */
class Success extends response_base_1.BaseResponseSuccess {
    constructor(body) {
        super();
        this.type = enums_1.CacheIncrementResponse.Success;
        this.body = body;
    }
    /**
     * Returns the updated value as a number.
     * @returns number
     */
    value() {
        return this.body;
    }
    /**
     * Returns the updated value as a number.
     * @returns number
     */
    valueNumber() {
        return this.body;
    }
    toString() {
        return `${super.toString()}: value: ${this.value()}`;
    }
}
exports.Success = Success;
/**
 * Indicates that an error occurred during the increment request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error.
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
class Error extends response_base_1.BaseResponseError {
    constructor(_innerException) {
        super(_innerException);
        this.type = enums_1.CacheIncrementResponse.Error;
    }
    value() {
        return undefined;
    }
}
exports.Error = Error;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtaW5jcmVtZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21lc3NhZ2VzL3Jlc3BvbnNlcy9jYWNoZS1pbmNyZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQXVFO0FBQ3ZFLG1DQUErQztBQU8vQzs7O0dBR0c7QUFDSCxNQUFhLE9BQVEsU0FBUSxtQ0FBbUI7SUFLOUMsWUFBWSxJQUFZO1FBQ3RCLEtBQUssRUFBRSxDQUFDO1FBTEQsU0FBSSxHQUNYLDhCQUFzQixDQUFDLE9BQU8sQ0FBQztRQUsvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksS0FBSztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVlLFFBQVE7UUFDdEIsT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztJQUN2RCxDQUFDO0NBQ0Y7QUE3QkQsMEJBNkJDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsaUNBQWlCO0lBQzFDLFlBQVksZUFBeUI7UUFDbkMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBR2hCLFNBQUksR0FBaUMsOEJBQXNCLENBQUMsS0FBSyxDQUFDO0lBRjNFLENBQUM7SUFJRCxLQUFLO1FBQ0gsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGO0FBVkQsc0JBVUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Nka0Vycm9yfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0IHtCYXNlUmVzcG9uc2VFcnJvciwgQmFzZVJlc3BvbnNlU3VjY2Vzc30gZnJvbSAnLi9yZXNwb25zZS1iYXNlJztcbmltcG9ydCB7Q2FjaGVJbmNyZW1lbnRSZXNwb25zZX0gZnJvbSAnLi9lbnVtcyc7XG5cbmludGVyZmFjZSBJUmVzcG9uc2Uge1xuICB2YWx1ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHR5cGU6IENhY2hlSW5jcmVtZW50UmVzcG9uc2U7XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIGEgc3VjY2Vzc2Z1bCBjYWNoZSBpbmNyZW1lbnQgcmVxdWVzdC5cbiAqIFByb3ZpZGVzIGB2YWx1ZSpgIGFjY2Vzc29ycyB0byByZXRyaWV2ZSB0aGUgdXBkYXRlZCB2YWx1ZSBpbiB0aGUgYXBwcm9wcmlhdGUgZm9ybWF0LlxuICovXG5leHBvcnQgY2xhc3MgU3VjY2VzcyBleHRlbmRzIEJhc2VSZXNwb25zZVN1Y2Nlc3MgaW1wbGVtZW50cyBJUmVzcG9uc2Uge1xuICByZWFkb25seSB0eXBlOiBDYWNoZUluY3JlbWVudFJlc3BvbnNlLlN1Y2Nlc3MgPVxuICAgIENhY2hlSW5jcmVtZW50UmVzcG9uc2UuU3VjY2VzcztcbiAgcHJpdmF0ZSByZWFkb25seSBib2R5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoYm9keTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHVwZGF0ZWQgdmFsdWUgYXMgYSBudW1iZXIuXG4gICAqIEByZXR1cm5zIG51bWJlclxuICAgKi9cbiAgcHVibGljIHZhbHVlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB1cGRhdGVkIHZhbHVlIGFzIGEgbnVtYmVyLlxuICAgKiBAcmV0dXJucyBudW1iZXJcbiAgICovXG4gIHB1YmxpYyB2YWx1ZU51bWJlcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmJvZHk7XG4gIH1cblxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7c3VwZXIudG9TdHJpbmcoKX06IHZhbHVlOiAke3RoaXMudmFsdWUoKX1gO1xuICB9XG59XG5cbi8qKlxuICogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHRoZSBpbmNyZW1lbnQgcmVxdWVzdC5cbiAqXG4gKiBUaGlzIHJlc3BvbnNlIG9iamVjdCBpbmNsdWRlcyB0aGUgZm9sbG93aW5nIGZpZWxkcyB0aGF0IHlvdSBjYW4gdXNlIHRvIGRldGVybWluZVxuICogaG93IHlvdSB3b3VsZCBsaWtlIHRvIGhhbmRsZSB0aGUgZXJyb3I6XG4gKlxuICogLSBgZXJyb3JDb2RlKClgIC0gYSB1bmlxdWUgTW9tZW50byBlcnJvciBjb2RlIGluZGljYXRpbmcgdGhlIHR5cGUgb2YgZXJyb3IgdGhhdCBvY2N1cnJlZC5cbiAqIC0gYG1lc3NhZ2UoKWAgLSBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci5cbiAqIC0gYGlubmVyRXhjZXB0aW9uKClgIC0gdGhlIG9yaWdpbmFsIGVycm9yIHRoYXQgY2F1c2VkIHRoZSBmYWlsdXJlOyBjYW4gYmUgcmUtdGhyb3duLlxuICovXG5leHBvcnQgY2xhc3MgRXJyb3IgZXh0ZW5kcyBCYXNlUmVzcG9uc2VFcnJvciBpbXBsZW1lbnRzIElSZXNwb25zZSB7XG4gIGNvbnN0cnVjdG9yKF9pbm5lckV4Y2VwdGlvbjogU2RrRXJyb3IpIHtcbiAgICBzdXBlcihfaW5uZXJFeGNlcHRpb24pO1xuICB9XG5cbiAgcmVhZG9ubHkgdHlwZTogQ2FjaGVJbmNyZW1lbnRSZXNwb25zZS5FcnJvciA9IENhY2hlSW5jcmVtZW50UmVzcG9uc2UuRXJyb3I7XG5cbiAgdmFsdWUoKTogdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlID0gU3VjY2VzcyB8IEVycm9yO1xuIl19