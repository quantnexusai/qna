import { SdkError } from '../../errors';
import { BaseResponseError, BaseResponseMiss, ResponseBase } from './response-base';
import { CacheSetContainsElementsResponse } from './enums';
interface IResponse {
    /**
     * Returns a mapping of the elements to their presence in the cache.
     * @returns {Record<string, boolean> | undefined} A mapping of the elements to their presence in the cache.
     * If the set itself was not found, (ie the response was a `Miss` or `Error`), this method returns `undefined`.
     */
    containsElements(): Record<string, boolean> | undefined;
    readonly type: CacheSetContainsElementsResponse;
}
/**
 * Indicates that the requested set was in the cache.  Provides
 * a `containsElements` accessor that returns a mapping of the elements of the set
 * to their presence in the cache.
 */
export declare class Hit extends ResponseBase implements IResponse {
    private readonly _contains;
    readonly type: CacheSetContainsElementsResponse.Hit;
    constructor(elements: Uint8Array[], found: boolean[]);
    /**
     * Returns a mapping of the elements to their presence in the cache.
     * @returns {Record<string, boolean>}
     */
    containsElements(): Record<string, boolean>;
    toString(): string;
}
/**
 * Indicates that the requested set was not in the cache.
 */
export declare class Miss extends BaseResponseMiss implements IResponse {
    readonly type: CacheSetContainsElementsResponse.Miss;
    constructor();
    containsElements(): Record<string, boolean> | undefined;
}
/**
 * Indicates that an error occurred during the set contains element request.
 *
 * This response object includes the following fields that you can use to determine
 * how you would like to handle the error:
 *
 * - `errorCode()` - a unique Momento error code indicating the type of error that occurred.
 * - `message()` - a human-readable description of the error
 * - `innerException()` - the original error that caused the failure; can be re-thrown.
 */
export declare class Error extends BaseResponseError implements IResponse {
    readonly type: CacheSetContainsElementsResponse.Error;
    constructor(_innerException: SdkError);
    containsElements(): Record<string, boolean> | undefined;
}
export type Response = Hit | Miss | Error;
export {};
