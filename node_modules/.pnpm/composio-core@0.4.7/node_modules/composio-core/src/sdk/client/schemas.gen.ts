// This file is auto-generated by @hey-api/openapi-ts

export const $MemberInfoResDTO = {
  properties: {
    id: {
      type: "string",
    },
    projectId: {
      type: "string",
    },
    email: {
      format: "email",
      type: "string",
    },
    name: {
      type: "string",
    },
    role: {
      type: "string",
    },
    metadata: {},
    createdAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    updatedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    deletedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
  },
  type: "object",
  required: [
    "id",
    "projectId",
    "email",
    "name",
    "role",
    "createdAt",
    "updatedAt",
  ],
  description: "Member information",
} as const;

export const $MagicLinkResDTO = {
  properties: {
    status: {
      type: "string",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $MagicLinkReqDTO = {
  properties: {
    email: {
      format: "email",
      type: "string",
      description: "The email of the user",
    },
    verifyHost: {
      type: "string",
      description: "The frontend host of the user",
    },
  },
  type: "object",
  required: ["email", "verifyHost"],
} as const;

export const $LogoutResDTO = {
  properties: {
    message: {
      type: "string",
      description: "Message confirming the logout",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $VerifyMagicLinkReqDTO = {
  properties: {
    token: {
      type: "string",
      description: "The magic link token",
    },
  },
  type: "object",
  required: ["token"],
} as const;

export const $VerifyMagicLinkDataDTO = {
  properties: {
    clientId: {
      type: "string",
    },
    isValid: {
      type: "boolean",
    },
    jwtToken: {
      type: "string",
    },
    email: {
      type: "string",
      format: "email",
    },
  },
  type: "object",
  required: ["clientId", "isValid", "jwtToken", "email"],
  description:
    "Data containing client and token information if verification is successful",
} as const;

export const $VerifyMagicLinkResDTO = {
  properties: {
    message: {
      type: "string",
      description: "Message indicating the result of the verification",
    },
    data: {
      $ref: "#/components/schemas/VerifyMagicLinkDataDTO",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $IdentifyClientReqDTO = {
  properties: {
    hash: {
      type: "string",
      description: "The hash of the client",
    },
    framework: {
      type: "string",
      description: "The framework used by the client",
    },
  },
  type: "object",
  required: ["hash"],
} as const;

export const $IdentifyClientResDTO = {
  properties: {
    clientId: {
      type: "string",
      description: "The client ID",
    },
    apiKey: {
      type: "string",
      description: "The API key associated with the client",
    },
    email: {
      type: "string",
      description: "The email associated with the client",
    },
    orgId: {
      type: "string",
      description: "The organization ID associated with the client",
    },
  },
  type: "object",
  required: ["clientId", "apiKey", "email", "orgId"],
} as const;

export const $UserGitUserInfo = {
  properties: {
    name: {
      type: "string",
    },
    email: {
      format: "email",
      type: "string",
    },
  },
  type: "object",
  required: ["email"],
  description: "User Git information",
} as const;

export const $TrackClientReqDTO = {
  properties: {
    framework: {
      type: "string",
      description: "The framework used by the client",
    },
    mac_address: {
      type: "string",
      description: "The MAC address of the client device",
    },
    user_git_user_info: {
      $ref: "#/components/schemas/UserGitUserInfo",
    },
  },
  type: "object",
  required: ["framework"],
} as const;

export const $TrackClientResDTO = {
  properties: {
    message: {
      type: "string",
      description: "Message indicating the result of the tracking operation",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $DeleteRowAPIDTO = {
  properties: {
    status: {
      type: "string",
      description: "Status of the delete operation",
    },
    count: {
      type: "number",
      description: "Number of records deleted",
    },
  },
  type: "object",
  required: ["status", "count"],
} as const;

export const $ClientDTO = {
  properties: {
    autoId: {
      type: "number",
      description: "Auto-generated ID of the client",
    },
    id: {
      type: "string",
      description: "Unique ID of the client",
    },
    name: {
      type: "string",
      description: "Name of the client",
    },
    email: {
      type: "string",
      description: "Email of the client",
    },
    createdAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
      description: "Creation timestamp",
    },
    updatedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
      description: "Last update timestamp",
    },
    apiKey: {
      type: "string",
      description: "API key for the client",
    },
    webhookURL: {
      type: "string",
      description: "Webhook URL for the client",
    },
    eventWebhookURL: {
      type: "string",
      description: "Event webhook URL for the client",
    },
    webhookSecret: {
      type: "string",
      description: "Secret for webhook authentication",
    },
    triggersEnabled: {
      type: "boolean",
      description: "Whether triggers are enabled for the client",
    },
    lastSubscribedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
      description: "Last subscription timestamp",
    },
    plan: {
      type: "string",
      description: "Client's subscription plan",
    },
  },
  type: "object",
  required: [
    "autoId",
    "id",
    "name",
    "email",
    "createdAt",
    "updatedAt",
    "triggersEnabled",
    "plan",
  ],
  description: "Client information",
} as const;

export const $ClientInfoResDTO = {
  properties: {
    client: {
      $ref: "#/components/schemas/ClientDTO",
    },
    apiKey: {
      type: "string",
      description: "API key of the client",
    },
  },
  type: "object",
  required: ["client", "apiKey"],
} as const;

export const $ProjectReqDTO = {
  properties: {
    name: {
      type: "string",
      description: "The name of the project",
    },
  },
  type: "object",
  required: ["name"],
} as const;

export const $ProjectResDTO = {
  properties: {
    id: {
      type: "string",
      description: "The ID of the project",
    },
    name: {
      type: "string",
      description: "The name of the project",
    },
  },
  type: "object",
  required: ["id", "name"],
} as const;

export const $ProjectListResDTO = {
  properties: {
    items: {
      items: {
        type: "object",
      },
      type: "array",
      description: "The list of projects",
    },
  },
  type: "object",
  required: ["items"],
} as const;

export const $InviteMemberReqDTO = {
  properties: {
    email: {
      format: "email",
      type: "string",
      description: "The email of the member",
    },
    name: {
      type: "string",
      description: "The name of the member",
    },
    verifyHost: {
      type: "string",
      description: "The host to verify the member",
    },
    role: {
      enum: ["admin", "developer"],
      type: "string",
      description: "The role that will be assignied to the invited user",
    },
  },
  type: "object",
  required: ["email", "name", "verifyHost"],
} as const;

export const $MemberResDTO = {
  properties: {
    email: {
      type: "string",
      description: "The email of the member",
    },
    id: {
      type: "string",
      description: "The uuid identifier for the member",
    },
    name: {
      type: "string",
      description: "The name of the member",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The creation date of the member record",
    },
    role: {
      enum: ["admin", "developer"],
      type: "string",
      description: "The role that is assigned to the member",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The last update date of the member record",
    },
  },
  type: "object",
  required: ["email", "id", "name", "role"],
} as const;

export const $UpdateMemberReqDTO = {
  properties: {
    memberId: {
      type: "string",
      description: "The uuid identifier for the member",
    },
    role: {
      enum: ["admin", "developer"],
      type: "string",
      description: "The role that is assigned to the member",
    },
  },
  type: "object",
  required: ["memberId", "role"],
} as const;

export const $GenerateAPIKeyReqDTO = {
  properties: {
    name: {
      type: "string",
      description: "The name of the API key to be generated",
    },
  },
  type: "object",
  required: ["name"],
} as const;

export const $APIKeyResDTO = {
  properties: {
    id: {
      type: "string",
      description: "The ID of the API key",
    },
    name: {
      type: "string",
      description: "The name of the API key",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The creation date of the API key",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The last update date of the API key",
    },
    key: {
      type: "string",
      description: "The generated API key",
    },
    isHidden: {
      type: "boolean",
      description: "Whether the API key is hidden",
    },
    lastUsed: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The last used date of the API key",
    },
    member: {
      type: "object",
      description: "The member of the API key",
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "createdAt",
    "updatedAt",
    "key",
    "isHidden",
    "member",
  ],
} as const;

export const $DeleteAPIKeyReqDTO = {
  properties: {
    id: {
      type: "string",
      description: "The ID of the API key to be deleted",
    },
  },
  type: "object",
  required: ["id"],
} as const;

export const $DeleteAPIKeyResponseDTO = {
  properties: {
    deleted: {
      type: "boolean",
      description: "The status of the delete operation",
    },
  },
  type: "object",
  required: ["deleted"],
} as const;

export const $SingleAppInfoResDTO = {
  properties: {
    appId: {
      type: "string",
      description: "The unique identifier for the app",
    },
    key: {
      type: "string",
      description: "The key of the app",
    },
    name: {
      type: "string",
      description: "The name of the app",
    },
    description: {
      type: "string",
      description: "The description of the app",
    },
    logo: {
      type: "string",
      description: "The logo of the app",
    },
    categories: {
      items: {
        type: "string",
      },
      type: "array",
      description: "The categories of the app",
    },
    path: {
      type: "string",
      description: "The path of the app",
    },
    docs: {
      type: "string",
      description: "The documentation URL of the app",
    },
    configuration_docs_text: {
      type: "string",
      description: "The configuration documentation text of the app",
    },
    status: {
      type: "string",
      description: "The status of the app",
    },
    documentation_doc_text: {
      type: "string",
      description: "The documentation text of the app",
    },
    testConnectors: {
      items: {
        type: "object",
      },
      type: "array",
      description: "The test connectors of the app",
    },
    no_auth: {
      type: "boolean",
      description: "Indicates if the app has no authentication",
    },
    auth_schemes: {
      items: {
        type: "object",
      },
      type: "array",
      description: "The authentication schemes of the app",
    },
    meta: {
      description: "The metadata of the app",
    },
    yaml: {
      description: "The yaml of the app",
    },
  },
  type: "object",
  required: ["appId", "key", "name", "description"],
} as const;

export const $AddToolsReqDTO = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tool",
    },
    openApiSpecYaml: {
      type: "string",
      description: "The OpenAPI specification in YAML format",
    },
    integrationYaml: {
      type: "string",
      description: "The integration details in YAML format",
    },
  },
  type: "object",
  required: ["name", "openApiSpecYaml", "integrationYaml"],
} as const;

export const $OpenAPISpecListResDTO = {
  properties: {
    id: {
      type: "string",
      description: "Unique identifier for the OpenAPI spec",
    },
    name: {
      type: "string",
      description: "Name of the OpenAPI spec",
    },
    clientId: {
      type: "string",
      description: "Client identifier",
    },
    lastSyncAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Last synchronization date and time",
      format: "date-time",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Creation date and time",
      format: "date-time",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Last update date and time",
      format: "date-time",
    },
    status: {
      enum: [
        "initialized",
        "running",
        "caching",
        "cancelled",
        "finished",
        "exited",
      ],
      type: "string",
      description: "The job status of the app",
    },
    state: {
      enum: [
        "preprocess",
        "validate",
        "prepare",
        "build",
        "push",
        "load",
        "finish",
      ],
      type: "string",
      description: "Current state of the app FSM",
    },
  },
  type: "object",
  required: ["id", "name", "clientId", "lastSyncAt", "createdAt", "updatedAt"],
} as const;

export const $AddRepoURLResDTO = {
  properties: {
    repoUrl: {
      type: "string",
      description: "Repository URL",
    },
  },
  type: "object",
  required: ["repoUrl"],
} as const;

export const $DeleteToolsReqDTO = {
  properties: {
    name: {
      type: "string",
      description: "Name of the tool",
    },
  },
  type: "object",
  required: ["name"],
} as const;

export const $DeleteToolsResDTO = {
  properties: {
    message: {
      type: "string",
      description: "Message indicating successful deletion of tools",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $AddToolsRequestDTO = {
  properties: {
    name: {
      type: "string",
      description: "The name of the tool",
    },
    open_api_spec_yaml: {
      type: "string",
      description: "The OpenAPI specification in YAML format",
    },
    integration_yaml: {
      type: "string",
      description: "The integration details in YAML format",
    },
  },
  type: "object",
  required: ["name", "open_api_spec_yaml", "integration_yaml"],
} as const;

export const $AddRepoURLReqDTO = {
  properties: {
    repoUrl: {
      type: "string",
      description: "Repository URL",
    },
  },
  type: "object",
  required: ["repoUrl"],
} as const;

export const $AppQueryDTO = {
  properties: {
    category: {
      type: "string",
      description: "Category of the app",
    },
    additionalFields: {
      type: "string",
      description: "Additional fields to include in the response",
    },
    includeLocal: {
      type: "string",
      description: "Enter 'true' or 'false'",
    },
  },
  type: "object",
} as const;

export const $AppInfoResponseDto = {
  properties: {
    appId: {
      type: "string",
      description: "The ID of the app",
    },
    key: {
      type: "string",
      description: "The key of the app",
    },
    name: {
      type: "string",
      description: "The name of the app",
    },
    description: {
      type: "string",
      description: "The description of the app",
    },
    logo: {
      type: "string",
      description: "The logo of the app",
    },
    categories: {
      items: {
        type: "object",
      },
      type: "string",
      description: "The categories of the app",
    },
    tags: {
      items: {
        type: "object",
      },
      type: "string",
      description: "The tags of the app",
    },
    auth_schemes: {
      description: "The authentication schemes of the app",
    },
    enabled: {
      type: "boolean",
      description: "Indicates if the app is enabled",
    },
    no_auth: {
      type: "boolean",
      description: "Indicates if the app has no authentication",
    },
  },
  type: "object",
  required: [
    "appId",
    "key",
    "name",
    "description",
    "logo",
    "categories",
    "enabled",
  ],
} as const;

export const $AppListResDTO = {
  properties: {
    items: {
      items: {
        $ref: "#/components/schemas/AppInfoResponseDto",
      },
      type: "array",
      description: "List of app details",
    },
    totalPages: {
      type: "number",
      description: "Total number of pages",
    },
  },
  type: "object",
  required: ["items", "totalPages"],
} as const;

export const $ExpectedInputFieldsDTO = {
  properties: {
    name: {
      type: "string",
      description: "Name of the field",
    },
    type: {
      type: "string",
      description: "Type of the field",
    },
    description: {
      type: "string",
      description: "Description of the field",
    },
    display_name: {
      type: "string",
      description: "Display name of the field",
    },
    default: {
      type: "object",
      description: "Default value of the field",
    },
    required: {
      type: "boolean",
      description: "Whether the field is required",
    },
    expected_from_customer: {
      type: "boolean",
      description: "Whether the field is expected from customer",
    },
    is_secret: {
      type: "boolean",
      description: "Whether the field is a secret",
    },
  },
  type: "object",
  required: [
    "name",
    "type",
    "description",
    "display_name",
    "default",
    "required",
    "expected_from_customer",
    "is_secret",
  ],
} as const;

export const $GetConnectorInfoResDTO = {
  properties: {
    id: {
      type: "string",
      description: "Unique identifier of the connector",
    },
    authScheme: {
      type: "string",
      description: "Authentication scheme used by the connector",
    },
    name: {
      type: "string",
      description: "Name of the connector",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Creation date of the connector",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Last update date of the connector",
    },
    enabled: {
      type: "boolean",
      description: "Flag to indicate if the connector is currently enabled",
    },
    deleted: {
      type: "boolean",
      description: "Flag to indicate if the connector has been deleted",
    },
    appId: {
      type: "string",
      description: "Application ID associated with the connector",
    },
    defaultConnectorId: {
      type: "string",
      description: "Default connector ID if one exists",
    },
    authConfig: {
      type: "object",
      description: "Authentication configuration with sensitive data obscured",
    },
    expectedInputFields: {
      items: {
        $ref: "#/components/schemas/ExpectedInputFieldsDTO",
      },
      type: "array",
      description: "List of required fields expected from the customer",
    },
    logo: {
      type: "string",
      description: "Logo URL of the application associated with the connector",
    },
    appName: {
      type: "string",
      description: "Name of the application associated with the connector",
    },
    useComposioAuth: {
      type: "boolean",
      description: "Flag to indicate if Composio authentication is used",
    },
  },
  type: "object",
  required: [
    "enabled",
    "appId",
    "authConfig",
    "expectedInputFields",
    "logo",
    "appName",
    "useComposioAuth",
  ],
} as const;

export const $AuthConfigDTO = {
  properties: {
    scopes: {
      items: {
        type: "string",
      },
      type: "array",
    },
    user_scopes: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
  description: "Authentication configuration",
} as const;

export const $CreateConnectorPayloadDTO = {
  properties: {
    name: {
      type: "string",
      description: "Name of the connector",
    },
    authScheme: {
      type: "string",
      description: "Authentication scheme",
    },
    authConfig: {
      $ref: "#/components/schemas/AuthConfigDTO",
    },
    useComposioAuth: {
      type: "boolean",
      description: "Flag to indicate if Composio authentication should be used",
      anyOf: [
        {
          type: "boolean",
        },
      ],
    },
    appId: {
      type: "string",
      description:
        "Composio App UUID to be used for authentication. Either specify this or appName",
    },
    appName: {
      type: "string",
      description:
        "Name of the app to be used for authentication. Either specify this or appId",
    },
    forceNewIntegration: {
      type: "boolean",
      description: "Flag to force new integration",
    },
  },
  type: "object",
  required: ["name"],
} as const;

export const $PatchConnectorReqDTO = {
  properties: {
    authConfig: {
      type: "object",
      description: "Authentication configuration for the connector",
    },
    enabled: {
      type: "boolean",
      description: "Flag to indicate if the connector is enabled",
    },
  },
  type: "object",
} as const;

export const $PatchConnectorResDTO = {
  properties: {
    status: {
      type: "string",
      description: "Status of the patch operation",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $ConnectorListItemDTO = {
  properties: {
    appName: {
      type: "string",
      description: "Application name associated with the connector",
    },
    _count: {
      type: "object",
      description: "Count of connections for the connector",
    },
    connections: {
      items: {
        type: "object",
      },
      type: "array",
      description:
        "List of connections with their details and request logs count",
    },
    id: {
      type: "string",
      description: "Unique identifier of the connector",
    },
    member: {
      $ref: "#/components/schemas/MemberInfoResDTO",
    },
    name: {
      type: "string",
      description: "Name of the connector",
    },
    authScheme: {
      type: "string",
      description: "Authentication scheme used by the connector",
    },
    createdAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
      description: "Creation date of the connector",
    },
    updatedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
      description: "Last update date of the connector",
    },
    enabled: {
      type: "boolean",
      description: "Flag to indicate if the connector is enabled",
    },
    deleted: {
      type: "boolean",
      description: "Flag to indicate if the connector is deleted",
    },
    appId: {
      type: "string",
      description: "App ID associated with the connector",
    },
    defaultConnectorId: {
      type: "string",
      description: "Default connector ID if available",
    },
  },
  type: "object",
  required: [
    "appName",
    "_count",
    "connections",
    "id",
    "member",
    "name",
    "authScheme",
    "createdAt",
    "updatedAt",
    "enabled",
    "appId",
  ],
  description: "List of connectors",
} as const;

export const $GetConnectorListResDTO = {
  properties: {
    items: {
      items: {
        type: "object",
      },
      type: "array",
    },
    totalPages: {
      type: "number",
      description: "Total number of pages available",
    },
    page: {
      type: "number",
      description: "Current page number",
    },
  },
  type: "object",
  required: ["items", "totalPages", "page"],
} as const;

export const $PageInfo = {
  properties: {
    total: {
      minimum: 0,
      type: "integer",
    },
    page: {
      minimum: 1,
      type: "integer",
    },
    pageSize: {
      minimum: 1,
      type: "integer",
    },
    totalPages: {
      minimum: 1,
      type: "integer",
    },
  },
  type: "object",
  required: ["total", "page", "pageSize", "totalPages"],
} as const;

export const $ConnectionWithAppData = {
  properties: {
    id: {
      type: "string",
    },
    integrationId: {
      type: "string",
    },
    clientUniqueUserId: {
      type: "string",
    },
    status: {
      type: "string",
    },
    data: {
      type: "object",
    },
    deleted: {
      type: "boolean",
    },
    enabled: {
      type: "boolean",
    },
    createdAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    updatedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    appUniqueId: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    logo: {
      type: "string",
    },
    authConfig: {
      type: "object",
    },
    member: {
      items: {
        $ref: "#/components/schemas/MemberInfoResDTO",
      },
      type: "object",
    },
    labels: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
  required: [
    "id",
    "integrationId",
    "status",
    "createdAt",
    "updatedAt",
    "appUniqueId",
    "appName",
    "member",
  ],
} as const;

export const $GetConnectionsResult = {
  properties: {
    connections: {
      items: {
        $ref: "#/components/schemas/ConnectionWithAppData",
      },
      type: "array",
    },
    pageInfo: {
      $ref: "#/components/schemas/PageInfo",
    },
  },
  type: "object",
  required: ["connections", "pageInfo"],
} as const;

export const $ConnectionParams = {
  properties: {
    integrationId: {
      type: "string",
    },
    connectionParams: {
      type: "object",
    },
    isDisabled: {
      type: "boolean",
    },
    invocationCount: {
      type: "number",
    },
    id: {
      type: "string",
    },
    clientUniqueUserId: {
      type: "string",
    },
    status: {
      type: "string",
    },
    data: {
      type: "object",
    },
    deleted: {
      type: "boolean",
    },
    enabled: {
      type: "boolean",
    },
    createdAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    updatedAt: {
      oneOf: [
        {
          format: "date",
          type: "string",
        },
        {
          format: "date-time",
          type: "string",
        },
      ],
    },
    appUniqueId: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    logo: {
      type: "string",
    },
    authConfig: {
      type: "object",
    },
    member: {
      items: {
        $ref: "#/components/schemas/MemberInfoResDTO",
      },
      type: "object",
    },
    labels: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
  required: [
    "integrationId",
    "isDisabled",
    "invocationCount",
    "id",
    "status",
    "createdAt",
    "updatedAt",
    "appUniqueId",
    "appName",
    "member",
  ],
} as const;

export const $ToggleConnectedAccountResponseDTO = {
  properties: {
    status: {
      type: "string",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $ConnectionParamsHeaders = {
  properties: {
    Authorization: {
      type: "string",
    },
    "x-request-id": {
      type: "string",
    },
  },
  type: "object",
} as const;

export const $ConnectionParamsForAccount = {
  properties: {
    scope: {
      type: "string",
    },
    scopes: {
      type: "string",
    },
    id_token: {
      type: "string",
    },
    client_id: {
      type: "string",
    },
    expires_in: {
      type: "string",
    },
    token_type: {
      type: "string",
    },
    callback_url: {
      type: "string",
    },
    client_secret: {
      type: "string",
    },
    code_verifier: {
      type: "string",
    },
    refresh_token: {
      type: "string",
    },
    headers: {
      type: "object",
    },
    queryParams: {
      type: "object",
    },
    base_url: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const $MetaApp = {
  properties: {
    get_current_user_endpoint: {
      type: "string",
    },
  },
  type: "object",
  required: ["get_current_user_endpoint"],
} as const;

export const $Meta = {
  properties: {
    app: {
      type: "object",
    },
  },
  type: "object",
  required: ["app"],
} as const;

export const $ConnectedAccountResponseDTO = {
  properties: {
    integrationId: {
      type: "string",
    },
    appUniqueId: {
      type: "string",
    },
    memberInfo: {
      $ref: "#/components/schemas/MemberInfoResDTO",
    },
    meta: {
      $ref: "#/components/schemas/Meta",
    },
    isDisabled: {
      type: "boolean",
    },
    id: {
      type: "string",
    },
    clientUniqueUserId: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    entityId: {
      type: "string",
    },
    status: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    createdAt: {
      type: "string",
    },
    updatedAt: {
      type: "string",
    },
  },
  type: "object",
  required: [
    "integrationId",
    "appUniqueId",
    "id",
    "clientUniqueUserId",
    "appName",
    "entityId",
    "status",
    "createdAt",
    "updatedAt",
  ],
} as const;

export const $GetConnectionsResponseDto = {
  properties: {
    items: {
      items: {
        $ref: "#/components/schemas/ConnectionParams",
      },
      type: "array",
    },
    totalPages: {
      type: "number",
    },
    page: {
      type: "number",
    },
  },
  type: "object",
  required: ["items", "totalPages", "page"],
} as const;

export const $GetConnectionInfoResponseDTO = {
  properties: {
    base_url: {
      type: "string",
    },
    parameters: {
      items: {
        $ref: "#/components/schemas/Parameter",
      },
      type: "array",
    },
    body: {
      type: "object",
    },
  },
  type: "object",
  required: ["base_url", "parameters", "body"],
} as const;

export const $Parameter = {
  properties: {
    name: {
      type: "string",
      description:
        "The name of the parameter. For example, 'x-api-key', 'Content-Type', etc.,",
    },
    in: {
      enum: ["query", "header"],
      type: "string",
      description: "The location of the parameter. Can be 'query' or 'header'.",
    },
    value: {
      type: "string",
      description:
        "The value of the parameter. For example, '1234567890', 'application/json', etc.,",
    },
  },
  type: "object",
  required: ["name", "in", "value"],
} as const;

export const $Data = {
  properties: {
    field1: {
      type: "string",
    },
    field2: {
      type: "string",
    },
  },
  type: "object",
  required: ["field1", "field2"],
} as const;

export const $AdditionalInfo = {
  properties: {
    meta: {
      type: "string",
    },
  },
  type: "object",
  required: ["meta"],
} as const;

export const $GetConnectionsQueryDto = {
  properties: {
    page: {
      type: "number",
    },
    pageSize: {
      type: "number",
    },
    appNames: {
      type: "string",
    },
    integrationId: {
      type: "string",
    },
    connectionId: {
      type: "string",
    },
    user_uuid: {
      type: "string",
    },
    showActiveOnly: {
      type: "boolean",
    },
    status: {
      type: "string",
    },
    showDisabled: {
      type: "boolean",
    },
    labels: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
} as const;

export const $InitiateConnectionPayloadDto = {
  properties: {
    data: {
      type: "object",
    },
    integrationId: {
      minLength: 1,
      type: "string",
    },
    redirectUri: {
      type: "string",
    },
    userUuid: {
      type: "string",
    },
    entityId: {
      type: "string",
    },
    labels: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
  required: ["data", "integrationId"],
} as const;

export const $UpdateConnectionLabelsPayloadDto = {
  properties: {
    labels: {
      items: {
        type: "string",
      },
      type: "array",
    },
  },
  type: "object",
  required: ["labels"],
} as const;

export const $InitiateConnectionResponse = {
  properties: {
    connectionStatus: {
      minLength: 1,
      type: "string",
    },
    connectedAccountId: {
      minLength: 1,
      type: "string",
    },
    redirectUrl: {
      type: "string",
    },
  },
  type: "object",
  required: ["connectionStatus", "connectedAccountId"],
} as const;

export const $ToolsExecuteReqDto = {
  properties: {
    actionName: {
      type: "string",
    },
    runInSandbox: {
      type: "boolean",
    },
    input: {
      type: "object",
    },
    nlaInput: {
      type: "string",
    },
    authorizationData: {
      type: "object",
    },
    appSchema: {
      type: "object",
    },
    customDescription: {
      type: "string",
    },
    systemPrompt: {
      type: "string",
    },
  },
  type: "object",
  required: ["actionName", "runInSandbox", "input"],
} as const;

export const $DirectExecuteReqDto = {
  properties: {
    endpoint: {
      type: "string",
    },
    base_url: {
      type: "string",
    },
    headers: {
      type: "object",
    },
    queryParams: {
      type: "object",
    },
    body: {
      type: "object",
    },
  },
  type: "object",
  required: ["endpoint", "base_url", "headers", "queryParams"],
} as const;

export const $ActionExecutionResDto = {
  properties: {
    data: {
      type: "object",
    },
    error: {
      type: "string",
    },
    successfull: {
      type: "string",
    },
  },
  type: "object",
  required: ["data"],
} as const;

export const $CustomAuthDTO = {
  properties: {
    base_url: {
      type: "string",
    },
    parameters: {
      items: {
        $ref: "#/components/schemas/Parameter",
      },
      type: "array",
    },
    body: {
      type: "object",
    },
  },
  type: "object",
  required: ["parameters"],
} as const;

export const $ActionProxyRequestMethodDTO = {
  properties: {
    type: {
      enum: ["formData", "urlEncoded", "raw", "binary", "graphql", "none"],
      type: "string",
      description:
        "The type of request body to use for the action. Defaults to 'none'.",
    },
    data: {
      type: "string",
      description:
        "The data to be sent to the endpoint. This will override the body set in the connected account.",
    },
  },
  type: "object",
} as const;

export const $ActionProxyRequestConfigDTO = {
  properties: {
    connectedAccountId: {
      type: "string",
      description: "The connected account uuid to use for the action.",
    },
    endpoint: {
      type: "string",
      description:
        "The endpoint to call for the action. If the given url is relative, it will be resolved relative to the base_url set in the connected account info.",
    },
    method: {
      enum: ["GET", "POST", "PUT", "PATCH", "DELETE"],
      type: "string",
      description: "The HTTP method to use for the action.",
    },
    parameters: {
      items: {
        $ref: "#/components/schemas/Parameter",
      },
      type: "array",
    },
    body: {
      type: "object",
      description:
        "The body to be sent to the endpoint. This can either be a JSON field or a string.",
    },
  },
  type: "object",
  required: ["connectedAccountId", "endpoint", "method", "parameters"],
} as const;

export const $SessionInfoDTO = {
  properties: {
    sessionId: {
      type: "string",
    },
    metadata: {
      type: "object",
    },
  },
  type: "object",
} as const;

export const $ActionExecutionReqDTO = {
  properties: {
    connectedAccountId: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    entityId: {
      type: "string",
    },
    endpoint: {
      type: "string",
    },
    input: {
      type: "object",
    },
    sessionInfo: {
      $ref: "#/components/schemas/SessionInfoDTO",
    },
    authConfig: {
      $ref: "#/components/schemas/CustomAuthDTO",
    },
    text: {
      type: "string",
    },
    customDescription: {
      type: "string",
    },
    systemPrompt: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const $ActionGetNLAInputsReqDTO = {
  properties: {
    text: {
      type: "string",
    },
    customDescription: {
      type: "string",
    },
    systemPrompt: {
      type: "string",
    },
  },
  type: "object",
  required: ["text"],
} as const;

export const $ProxyExecutionReqDTO = {
  properties: {
    endpoint: {
      type: "string",
    },
    connectedAccountId: {
      type: "string",
    },
  },
  type: "object",
  required: ["endpoint", "connectedAccountId"],
} as const;

export const $ActionDetailsMinimal = {
  properties: {
    appId: {
      type: "string",
    },
    appKey: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    description: {
      type: "string",
    },
    displayName: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    logo: {
      type: "string",
    },
    name: {
      type: "string",
    },
    tags: {
      items: {
        type: "string",
      },
      type: "array",
    },
    deprecated: {
      type: "boolean",
    },
  },
  type: "object",
  required: [
    "appKey",
    "appName",
    "description",
    "displayName",
    "enabled",
    "logo",
    "name",
    "tags",
    "deprecated",
  ],
} as const;

export const $ActionDetails = {
  properties: {
    parameters: {
      type: "object",
    },
    response: {
      type: "object",
    },
    appId: {
      type: "string",
    },
    appKey: {
      type: "string",
    },
    appName: {
      type: "string",
    },
    description: {
      type: "string",
    },
    displayName: {
      type: "string",
    },
    enabled: {
      type: "boolean",
    },
    logo: {
      type: "string",
    },
    name: {
      type: "string",
    },
    tags: {
      items: {
        type: "string",
      },
      type: "array",
    },
    deprecated: {
      type: "boolean",
    },
  },
  type: "object",
  required: [
    "parameters",
    "response",
    "appKey",
    "appName",
    "description",
    "displayName",
    "enabled",
    "logo",
    "name",
    "tags",
    "deprecated",
  ],
} as const;

export const $ActionsListResponseDTO = {
  properties: {
    items: {
      items: {
        $ref: "#/components/schemas/ActionDetails",
      },
      type: "array",
    },
    page: {
      type: "number",
    },
    totalPages: {
      type: "number",
    },
  },
  type: "object",
  required: ["items", "page", "totalPages"],
} as const;

export const $ActionsMinimalListResponseDTO = {
  properties: {
    items: {
      items: {
        $ref: "#/components/schemas/ActionDetailsMinimal",
      },
      type: "array",
    },
    page: {
      type: "number",
    },
    totalPages: {
      type: "number",
    },
  },
  type: "object",
  required: ["items", "page", "totalPages"],
} as const;

export const $AdvancedUseCaseSearchBodyDTO = {
  properties: {
    useCase: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const $AdvancedUseCaseSearchQueryDTO = {
  properties: {
    useCase: {
      type: "string",
      deprecated: true,
      description:
        "Use case is deprecated. Please provide this in the body instead to avoid max-uri-length error.",
    },
    limit: {
      type: "number",
    },
    maxActionsPerTask: {
      type: "number",
    },
    minActionsPerTask: {
      type: "number",
    },
    apps: {
      type: "string",
    },
    filterByAvailableApps: {
      type: "boolean",
    },
  },
  type: "object",
  required: ["useCase"],
} as const;

export const $AdvancedUseCaseSearchTask = {
  properties: {
    app: {
      type: "string",
    },
    actions: {
      items: {
        type: "string",
      },
      type: "array",
    },
    description: {
      type: "string",
    },
    order: {
      type: "number",
    },
  },
  type: "object",
  required: ["app", "actions", "description", "order"],
} as const;

export const $AdvancedUseCaseSearchResponse = {
  properties: {
    items: {
      items: {
        $ref: "#/components/schemas/AdvancedUseCaseSearchTask",
      },
      type: "array",
    },
  },
  type: "object",
  required: ["items"],
} as const;

export const $ExecuteActionResDTO = {
  properties: {
    response_data: {
      type: "boolean",
      description: "Indicates if the action was executed successfully",
    },
    execution_details: {
      type: "object",
      description: "Details of the execution status",
    },
  },
  type: "object",
  required: ["response_data", "execution_details"],
} as const;

export const $ActionsQueryDTO = {
  properties: {
    appNames: {
      type: "string",
      description: "Names of the apps",
    },
    useCase: {
      type: "string",
      description: "Use case",
    },
    showEnabledOnly: {
      type: "boolean",
      description: "Show enabled only",
    },
    limit: {
      type: "number",
      description: "Limit",
    },
    apps: {
      type: "string",
    },
    actions: {
      type: "string",
    },
    tags: {
      type: "string",
    },
    usecaseLimit: {
      type: "number",
    },
    filterImportantActions: {
      type: "boolean",
    },
    showAll: {
      type: "boolean",
    },
    page: {
      type: "number",
    },
    offset: {
      type: "number",
    },
  },
  type: "object",
} as const;

export const $ActionsControllerV1 = {
  properties: {
    getAction: {
      items: {
        type: "object",
      },
      type: "array",
    },
  },
  type: "object",
  required: ["getAction"],
} as const;

export const $OAuth2CallbackQueryDto = {
  properties: {
    state: {
      type: "string",
    },
  },
  type: "object",
  required: ["state"],
} as const;

export const $RedirectUriDTO = {
  properties: {
    redirectUri: {
      type: "string",
    },
  },
  type: "object",
} as const;

export const $ListTriggersQueryDTO = {
  properties: {
    appNames: {
      type: "string",
      description: "Names of the apps",
    },
    connectedAccountIds: {
      type: "string",
      description: "IDs of the connected accounts",
    },
    triggerIds: {
      type: "string",
      description: "IDs of the triggers",
    },
    integrationIds: {
      type: "string",
      description: "Integration ID",
    },
    showEnabledOnly: {
      type: "boolean",
      description: "Show enabled only",
    },
  },
  type: "object",
} as const;

export const $GetActiveTriggersQueryDTO = {
  properties: {
    connectedAccountIds: {
      type: "string",
      description: "IDs of the connected accounts",
    },
    integrationIds: {
      type: "string",
      description: "IDs of the integrations",
    },
    triggerIds: {
      type: "string",
      description: "IDs of the triggers",
    },
    triggerNames: {
      type: "string",
      description: "Names of the triggers",
    },
    page: {
      type: "number",
      description: "Page number",
    },
    limit: {
      type: "number",
      description: "Limit per page",
    },
    showDisabled: {
      type: "boolean",
      description: "Show disabled triggers",
    },
  },
  type: "object",
} as const;

export const $GetLogsQueryDTO = {
  properties: {
    connectionId: {
      type: "string",
      description: "ID of the connection",
    },
    integrationId: {
      type: "string",
      description: "ID of the integration",
    },
    page: {
      type: "number",
      description: "Page number",
    },
    limit: {
      type: "number",
      description: "Limit per page",
    },
  },
  type: "object",
} as const;

export const $TriggerResDTO = {
  properties: {
    name: {
      type: "string",
      description: "Trigger name",
    },
    display_name: {
      type: "string",
      description: "Trigger display name",
    },
    description: {
      type: "string",
      description: "Trigger description",
    },
    enabled: {
      type: "boolean",
      description: "Is trigger enabled",
    },
    config: {
      type: "object",
      description: "Trigger configuration",
    },
    payload: {
      type: "object",
      description: "Trigger payload",
    },
    logo: {
      type: "string",
      description: "Trigger logo URL",
    },
    count: {
      type: "number",
      description: "Trigger count",
    },
    appKey: {
      type: "string",
      description: "App key",
    },
    appId: {
      type: "string",
      description: "App ID",
    },
    appName: {
      type: "string",
      description: "App name",
    },
    instructions: {
      type: "string",
      description: "Trigger instructions",
    },
    type: {
      type: "string",
      description: "Trigger type",
    },
  },
  type: "object",
  required: ["name", "display_name", "appKey", "appId", "appName"],
} as const;

export const $SingleTriggerResDTO = {
  properties: {
    name: {
      type: "string",
      description: "Trigger name",
    },
    displayName: {
      type: "string",
      description: "Trigger display name",
    },
    description: {
      type: "string",
      description: "Trigger description",
    },
    type: {
      type: "string",
      description: "Trigger type",
    },
    appId: {
      type: "string",
      description: "App ID",
    },
    appName: {
      type: "string",
      description: "App name",
    },
    instructions: {
      type: "string",
      description: "Trigger instructions",
    },
    payload: {
      type: "object",
      description: "Trigger payload",
    },
    config: {
      type: "object",
      description: "Trigger config",
    },
  },
  type: "object",
  required: [
    "name",
    "displayName",
    "description",
    "type",
    "appId",
    "appName",
    "payload",
    "config",
  ],
} as const;

export const $TriggerConfig = {
  properties: {
    repo: {
      type: "string",
      description: "Repository name",
    },
    owner: {
      type: "string",
      description: "Repository owner",
    },
  },
  type: "object",
  required: ["repo", "owner"],
  description: "Trigger configuration",
} as const;

export const $ActiveTriggerInstance = {
  properties: {
    id: {
      type: "string",
      description: "Trigger instance ID",
    },
    connectionId: {
      type: "string",
      description: "Connected account ID",
    },
    triggerName: {
      type: "string",
      description: "Trigger name",
    },
    triggerData: {
      type: "string",
      description: "Trigger data",
    },
    triggerConfig: {
      $ref: "#/components/schemas/TriggerConfig",
    },
    createdAt: {
      type: "string",
      description: "Created at timestamp",
      format: "date-time",
    },
    updatedAt: {
      type: "string",
      description: "Updated at timestamp",
      format: "date-time",
    },
    disabledAt: {
      type: "string",
      description: "Disabled at timestamp",
      format: "date-time",
      nullable: true,
    },
  },
  type: "object",
  required: [
    "connectionId",
    "triggerName",
    "triggerConfig",
    "createdAt",
    "updatedAt",
  ],
} as const;

export const $PageInfoDTO = {
  properties: {
    currentPage: {
      type: "number",
    },
    perPage: {
      type: "number",
    },
    totalPages: {
      type: "number",
    },
  },
  type: "object",
  required: ["currentPage", "perPage", "totalPages"],
} as const;

export const $ActiveTriggersResDTO = {
  properties: {
    triggers: {
      items: {
        type: "object",
      },
      type: "array",
    },
    pageInfo: {
      items: {
        $ref: "#/components/schemas/PageInfoDTO",
      },
      type: "array",
    },
  },
  type: "object",
  required: ["triggers", "pageInfo"],
} as const;

export const $TriggerLogsResDTO = {
  properties: {
    data: {
      items: {
        $ref: "#/components/schemas/TriggerLogItemDTO",
      },
      type: "array",
    },
    pageInfo: {
      $ref: "#/components/schemas/PageInfoDTO",
    },
  },
  type: "object",
  required: ["data", "pageInfo"],
} as const;

export const $TriggerLogItemDTO = {
  properties: {
    clientId: {
      type: "string",
      description: "Client ID",
    },
    connectionId: {
      type: "string",
      description: "Connection ID",
    },
    errorTrigger: {
      type: "string",
      description: "Error trigger",
      nullable: true,
    },
    triggerClientError: {
      type: "string",
      description: "Trigger client error",
      nullable: true,
    },
    triggerClientPayload: {
      type: "string",
      description: "Trigger client payload",
      nullable: true,
    },
    triggerProviderPayload: {
      type: "string",
      description: "Trigger provider payload",
      nullable: true,
    },
    triggerName: {
      type: "string",
      description: "Trigger name",
      nullable: true,
    },
    id: {
      type: "string",
      description: "Log ID",
    },
    appKey: {
      type: "string",
      description: "App key",
    },
    createdAt: {
      type: "string",
      description: "Created at timestamp",
      format: "date-time",
    },
  },
  type: "object",
  required: ["clientId", "connectionId", "id", "appKey", "createdAt"],
} as const;

export const $HandleTriggerParamsDTO = {
  properties: {
    appName: {
      type: "string",
      description: "The name of the app",
    },
    clientId: {
      type: "string",
      description: "The client ID",
    },
  },
  type: "object",
  required: ["appName", "clientId"],
} as const;

export const $HandleTriggerBodyDTO = {
  properties: {
    body: {
      type: "object",
      description: "The trigger payload",
    },
  },
  type: "object",
  required: ["body"],
} as const;

export const $EnableTriggerParamsDTO = {
  properties: {
    connectedAccountId: {
      type: "string",
      description: "The connected account ID",
    },
    triggerName: {
      type: "string",
      description: "The trigger name",
    },
  },
  type: "object",
  required: ["connectedAccountId", "triggerName"],
} as const;

export const $GetTriggerParamsDTO = {
  properties: {
    triggerId: {
      type: "string",
      description: "The connected account ID",
    },
  },
  type: "object",
  required: ["triggerId"],
} as const;

export const $EnableTriggerBodyDTO = {
  properties: {
    triggerConfig: {
      type: "object",
      description: "The trigger configuration",
    },
    verifyHost: {
      type: "string",
      description: "The verify host",
    },
  },
  type: "object",
  required: ["triggerConfig"],
} as const;

export const $SwitchTriggerStatusParamsDTO = {
  properties: {
    triggerId: {
      type: "string",
      description: "The trigger instance ID",
    },
  },
  type: "object",
  required: ["triggerId"],
} as const;

export const $SwitchTriggerStatusBodyDTO = {
  properties: {
    enabled: {
      type: "boolean",
      description: "The new enabled status of the trigger",
    },
  },
  type: "object",
  required: ["enabled"],
} as const;

export const $TriggerInstanceParamsDTO = {
  properties: {
    triggerInstanceId: {
      type: "string",
      description: "The trigger instance ID",
    },
  },
  type: "object",
  required: ["triggerInstanceId"],
} as const;

export const $SetCallbackUrlBodyDTO = {
  properties: {
    callbackURL: {
      type: "string",
      description: "The callback URL",
    },
  },
  type: "object",
  required: ["callbackURL"],
} as const;

export const $TriggerResponseDTO = {
  properties: {
    status: {
      type: "string",
      description: "The status of the operation",
    },
    message: {
      type: "string",
      description: "Optional message",
    },
    triggerId: {
      type: "string",
      description: "Optional trigger ID",
    },
    isNew: {
      type: "boolean",
      description:
        "Is new trigger. If true, the trigger was created just now or else it was already existing",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $WebhookURLResponseDTO = {
  properties: {
    status: {
      type: "string",
      description: "The status of the operation",
    },
    callbackURL: {
      type: "string",
      description: "The callback URL if found",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $TriggerMetadataDTO = {
  properties: {
    id: {
      type: "string",
      description: "The unique identifier of the trigger",
    },
    connectionId: {
      type: "string",
      description: "The connection identifier associated with the trigger",
    },
    triggerName: {
      type: "string",
      description: "The name of the trigger",
    },
    triggerData: {
      type: "string",
      description: "The data associated with the trigger",
    },
    triggerConfig: {
      type: "object",
      description: "The configuration of the trigger",
    },
    state: {
      type: "object",
      description: "The state of the trigger",
    },
    createdAt: {
      type: "string",
      description: "The creation date of the trigger",
    },
    updatedAt: {
      type: "string",
      description: "The last update date of the trigger",
    },
    disabledAt: {
      type: "string",
      description: "The date when the trigger was disabled, if applicable",
    },
    disabledReason: {
      type: "string",
      description: "The reason why the trigger was disabled, if applicable",
    },
  },
  type: "object",
  required: [
    "id",
    "connectionId",
    "triggerName",
    "triggerData",
    "triggerConfig",
    "state",
    "createdAt",
    "updatedAt",
  ],
  description: "The trigger details if found",
} as const;

export const $GetTriggerResponseDTO = {
  properties: {
    status: {
      type: "string",
      description: "The status of the operation",
    },
    trigger: {
      $ref: "#/components/schemas/TriggerMetadataDTO",
    },
  },
  type: "object",
  required: ["status"],
} as const;

export const $GenerateCLISessionReqDTO = {
  properties: {
    channel_name: {
      type: "string",
      description: "The channel name for the CLI session",
    },
  },
  type: "object",
  required: ["channel_name"],
} as const;

export const $GenerateCLISessionResDTO = {
  properties: {
    key: {
      type: "string",
      description: "The key for the CLI session",
    },
  },
  type: "object",
  required: ["key"],
} as const;

export const $GetCLISessionResDTO = {
  properties: {
    clientId: {
      type: "string",
      description: "The client ID",
    },
    cliCode: {
      type: "string",
      description: "The CLI code",
    },
  },
  type: "object",
  required: ["clientId", "cliCode"],
} as const;

export const $VerifyCLICodeResDTO = {
  properties: {
    clientId: {
      type: "string",
      description: "The client ID",
    },
    cliCode: {
      type: "string",
      description: "The CLI code",
    },
    apiKey: {
      type: "string",
      description: "The API key associated with the client",
    },
  },
  type: "object",
  required: ["clientId", "cliCode", "apiKey"],
} as const;

export const $CLIQueryDTO = {
  properties: {
    key: {
      type: "string",
      description: "Unique key for CLI session",
    },
    code: {
      type: "string",
      description: "Code for CLI verification",
    },
  },
  type: "object",
  required: ["key"],
} as const;

export const $MetadataReqDTO = {
  properties: {
    email: {
      type: "string",
      description: "The email associated with the metadata request",
    },
    metadata: {
      description: "Additional metadata as a key-value pair",
    },
  },
  type: "object",
  required: ["email"],
} as const;

export const $TriggersEnabledToggleReqDTO = {
  properties: {
    enabled: {
      type: "boolean",
      description: "Flag to enable or disable triggers",
    },
  },
  type: "object",
  required: ["enabled"],
} as const;

export const $TriggersEnabledToggleResDTO = {
  properties: {
    message: {
      type: "string",
      description: "Message indicating the result of the toggle operation",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $TriggerToggleInfoResponseDTO = {
  properties: {
    triggersEnabled: {
      type: "boolean",
      description: "Indicates if triggers are enabled",
    },
  },
  type: "object",
  required: ["triggersEnabled"],
} as const;

export const $ToggleTriggerStateResponseDTO = {
  properties: {
    message: {
      type: "string",
    },
  },
  type: "object",
  required: ["message"],
} as const;

export const $MetadataQueryDTO = {
  properties: {
    email: {
      type: "string",
      description: "Email of the client",
    },
  },
  type: "object",
  required: ["email"],
} as const;

export const $TriggerMetadata = {
  properties: {
    id: {
      type: "string",
      description: "The unique id of the log",
    },
    type: {
      type: "string",
      description: "The type of the log",
      oneOf: [
        {
          type: "string",
          enum: ["trigger"],
        },
      ],
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The date and time when the log was created",
      format: "date-time",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The date and time when the log was updated",
      format: "date-time",
    },
    provider: {
      type: "string",
      description: "The provider of the log",
    },
    clientId: {
      type: "string",
      description: "The client uuid of the log",
    },
    connectionId: {
      type: "string",
      description: "The connection id of the log",
    },
    triggerProviderPayload: {
      type: "string",
      description: "The trigger provider payload of the log",
    },
    triggerClientPayload: {
      type: "string",
    },
    triggerClientError: {
      type: "string",
      description: "The trigger client error of the log",
    },
    triggerName: {
      type: "string",
      description: "The trigger name of the log",
    },
    triggerClientResponse: {
      type: "string",
      description: "The trigger client response of the log",
    },
  },
  type: "object",
  required: [
    "id",
    "type",
    "createdAt",
    "updatedAt",
    "provider",
    "clientId",
    "connectionId",
  ],
  description: "Metadata associated with the trigger log",
} as const;

export const $ActionMetadata = {
  properties: {
    id: {
      type: "string",
      description: "The unique id of the log",
    },
    request: {
      type: "string",
      description: "The request sent to the provider",
    },
    response: {
      type: "string",
      description: "The response from the provider",
    },
    errorRequest: {
      type: "string",
      description: "The error request sent to the provider",
    },
    type: {
      type: "string",
      description: "The type of the log",
      oneOf: [
        {
          type: "string",
          enum: ["action"],
        },
      ],
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The date and time when the log was created",
      format: "date-time",
    },
    updatedAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The date and time when the log was updated",
      format: "date-time",
    },
    provider: {
      type: "string",
      description: "The provider of the log",
    },
    clientId: {
      type: "string",
      description: "The client uuid of the log",
    },
    connectionId: {
      type: "string",
      description: "The connection id of the log",
    },
    actionName: {
      type: "string",
      description: "The action name of the log",
    },
  },
  type: "object",
  required: [
    "id",
    "request",
    "type",
    "createdAt",
    "updatedAt",
    "provider",
    "clientId",
    "connectionId",
    "actionName",
  ],
} as const;

export const $TriggerLogData = {
  properties: {
    id: {
      type: "string",
      description: "The unique identifier of the trigger log",
    },
    connectionId: {
      type: "string",
      description: "The connection identifier associated with the trigger log",
    },
    clientId: {
      type: "string",
      description: "The client identifier associated with the trigger log",
    },
    status: {
      type: "string",
      description: "The status of the trigger log",
    },
    appName: {
      type: "string",
      description:
        "The name of the application associated with the trigger log",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The creation date and time of the trigger log",
      format: "date-time",
    },
    type: {
      type: "string",
      description: "The type of the log",
      oneOf: [
        {
          type: "string",
          enum: ["trigger"],
        },
      ],
    },
    meta: {
      $ref: "#/components/schemas/TriggerMetadata",
    },
  },
  type: "object",
  required: [
    "id",
    "connectionId",
    "clientId",
    "status",
    "appName",
    "createdAt",
    "type",
    "meta",
  ],
} as const;

export const $ActionLogData = {
  properties: {
    id: {
      type: "string",
      description: "The unique identifier of the action log",
    },
    connectionId: {
      type: "string",
      description: "The connection identifier associated with the action log",
    },
    clientId: {
      type: "string",
      description: "The client identifier associated with the action log",
    },
    status: {
      type: "string",
      description: "The status of the action log",
    },
    appName: {
      type: "string",
      description: "The name of the application associated with the action log",
    },
    createdAt: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "The creation date and time of the action log",
      format: "date-time",
    },
    type: {
      type: "string",
      description: "The type of the log",
      oneOf: [
        {
          type: "string",
          enum: ["action"],
        },
      ],
    },
    meta: {
      $ref: "#/components/schemas/ActionMetadata",
    },
  },
  type: "object",
  required: [
    "id",
    "connectionId",
    "clientId",
    "status",
    "appName",
    "createdAt",
    "type",
    "meta",
  ],
} as const;

export const $LogsResDTO = {
  properties: {
    nextCursor: {
      type: "string",
      description: "The cursor to get the next page of logs",
    },
    data: {
      items: {
        type: "object",
      },
      type: "array",
      description: "Logs data",
    },
  },
  type: "object",
  required: ["data"],
} as const;

export const $GetLogsDTO = {
  properties: {
    type: {
      enum: ["error", "info", "debug"],
      type: "string",
      description: "Type of the log",
    },
    time: {
      enum: ["5m", "30m", "6h", "1d", "1w", "1month", "1y"],
      type: "string",
      description: "Time interval for which data needs to be fetched",
    },
    status: {
      enum: ["all", "success", "error"],
      type: "string",
      description: "Status of the log",
    },
    search: {
      type: "string",
      description: "Search term in the log",
    },
    integrationId: {
      type: "string",
      description: "Integration UUID",
    },
    entityId: {
      type: "string",
      description: "Entity id",
    },
    limit: {
      type: "number",
      description: "Limit of the logs",
      default: 10,
    },
    cursor: {
      type: "string",
      description: "Cursor for pagination",
    },
    logsType: {
      type: "string",
      description: "Type of the log",
    },
    sessionId: {
      type: "string",
      description: "Session ID of the log",
    },
  },
  type: "object",
} as const;

export const $IngestDataDTO = {
  properties: {
    connectionId: {
      type: "string",
      description: "Connection ID of the log",
    },
    sessionId: {
      type: "string",
      description: "Session ID of the log",
    },
    logsType: {
      type: "string",
      description: "Type of the log",
    },
    entityId: {
      type: "string",
      description: "Entity ID of the log",
    },
    providerName: {
      type: "string",
      description: "Provider name of the log",
    },
    actionName: {
      type: "string",
      description: "Action name of the log",
    },
    request: {
      type: "object",
    },
    response: {
      type: "object",
    },
    isError: {
      type: "boolean",
    },
  },
  type: "object",
  required: ["providerName", "actionName", "request", "response", "isError"],
} as const;

export const $IngestDataResponseDTO = {
  properties: {
    isIngested: {
      type: "boolean",
    },
  },
  type: "object",
  required: ["isIngested"],
} as const;

export const $TimePeriodReqDTO = {
  properties: {
    lastTimePeriod: {
      enum: ["DAY", "WEEK", "MONTH", "SIX_MONTH", "YEAR", "FIVE_YEAR"],
      type: "string",
      description: "Time period to get the data for",
    },
  },
  type: "object",
} as const;

export const $ActionByAppDTO = {
  properties: {
    appName: {
      type: "string",
      description: "Name of the app",
    },
    totalCount: {
      type: "number",
      description: "Total count of actions for the app",
    },
  },
  type: "object",
  required: ["appName", "totalCount"],
  description: "Action counts by app",
} as const;

export const $ActionByStatusDTO = {
  properties: {
    failed: {
      type: "number",
      description: "Count of failed actions",
    },
    success: {
      type: "number",
      description: "Count of successful actions",
    },
  },
  type: "object",
  required: ["failed", "success"],
  description: "Action counts by status",
} as const;

export const $ActionAnalyticsDTO = {
  properties: {
    date: {
      type: "string",
      description: "Date of the action",
      format: "date",
    },
    byApp: {
      $ref: "#/components/schemas/ActionByAppDTO",
    },
    byStatus: {
      $ref: "#/components/schemas/ActionByStatusDTO",
    },
  },
  type: "object",
  required: ["date", "byApp", "byStatus"],
  description:
    "Comprehensive trigger analytics data, presenting a breakdown by day, status, and provider for all triggers",
} as const;

export const $IntegrationsWithCountsDTO = {
  properties: {
    id: {
      type: "string",
      description: "Unique identifier for the integration",
    },
    appName: {
      type: "string",
      description: "Name of the app",
    },
    integrationName: {
      type: "string",
      description: "Name of the integration",
    },
    connectionCount: {
      type: "number",
      description: "Count of connections for the integration",
    },
    triggerCount: {
      type: "number",
      description: "Count of triggers for the integration",
    },
    requestLogsCount: {
      type: "number",
      description: "Count of request logs for the integration",
    },
  },
  type: "object",
  required: [
    "id",
    "appName",
    "integrationName",
    "connectionCount",
    "triggerCount",
    "requestLogsCount",
  ],
  description:
    "Detailed integration analytics data, including a breakdown of connection count, trigger count, and request logs count for each integration",
} as const;

export const $AppNameCountDTO = {
  properties: {
    appName: {
      type: "string",
      description: "Name of the app",
    },
    connectionCount: {
      type: "number",
      description: "Count of connections for the app",
    },
    triggerCount: {
      type: "number",
      description: "Count of triggers for the app",
    },
    requestLogsCount: {
      type: "number",
      description: "Count of request logs for the app",
    },
  },
  type: "object",
  required: ["appName", "connectionCount", "triggerCount", "requestLogsCount"],
  description:
    "Comprehensive app-level analytics data, providing a breakdown of connection count, trigger count, and request logs count for each app",
} as const;

export const $AnalyticsDataReqDTO = {
  properties: {
    lastTimePeriod: {
      enum: ["DAY", "WEEK", "MONTH", "SIX_MONTH", "YEAR", "FIVE_YEAR"],
      type: "string",
      description: "Time period to get the data for",
    },
  },
  type: "object",
} as const;

export const $ClientUniqueUserIdCountDTO = {
  properties: {
    clientUniqueUserId: {
      type: "string",
      description: "Client unique user id",
    },
    count: {
      type: "number",
      description: "Count of connections for the client unique user id",
    },
  },
  type: "object",
  required: ["clientUniqueUserId", "count"],
  description: "Connection counts by entity",
} as const;

export const $AnalyticsEntityDataDTO = {
  properties: {
    byConnections: {
      items: {
        $ref: "#/components/schemas/ClientUniqueUserIdCountDTO",
      },
      type: "array",
    },
    byActions: {
      items: {
        $ref: "#/components/schemas/ClientUniqueUserIdCountDTO",
      },
      type: "array",
      description: "Action counts by entity",
    },
    byTriggers: {
      items: {
        $ref: "#/components/schemas/ClientUniqueUserIdCountDTO",
      },
      type: "array",
      description: "Trigger counts by entity",
    },
  },
  type: "object",
  required: ["byConnections", "byActions", "byTriggers"],
  description:
    "Entity-related analytics data, providing a breakdown by connections, actions, and triggers for each entity. This is include all entity info.",
} as const;

export const $AnalyticsDataResDTO = {
  properties: {
    entity: {
      $ref: "#/components/schemas/AnalyticsEntityDataDTO",
    },
    actions: {
      items: {
        $ref: "#/components/schemas/ActionAnalyticsDTO",
      },
      type: "array",
    },
    trigger: {
      items: {
        $ref: "#/components/schemas/ActionAnalyticsDTO",
      },
      type: "array",
    },
    integrations: {
      items: {
        $ref: "#/components/schemas/IntegrationsWithCountsDTO",
      },
      type: "array",
    },
    app: {
      $ref: "#/components/schemas/AppNameCountDTO",
    },
  },
  type: "object",
  required: ["entity", "actions", "trigger", "integrations", "app"],
} as const;

export const $TopEntitiesResDTO = {
  properties: {
    entities: {
      items: {
        $ref: "#/components/schemas/TConnectionCountDTO",
      },
      type: "array",
      description: "Top entities by connection count",
    },
  },
  type: "object",
  required: ["entities"],
} as const;

export const $TConnectionCountDTO = {
  properties: {
    clientUniqueUserId: {
      type: "string",
      description: "Name of the entity",
    },
    count: {
      type: "number",
      description: "Count of connections for the entity",
    },
  },
  type: "object",
  required: ["clientUniqueUserId", "count"],
} as const;

export const $EntityQueryReqDTO = {
  properties: {
    query: {
      type: "string",
      description: "Query to get the data for",
    },
  },
  type: "object",
} as const;

export const $WebhookReqDTO = {
  properties: {
    eventWebhookURL: {
      type: "string",
      description: "Event Webhook URL",
    },
  },
  type: "object",
  required: ["eventWebhookURL"],
} as const;

export const $FetchQueryDTO = {
  properties: {
    startTime: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "Start time of the event in ISO 8601 format",
    },
    endTime: {
      pattern: "\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d.\\d+Z?",
      type: "string",
      description: "End time of the event in ISO 8601 format",
    },
  },
  type: "object",
  required: ["startTime", "endTime"],
} as const;

export const $WebhookSecretResDTO = {
  properties: {
    webhookSecret: {
      type: "string",
      description: "Webhook secret",
    },
  },
  type: "object",
  required: ["webhookSecret"],
} as const;

export const $CreateCheckoutSessionReqDto = {
  properties: {
    plan: {
      enum: ["HOBBY", "STARTER", "GROWTH", "ENTERPRISE", "STARTUP"],
      type: "string",
    },
    applyCoupon: {
      type: "boolean",
    },
  },
  type: "object",
  required: ["plan"],
} as const;

export const $SDKErrorResDTO = {
  properties: {
    status: {
      type: "string",
      description: "The status of the SDK error",
    },
  },
  type: "object",
  required: ["status"],
} as const;
